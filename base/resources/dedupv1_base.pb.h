// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedupv1_base.proto

#ifndef PROTOBUF_dedupv1_5fbase_2eproto__INCLUDED
#define PROTOBUF_dedupv1_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

class DiskHashIndexLogfileData;
class DiskHashPageData;
class DiskHashTransactionPageData;
class FixedIndexMetaData;
class FixedIndexBucketData;
class IntData;
class BitmapData;
class BitmapPageData;
class RawByteData;

enum FixedIndexBucketStateData {
  FIXED_INDEX_STATE_VALID = 0,
  FIXED_INDEX_STATE_INVALID = 1
};
bool FixedIndexBucketStateData_IsValid(int value);
const FixedIndexBucketStateData FixedIndexBucketStateData_MIN = FIXED_INDEX_STATE_VALID;
const FixedIndexBucketStateData FixedIndexBucketStateData_MAX = FIXED_INDEX_STATE_INVALID;
const int FixedIndexBucketStateData_ARRAYSIZE = FixedIndexBucketStateData_MAX + 1;

const ::google::protobuf::EnumDescriptor* FixedIndexBucketStateData_descriptor();
inline const ::std::string& FixedIndexBucketStateData_Name(FixedIndexBucketStateData value) {
  return ::google::protobuf::internal::NameOfEnum(
    FixedIndexBucketStateData_descriptor(), value);
}
inline bool FixedIndexBucketStateData_Parse(
    const ::std::string& name, FixedIndexBucketStateData* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FixedIndexBucketStateData>(
    FixedIndexBucketStateData_descriptor(), name, value);
}
// ===================================================================

class DiskHashIndexLogfileData : public ::google::protobuf::Message {
 public:
  DiskHashIndexLogfileData();
  virtual ~DiskHashIndexLogfileData();

  DiskHashIndexLogfileData(const DiskHashIndexLogfileData& from);

  inline DiskHashIndexLogfileData& operator=(const DiskHashIndexLogfileData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskHashIndexLogfileData& default_instance();

  void Swap(DiskHashIndexLogfileData* other);

  // implements Message ----------------------------------------------

  DiskHashIndexLogfileData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskHashIndexLogfileData& from);
  void MergeFrom(const DiskHashIndexLogfileData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 page_size = 1;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 page_size() const;
  inline void set_page_size(::google::protobuf::uint32 value);

  // optional uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // repeated string filename = 3;
  inline int filename_size() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename(int index) const;
  inline ::std::string* mutable_filename(int index);
  inline void set_filename(int index, const ::std::string& value);
  inline void set_filename(int index, const char* value);
  inline void set_filename(int index, const char* value, size_t size);
  inline ::std::string* add_filename();
  inline void add_filename(const ::std::string& value);
  inline void add_filename(const char* value);
  inline void add_filename(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& filename() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filename();

  // optional bool overflow_area = 4;
  inline bool has_overflow_area() const;
  inline void clear_overflow_area();
  static const int kOverflowAreaFieldNumber = 4;
  inline bool overflow_area() const;
  inline void set_overflow_area(bool value);

  // @@protoc_insertion_point(class_scope:DiskHashIndexLogfileData)
 private:
  inline void set_has_page_size();
  inline void clear_has_page_size();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_overflow_area();
  inline void clear_has_overflow_area();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint32 page_size_;
  bool overflow_area_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static DiskHashIndexLogfileData* default_instance_;
};
// -------------------------------------------------------------------

class DiskHashPageData : public ::google::protobuf::Message {
 public:
  DiskHashPageData();
  virtual ~DiskHashPageData();

  DiskHashPageData(const DiskHashPageData& from);

  inline DiskHashPageData& operator=(const DiskHashPageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskHashPageData& default_instance();

  void Swap(DiskHashPageData* other);

  // implements Message ----------------------------------------------

  DiskHashPageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskHashPageData& from);
  void MergeFrom(const DiskHashPageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 crc = 1;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 1;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // optional uint32 entry_count = 2;
  inline bool has_entry_count() const;
  inline void clear_entry_count();
  static const int kEntryCountFieldNumber = 2;
  inline ::google::protobuf::uint32 entry_count() const;
  inline void set_entry_count(::google::protobuf::uint32 value);

  // optional bool overflow = 3 [default = false];
  inline bool has_overflow() const;
  inline void clear_overflow();
  static const int kOverflowFieldNumber = 3;
  inline bool overflow() const;
  inline void set_overflow(bool value);

  // @@protoc_insertion_point(class_scope:DiskHashPageData)
 private:
  inline void set_has_crc();
  inline void clear_has_crc();
  inline void set_has_entry_count();
  inline void clear_has_entry_count();
  inline void set_has_overflow();
  inline void clear_has_overflow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 crc_;
  ::google::protobuf::uint32 entry_count_;
  bool overflow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static DiskHashPageData* default_instance_;
};
// -------------------------------------------------------------------

class DiskHashTransactionPageData : public ::google::protobuf::Message {
 public:
  DiskHashTransactionPageData();
  virtual ~DiskHashTransactionPageData();

  DiskHashTransactionPageData(const DiskHashTransactionPageData& from);

  inline DiskHashTransactionPageData& operator=(const DiskHashTransactionPageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskHashTransactionPageData& default_instance();

  void Swap(DiskHashTransactionPageData* other);

  // implements Message ----------------------------------------------

  DiskHashTransactionPageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskHashTransactionPageData& from);
  void MergeFrom(const DiskHashTransactionPageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 bucket_id = 1;
  inline bool has_bucket_id() const;
  inline void clear_bucket_id();
  static const int kBucketIdFieldNumber = 1;
  inline ::google::protobuf::uint64 bucket_id() const;
  inline void set_bucket_id(::google::protobuf::uint64 value);

  // optional fixed32 original_crc = 2;
  inline bool has_original_crc() const;
  inline void clear_original_crc();
  static const int kOriginalCrcFieldNumber = 2;
  inline ::google::protobuf::uint32 original_crc() const;
  inline void set_original_crc(::google::protobuf::uint32 value);

  // optional fixed32 transaction_crc = 3;
  inline bool has_transaction_crc() const;
  inline void clear_transaction_crc();
  static const int kTransactionCrcFieldNumber = 3;
  inline ::google::protobuf::uint32 transaction_crc() const;
  inline void set_transaction_crc(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint64 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::uint64 item_count() const;
  inline void set_item_count(::google::protobuf::uint64 value);

  // optional uint64 version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline ::google::protobuf::uint64 version() const;
  inline void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:DiskHashTransactionPageData)
 private:
  inline void set_has_bucket_id();
  inline void clear_has_bucket_id();
  inline void set_has_original_crc();
  inline void clear_has_original_crc();
  inline void set_has_transaction_crc();
  inline void clear_has_transaction_crc();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 bucket_id_;
  ::google::protobuf::uint32 original_crc_;
  ::google::protobuf::uint32 transaction_crc_;
  ::std::string* data_;
  ::google::protobuf::uint64 item_count_;
  ::google::protobuf::uint64 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static DiskHashTransactionPageData* default_instance_;
};
// -------------------------------------------------------------------

class FixedIndexMetaData : public ::google::protobuf::Message {
 public:
  FixedIndexMetaData();
  virtual ~FixedIndexMetaData();

  FixedIndexMetaData(const FixedIndexMetaData& from);

  inline FixedIndexMetaData& operator=(const FixedIndexMetaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedIndexMetaData& default_instance();

  void Swap(FixedIndexMetaData* other);

  // implements Message ----------------------------------------------

  FixedIndexMetaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedIndexMetaData& from);
  void MergeFrom(const FixedIndexMetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint64 width() const;
  inline void set_width(::google::protobuf::uint64 value);

  // optional uint64 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional uint64 file_count = 3;
  inline bool has_file_count() const;
  inline void clear_file_count();
  static const int kFileCountFieldNumber = 3;
  inline ::google::protobuf::uint64 file_count() const;
  inline void set_file_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:FixedIndexMetaData)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_file_count();
  inline void clear_has_file_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 width_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 file_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static FixedIndexMetaData* default_instance_;
};
// -------------------------------------------------------------------

class FixedIndexBucketData : public ::google::protobuf::Message {
 public:
  FixedIndexBucketData();
  virtual ~FixedIndexBucketData();

  FixedIndexBucketData(const FixedIndexBucketData& from);

  inline FixedIndexBucketData& operator=(const FixedIndexBucketData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedIndexBucketData& default_instance();

  void Swap(FixedIndexBucketData* other);

  // implements Message ----------------------------------------------

  FixedIndexBucketData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedIndexBucketData& from);
  void MergeFrom(const FixedIndexBucketData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .FixedIndexBucketStateData state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::FixedIndexBucketStateData state() const;
  inline void set_state(::FixedIndexBucketStateData value);

  // optional fixed32 crc = 4;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 4;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FixedIndexBucketData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_crc();
  inline void clear_has_crc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 key_;
  ::std::string* data_;
  int state_;
  ::google::protobuf::uint32 crc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static FixedIndexBucketData* default_instance_;
};
// -------------------------------------------------------------------

class IntData : public ::google::protobuf::Message {
 public:
  IntData();
  virtual ~IntData();

  IntData(const IntData& from);

  inline IntData& operator=(const IntData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntData& default_instance();

  void Swap(IntData* other);

  // implements Message ----------------------------------------------

  IntData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntData& from);
  void MergeFrom(const IntData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 i = 1;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 1;
  inline ::google::protobuf::uint64 i() const;
  inline void set_i(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:IntData)
 private:
  inline void set_has_i();
  inline void clear_has_i();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 i_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static IntData* default_instance_;
};
// -------------------------------------------------------------------

class BitmapData : public ::google::protobuf::Message {
 public:
  BitmapData();
  virtual ~BitmapData();

  BitmapData(const BitmapData& from);

  inline BitmapData& operator=(const BitmapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitmapData& default_instance();

  void Swap(BitmapData* other);

  // implements Message ----------------------------------------------

  BitmapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitmapData& from);
  void MergeFrom(const BitmapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional uint64 clean_bits = 2;
  inline bool has_clean_bits() const;
  inline void clear_clean_bits();
  static const int kCleanBitsFieldNumber = 2;
  inline ::google::protobuf::uint64 clean_bits() const;
  inline void set_clean_bits(::google::protobuf::uint64 value);

  // optional uint64 page_size = 3;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 page_size() const;
  inline void set_page_size(::google::protobuf::uint64 value);

  // optional uint32 crc = 4;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 4;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BitmapData)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_clean_bits();
  inline void clear_has_clean_bits();
  inline void set_has_page_size();
  inline void clear_has_page_size();
  inline void set_has_crc();
  inline void clear_has_crc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 clean_bits_;
  ::google::protobuf::uint64 page_size_;
  ::google::protobuf::uint32 crc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static BitmapData* default_instance_;
};
// -------------------------------------------------------------------

class BitmapPageData : public ::google::protobuf::Message {
 public:
  BitmapPageData();
  virtual ~BitmapPageData();

  BitmapPageData(const BitmapPageData& from);

  inline BitmapPageData& operator=(const BitmapPageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitmapPageData& default_instance();

  void Swap(BitmapPageData* other);

  // implements Message ----------------------------------------------

  BitmapPageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitmapPageData& from);
  void MergeFrom(const BitmapPageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 crc = 2;
  inline bool has_crc() const;
  inline void clear_crc();
  static const int kCrcFieldNumber = 2;
  inline ::google::protobuf::uint32 crc() const;
  inline void set_crc(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BitmapPageData)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_crc();
  inline void clear_has_crc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::uint32 crc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static BitmapPageData* default_instance_;
};
// -------------------------------------------------------------------

class RawByteData : public ::google::protobuf::Message {
 public:
  RawByteData();
  virtual ~RawByteData();

  RawByteData(const RawByteData& from);

  inline RawByteData& operator=(const RawByteData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawByteData& default_instance();

  void Swap(RawByteData* other);

  // implements Message ----------------------------------------------

  RawByteData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawByteData& from);
  void MergeFrom(const RawByteData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string raw_value = 1;
  inline bool has_raw_value() const;
  inline void clear_raw_value();
  static const int kRawValueFieldNumber = 1;
  inline const ::std::string& raw_value() const;
  inline void set_raw_value(const ::std::string& value);
  inline void set_raw_value(const char* value);
  inline void set_raw_value(const char* value, size_t size);
  inline ::std::string* mutable_raw_value();
  inline ::std::string* release_raw_value();
  inline void set_allocated_raw_value(::std::string* raw_value);

  // @@protoc_insertion_point(class_scope:RawByteData)
 private:
  inline void set_has_raw_value();
  inline void clear_has_raw_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* raw_value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_AssignDesc_dedupv1_5fbase_2eproto();
  friend void protobuf_ShutdownFile_dedupv1_5fbase_2eproto();

  void InitAsDefaultInstance();
  static RawByteData* default_instance_;
};
// ===================================================================


// ===================================================================

// DiskHashIndexLogfileData

// optional uint32 page_size = 1;
inline bool DiskHashIndexLogfileData::has_page_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskHashIndexLogfileData::set_has_page_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskHashIndexLogfileData::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskHashIndexLogfileData::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
inline ::google::protobuf::uint32 DiskHashIndexLogfileData::page_size() const {
  return page_size_;
}
inline void DiskHashIndexLogfileData::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
}

// optional uint64 size = 2;
inline bool DiskHashIndexLogfileData::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskHashIndexLogfileData::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiskHashIndexLogfileData::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiskHashIndexLogfileData::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DiskHashIndexLogfileData::size() const {
  return size_;
}
inline void DiskHashIndexLogfileData::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// repeated string filename = 3;
inline int DiskHashIndexLogfileData::filename_size() const {
  return filename_.size();
}
inline void DiskHashIndexLogfileData::clear_filename() {
  filename_.Clear();
}
inline const ::std::string& DiskHashIndexLogfileData::filename(int index) const {
  return filename_.Get(index);
}
inline ::std::string* DiskHashIndexLogfileData::mutable_filename(int index) {
  return filename_.Mutable(index);
}
inline void DiskHashIndexLogfileData::set_filename(int index, const ::std::string& value) {
  filename_.Mutable(index)->assign(value);
}
inline void DiskHashIndexLogfileData::set_filename(int index, const char* value) {
  filename_.Mutable(index)->assign(value);
}
inline void DiskHashIndexLogfileData::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DiskHashIndexLogfileData::add_filename() {
  return filename_.Add();
}
inline void DiskHashIndexLogfileData::add_filename(const ::std::string& value) {
  filename_.Add()->assign(value);
}
inline void DiskHashIndexLogfileData::add_filename(const char* value) {
  filename_.Add()->assign(value);
}
inline void DiskHashIndexLogfileData::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DiskHashIndexLogfileData::filename() const {
  return filename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DiskHashIndexLogfileData::mutable_filename() {
  return &filename_;
}

// optional bool overflow_area = 4;
inline bool DiskHashIndexLogfileData::has_overflow_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiskHashIndexLogfileData::set_has_overflow_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DiskHashIndexLogfileData::clear_has_overflow_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DiskHashIndexLogfileData::clear_overflow_area() {
  overflow_area_ = false;
  clear_has_overflow_area();
}
inline bool DiskHashIndexLogfileData::overflow_area() const {
  return overflow_area_;
}
inline void DiskHashIndexLogfileData::set_overflow_area(bool value) {
  set_has_overflow_area();
  overflow_area_ = value;
}

// -------------------------------------------------------------------

// DiskHashPageData

// optional fixed32 crc = 1;
inline bool DiskHashPageData::has_crc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskHashPageData::set_has_crc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskHashPageData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskHashPageData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 DiskHashPageData::crc() const {
  return crc_;
}
inline void DiskHashPageData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// optional uint32 entry_count = 2;
inline bool DiskHashPageData::has_entry_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskHashPageData::set_has_entry_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiskHashPageData::clear_has_entry_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiskHashPageData::clear_entry_count() {
  entry_count_ = 0u;
  clear_has_entry_count();
}
inline ::google::protobuf::uint32 DiskHashPageData::entry_count() const {
  return entry_count_;
}
inline void DiskHashPageData::set_entry_count(::google::protobuf::uint32 value) {
  set_has_entry_count();
  entry_count_ = value;
}

// optional bool overflow = 3 [default = false];
inline bool DiskHashPageData::has_overflow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskHashPageData::set_has_overflow() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiskHashPageData::clear_has_overflow() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiskHashPageData::clear_overflow() {
  overflow_ = false;
  clear_has_overflow();
}
inline bool DiskHashPageData::overflow() const {
  return overflow_;
}
inline void DiskHashPageData::set_overflow(bool value) {
  set_has_overflow();
  overflow_ = value;
}

// -------------------------------------------------------------------

// DiskHashTransactionPageData

// optional uint64 bucket_id = 1;
inline bool DiskHashTransactionPageData::has_bucket_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskHashTransactionPageData::set_has_bucket_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskHashTransactionPageData::clear_has_bucket_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskHashTransactionPageData::clear_bucket_id() {
  bucket_id_ = GOOGLE_ULONGLONG(0);
  clear_has_bucket_id();
}
inline ::google::protobuf::uint64 DiskHashTransactionPageData::bucket_id() const {
  return bucket_id_;
}
inline void DiskHashTransactionPageData::set_bucket_id(::google::protobuf::uint64 value) {
  set_has_bucket_id();
  bucket_id_ = value;
}

// optional fixed32 original_crc = 2;
inline bool DiskHashTransactionPageData::has_original_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskHashTransactionPageData::set_has_original_crc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiskHashTransactionPageData::clear_has_original_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiskHashTransactionPageData::clear_original_crc() {
  original_crc_ = 0u;
  clear_has_original_crc();
}
inline ::google::protobuf::uint32 DiskHashTransactionPageData::original_crc() const {
  return original_crc_;
}
inline void DiskHashTransactionPageData::set_original_crc(::google::protobuf::uint32 value) {
  set_has_original_crc();
  original_crc_ = value;
}

// optional fixed32 transaction_crc = 3;
inline bool DiskHashTransactionPageData::has_transaction_crc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskHashTransactionPageData::set_has_transaction_crc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiskHashTransactionPageData::clear_has_transaction_crc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiskHashTransactionPageData::clear_transaction_crc() {
  transaction_crc_ = 0u;
  clear_has_transaction_crc();
}
inline ::google::protobuf::uint32 DiskHashTransactionPageData::transaction_crc() const {
  return transaction_crc_;
}
inline void DiskHashTransactionPageData::set_transaction_crc(::google::protobuf::uint32 value) {
  set_has_transaction_crc();
  transaction_crc_ = value;
}

// optional bytes data = 4;
inline bool DiskHashTransactionPageData::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DiskHashTransactionPageData::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DiskHashTransactionPageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DiskHashTransactionPageData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& DiskHashTransactionPageData::data() const {
  return *data_;
}
inline void DiskHashTransactionPageData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DiskHashTransactionPageData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DiskHashTransactionPageData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DiskHashTransactionPageData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* DiskHashTransactionPageData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DiskHashTransactionPageData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 item_count = 5;
inline bool DiskHashTransactionPageData::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DiskHashTransactionPageData::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DiskHashTransactionPageData::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DiskHashTransactionPageData::clear_item_count() {
  item_count_ = GOOGLE_ULONGLONG(0);
  clear_has_item_count();
}
inline ::google::protobuf::uint64 DiskHashTransactionPageData::item_count() const {
  return item_count_;
}
inline void DiskHashTransactionPageData::set_item_count(::google::protobuf::uint64 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint64 version = 6;
inline bool DiskHashTransactionPageData::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DiskHashTransactionPageData::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DiskHashTransactionPageData::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DiskHashTransactionPageData::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 DiskHashTransactionPageData::version() const {
  return version_;
}
inline void DiskHashTransactionPageData::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// FixedIndexMetaData

// optional uint64 width = 1;
inline bool FixedIndexMetaData::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedIndexMetaData::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedIndexMetaData::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedIndexMetaData::clear_width() {
  width_ = GOOGLE_ULONGLONG(0);
  clear_has_width();
}
inline ::google::protobuf::uint64 FixedIndexMetaData::width() const {
  return width_;
}
inline void FixedIndexMetaData::set_width(::google::protobuf::uint64 value) {
  set_has_width();
  width_ = value;
}

// optional uint64 size = 2;
inline bool FixedIndexMetaData::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedIndexMetaData::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedIndexMetaData::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedIndexMetaData::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 FixedIndexMetaData::size() const {
  return size_;
}
inline void FixedIndexMetaData::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional uint64 file_count = 3;
inline bool FixedIndexMetaData::has_file_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedIndexMetaData::set_has_file_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedIndexMetaData::clear_has_file_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedIndexMetaData::clear_file_count() {
  file_count_ = GOOGLE_ULONGLONG(0);
  clear_has_file_count();
}
inline ::google::protobuf::uint64 FixedIndexMetaData::file_count() const {
  return file_count_;
}
inline void FixedIndexMetaData::set_file_count(::google::protobuf::uint64 value) {
  set_has_file_count();
  file_count_ = value;
}

// -------------------------------------------------------------------

// FixedIndexBucketData

// optional int64 key = 1;
inline bool FixedIndexBucketData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixedIndexBucketData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixedIndexBucketData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixedIndexBucketData::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 FixedIndexBucketData::key() const {
  return key_;
}
inline void FixedIndexBucketData::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// optional bytes data = 2;
inline bool FixedIndexBucketData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixedIndexBucketData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixedIndexBucketData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixedIndexBucketData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& FixedIndexBucketData::data() const {
  return *data_;
}
inline void FixedIndexBucketData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FixedIndexBucketData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void FixedIndexBucketData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FixedIndexBucketData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* FixedIndexBucketData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FixedIndexBucketData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .FixedIndexBucketStateData state = 3;
inline bool FixedIndexBucketData::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixedIndexBucketData::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixedIndexBucketData::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixedIndexBucketData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::FixedIndexBucketStateData FixedIndexBucketData::state() const {
  return static_cast< ::FixedIndexBucketStateData >(state_);
}
inline void FixedIndexBucketData::set_state(::FixedIndexBucketStateData value) {
  assert(::FixedIndexBucketStateData_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional fixed32 crc = 4;
inline bool FixedIndexBucketData::has_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FixedIndexBucketData::set_has_crc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FixedIndexBucketData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FixedIndexBucketData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 FixedIndexBucketData::crc() const {
  return crc_;
}
inline void FixedIndexBucketData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// -------------------------------------------------------------------

// IntData

// optional uint64 i = 1;
inline bool IntData::has_i() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntData::set_has_i() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntData::clear_has_i() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntData::clear_i() {
  i_ = GOOGLE_ULONGLONG(0);
  clear_has_i();
}
inline ::google::protobuf::uint64 IntData::i() const {
  return i_;
}
inline void IntData::set_i(::google::protobuf::uint64 value) {
  set_has_i();
  i_ = value;
}

// -------------------------------------------------------------------

// BitmapData

// optional uint64 size = 1;
inline bool BitmapData::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitmapData::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitmapData::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitmapData::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 BitmapData::size() const {
  return size_;
}
inline void BitmapData::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional uint64 clean_bits = 2;
inline bool BitmapData::has_clean_bits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitmapData::set_has_clean_bits() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitmapData::clear_has_clean_bits() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitmapData::clear_clean_bits() {
  clean_bits_ = GOOGLE_ULONGLONG(0);
  clear_has_clean_bits();
}
inline ::google::protobuf::uint64 BitmapData::clean_bits() const {
  return clean_bits_;
}
inline void BitmapData::set_clean_bits(::google::protobuf::uint64 value) {
  set_has_clean_bits();
  clean_bits_ = value;
}

// optional uint64 page_size = 3;
inline bool BitmapData::has_page_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitmapData::set_has_page_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitmapData::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitmapData::clear_page_size() {
  page_size_ = GOOGLE_ULONGLONG(0);
  clear_has_page_size();
}
inline ::google::protobuf::uint64 BitmapData::page_size() const {
  return page_size_;
}
inline void BitmapData::set_page_size(::google::protobuf::uint64 value) {
  set_has_page_size();
  page_size_ = value;
}

// optional uint32 crc = 4;
inline bool BitmapData::has_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitmapData::set_has_crc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitmapData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitmapData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 BitmapData::crc() const {
  return crc_;
}
inline void BitmapData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// -------------------------------------------------------------------

// BitmapPageData

// optional bytes data = 1;
inline bool BitmapPageData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitmapPageData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitmapPageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitmapPageData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BitmapPageData::data() const {
  return *data_;
}
inline void BitmapPageData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BitmapPageData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void BitmapPageData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitmapPageData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* BitmapPageData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BitmapPageData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 crc = 2;
inline bool BitmapPageData::has_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitmapPageData::set_has_crc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitmapPageData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitmapPageData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
inline ::google::protobuf::uint32 BitmapPageData::crc() const {
  return crc_;
}
inline void BitmapPageData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
}

// -------------------------------------------------------------------

// RawByteData

// optional string raw_value = 1;
inline bool RawByteData::has_raw_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawByteData::set_has_raw_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawByteData::clear_has_raw_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawByteData::clear_raw_value() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    raw_value_->clear();
  }
  clear_has_raw_value();
}
inline const ::std::string& RawByteData::raw_value() const {
  return *raw_value_;
}
inline void RawByteData::set_raw_value(const ::std::string& value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void RawByteData::set_raw_value(const char* value) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(value);
}
inline void RawByteData::set_raw_value(const char* value, size_t size) {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  raw_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawByteData::mutable_raw_value() {
  set_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    raw_value_ = new ::std::string;
  }
  return raw_value_;
}
inline ::std::string* RawByteData::release_raw_value() {
  clear_has_raw_value();
  if (raw_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_value_;
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RawByteData::set_allocated_raw_value(::std::string* raw_value) {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (raw_value) {
    set_has_raw_value();
    raw_value_ = raw_value;
  } else {
    clear_has_raw_value();
    raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FixedIndexBucketStateData>() {
  return ::FixedIndexBucketStateData_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dedupv1_5fbase_2eproto__INCLUDED
