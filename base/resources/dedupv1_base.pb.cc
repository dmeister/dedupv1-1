// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedupv1_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dedupv1_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DiskHashIndexLogfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskHashIndexLogfileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskHashPageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskHashPageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskHashTransactionPageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskHashTransactionPageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedIndexMetaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedIndexMetaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedIndexBucketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedIndexBucketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitmapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitmapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitmapPageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitmapPageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawByteData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawByteData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FixedIndexBucketStateData_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dedupv1_5fbase_2eproto() {
  protobuf_AddDesc_dedupv1_5fbase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dedupv1_base.proto");
  GOOGLE_CHECK(file != NULL);
  DiskHashIndexLogfileData_descriptor_ = file->message_type(0);
  static const int DiskHashIndexLogfileData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, overflow_area_),
  };
  DiskHashIndexLogfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskHashIndexLogfileData_descriptor_,
      DiskHashIndexLogfileData::default_instance_,
      DiskHashIndexLogfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashIndexLogfileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskHashIndexLogfileData));
  DiskHashPageData_descriptor_ = file->message_type(1);
  static const int DiskHashPageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashPageData, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashPageData, entry_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashPageData, overflow_),
  };
  DiskHashPageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskHashPageData_descriptor_,
      DiskHashPageData::default_instance_,
      DiskHashPageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashPageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashPageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskHashPageData));
  DiskHashTransactionPageData_descriptor_ = file->message_type(2);
  static const int DiskHashTransactionPageData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, bucket_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, original_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, transaction_crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, version_),
  };
  DiskHashTransactionPageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskHashTransactionPageData_descriptor_,
      DiskHashTransactionPageData::default_instance_,
      DiskHashTransactionPageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskHashTransactionPageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskHashTransactionPageData));
  FixedIndexMetaData_descriptor_ = file->message_type(3);
  static const int FixedIndexMetaData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexMetaData, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexMetaData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexMetaData, file_count_),
  };
  FixedIndexMetaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedIndexMetaData_descriptor_,
      FixedIndexMetaData::default_instance_,
      FixedIndexMetaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexMetaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexMetaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedIndexMetaData));
  FixedIndexBucketData_descriptor_ = file->message_type(4);
  static const int FixedIndexBucketData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, crc_),
  };
  FixedIndexBucketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedIndexBucketData_descriptor_,
      FixedIndexBucketData::default_instance_,
      FixedIndexBucketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedIndexBucketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedIndexBucketData));
  IntData_descriptor_ = file->message_type(5);
  static const int IntData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntData, i_),
  };
  IntData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntData_descriptor_,
      IntData::default_instance_,
      IntData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntData));
  BitmapData_descriptor_ = file->message_type(6);
  static const int BitmapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, clean_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, page_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, crc_),
  };
  BitmapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitmapData_descriptor_,
      BitmapData::default_instance_,
      BitmapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitmapData));
  BitmapPageData_descriptor_ = file->message_type(7);
  static const int BitmapPageData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapPageData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapPageData, crc_),
  };
  BitmapPageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitmapPageData_descriptor_,
      BitmapPageData::default_instance_,
      BitmapPageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapPageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapPageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitmapPageData));
  RawByteData_descriptor_ = file->message_type(8);
  static const int RawByteData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawByteData, raw_value_),
  };
  RawByteData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawByteData_descriptor_,
      RawByteData::default_instance_,
      RawByteData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawByteData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawByteData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawByteData));
  FixedIndexBucketStateData_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dedupv1_5fbase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskHashIndexLogfileData_descriptor_, &DiskHashIndexLogfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskHashPageData_descriptor_, &DiskHashPageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskHashTransactionPageData_descriptor_, &DiskHashTransactionPageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedIndexMetaData_descriptor_, &FixedIndexMetaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedIndexBucketData_descriptor_, &FixedIndexBucketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntData_descriptor_, &IntData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitmapData_descriptor_, &BitmapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitmapPageData_descriptor_, &BitmapPageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawByteData_descriptor_, &RawByteData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dedupv1_5fbase_2eproto() {
  delete DiskHashIndexLogfileData::default_instance_;
  delete DiskHashIndexLogfileData_reflection_;
  delete DiskHashPageData::default_instance_;
  delete DiskHashPageData_reflection_;
  delete DiskHashTransactionPageData::default_instance_;
  delete DiskHashTransactionPageData_reflection_;
  delete FixedIndexMetaData::default_instance_;
  delete FixedIndexMetaData_reflection_;
  delete FixedIndexBucketData::default_instance_;
  delete FixedIndexBucketData_reflection_;
  delete IntData::default_instance_;
  delete IntData_reflection_;
  delete BitmapData::default_instance_;
  delete BitmapData_reflection_;
  delete BitmapPageData::default_instance_;
  delete BitmapPageData_reflection_;
  delete RawByteData::default_instance_;
  delete RawByteData_reflection_;
}

void protobuf_AddDesc_dedupv1_5fbase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022dedupv1_base.proto\"d\n\030DiskHashIndexLog"
    "fileData\022\021\n\tpage_size\030\001 \001(\r\022\014\n\004size\030\002 \001("
    "\004\022\020\n\010filename\030\003 \003(\t\022\025\n\roverflow_area\030\004 \001"
    "(\010\"M\n\020DiskHashPageData\022\013\n\003crc\030\001 \001(\007\022\023\n\013e"
    "ntry_count\030\002 \001(\r\022\027\n\010overflow\030\003 \001(\010:\005fals"
    "e\"\222\001\n\033DiskHashTransactionPageData\022\021\n\tbuc"
    "ket_id\030\001 \001(\004\022\024\n\014original_crc\030\002 \001(\007\022\027\n\017tr"
    "ansaction_crc\030\003 \001(\007\022\014\n\004data\030\004 \001(\014\022\022\n\nite"
    "m_count\030\005 \001(\004\022\017\n\007version\030\006 \001(\004\"E\n\022FixedI"
    "ndexMetaData\022\r\n\005width\030\001 \001(\004\022\014\n\004size\030\002 \001("
    "\004\022\022\n\nfile_count\030\003 \001(\004\"i\n\024FixedIndexBucke"
    "tData\022\013\n\003key\030\001 \001(\003\022\014\n\004data\030\002 \001(\014\022)\n\005stat"
    "e\030\003 \001(\0162\032.FixedIndexBucketStateData\022\013\n\003c"
    "rc\030\004 \001(\007\"\024\n\007IntData\022\t\n\001i\030\001 \001(\004\"N\n\nBitmap"
    "Data\022\014\n\004size\030\001 \001(\004\022\022\n\nclean_bits\030\002 \001(\004\022\021"
    "\n\tpage_size\030\003 \001(\004\022\013\n\003crc\030\004 \001(\r\"+\n\016Bitmap"
    "PageData\022\014\n\004data\030\001 \001(\014\022\013\n\003crc\030\002 \001(\r\" \n\013R"
    "awByteData\022\021\n\traw_value\030\001 \001(\t*W\n\031FixedIn"
    "dexBucketStateData\022\033\n\027FIXED_INDEX_STATE_"
    "VALID\020\000\022\035\n\031FIXED_INDEX_STATE_INVALID\020\001", 798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dedupv1_base.proto", &protobuf_RegisterTypes);
  DiskHashIndexLogfileData::default_instance_ = new DiskHashIndexLogfileData();
  DiskHashPageData::default_instance_ = new DiskHashPageData();
  DiskHashTransactionPageData::default_instance_ = new DiskHashTransactionPageData();
  FixedIndexMetaData::default_instance_ = new FixedIndexMetaData();
  FixedIndexBucketData::default_instance_ = new FixedIndexBucketData();
  IntData::default_instance_ = new IntData();
  BitmapData::default_instance_ = new BitmapData();
  BitmapPageData::default_instance_ = new BitmapPageData();
  RawByteData::default_instance_ = new RawByteData();
  DiskHashIndexLogfileData::default_instance_->InitAsDefaultInstance();
  DiskHashPageData::default_instance_->InitAsDefaultInstance();
  DiskHashTransactionPageData::default_instance_->InitAsDefaultInstance();
  FixedIndexMetaData::default_instance_->InitAsDefaultInstance();
  FixedIndexBucketData::default_instance_->InitAsDefaultInstance();
  IntData::default_instance_->InitAsDefaultInstance();
  BitmapData::default_instance_->InitAsDefaultInstance();
  BitmapPageData::default_instance_->InitAsDefaultInstance();
  RawByteData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dedupv1_5fbase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dedupv1_5fbase_2eproto {
  StaticDescriptorInitializer_dedupv1_5fbase_2eproto() {
    protobuf_AddDesc_dedupv1_5fbase_2eproto();
  }
} static_descriptor_initializer_dedupv1_5fbase_2eproto_;
const ::google::protobuf::EnumDescriptor* FixedIndexBucketStateData_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedIndexBucketStateData_descriptor_;
}
bool FixedIndexBucketStateData_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DiskHashIndexLogfileData::kPageSizeFieldNumber;
const int DiskHashIndexLogfileData::kSizeFieldNumber;
const int DiskHashIndexLogfileData::kFilenameFieldNumber;
const int DiskHashIndexLogfileData::kOverflowAreaFieldNumber;
#endif  // !_MSC_VER

DiskHashIndexLogfileData::DiskHashIndexLogfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskHashIndexLogfileData::InitAsDefaultInstance() {
}

DiskHashIndexLogfileData::DiskHashIndexLogfileData(const DiskHashIndexLogfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskHashIndexLogfileData::SharedCtor() {
  _cached_size_ = 0;
  page_size_ = 0u;
  size_ = GOOGLE_ULONGLONG(0);
  overflow_area_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskHashIndexLogfileData::~DiskHashIndexLogfileData() {
  SharedDtor();
}

void DiskHashIndexLogfileData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskHashIndexLogfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskHashIndexLogfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskHashIndexLogfileData_descriptor_;
}

const DiskHashIndexLogfileData& DiskHashIndexLogfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

DiskHashIndexLogfileData* DiskHashIndexLogfileData::default_instance_ = NULL;

DiskHashIndexLogfileData* DiskHashIndexLogfileData::New() const {
  return new DiskHashIndexLogfileData;
}

void DiskHashIndexLogfileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_size_ = 0u;
    size_ = GOOGLE_ULONGLONG(0);
    overflow_area_ = false;
  }
  filename_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskHashIndexLogfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 page_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }

      // repeated string filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename(this->filename_size() - 1).data(),
            this->filename(this->filename_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        if (input->ExpectTag(32)) goto parse_overflow_area;
        break;
      }

      // optional bool overflow_area = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overflow_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overflow_area_)));
          set_has_overflow_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskHashIndexLogfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 page_size = 1;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_size(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // repeated string filename = 3;
  for (int i = 0; i < this->filename_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->filename(i).data(), this->filename(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(i), output);
  }

  // optional bool overflow_area = 4;
  if (has_overflow_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->overflow_area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskHashIndexLogfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 page_size = 1;
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_size(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // repeated string filename = 3;
  for (int i = 0; i < this->filename_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename(i).data(), this->filename(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->filename(i), target);
  }

  // optional bool overflow_area = 4;
  if (has_overflow_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->overflow_area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskHashIndexLogfileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 page_size = 1;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_size());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional bool overflow_area = 4;
    if (has_overflow_area()) {
      total_size += 1 + 1;
    }

  }
  // repeated string filename = 3;
  total_size += 1 * this->filename_size();
  for (int i = 0; i < this->filename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filename(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskHashIndexLogfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskHashIndexLogfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskHashIndexLogfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskHashIndexLogfileData::MergeFrom(const DiskHashIndexLogfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  filename_.MergeFrom(from.filename_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_overflow_area()) {
      set_overflow_area(from.overflow_area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskHashIndexLogfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskHashIndexLogfileData::CopyFrom(const DiskHashIndexLogfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskHashIndexLogfileData::IsInitialized() const {

  return true;
}

void DiskHashIndexLogfileData::Swap(DiskHashIndexLogfileData* other) {
  if (other != this) {
    std::swap(page_size_, other->page_size_);
    std::swap(size_, other->size_);
    filename_.Swap(&other->filename_);
    std::swap(overflow_area_, other->overflow_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskHashIndexLogfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskHashIndexLogfileData_descriptor_;
  metadata.reflection = DiskHashIndexLogfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskHashPageData::kCrcFieldNumber;
const int DiskHashPageData::kEntryCountFieldNumber;
const int DiskHashPageData::kOverflowFieldNumber;
#endif  // !_MSC_VER

DiskHashPageData::DiskHashPageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskHashPageData::InitAsDefaultInstance() {
}

DiskHashPageData::DiskHashPageData(const DiskHashPageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskHashPageData::SharedCtor() {
  _cached_size_ = 0;
  crc_ = 0u;
  entry_count_ = 0u;
  overflow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskHashPageData::~DiskHashPageData() {
  SharedDtor();
}

void DiskHashPageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskHashPageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskHashPageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskHashPageData_descriptor_;
}

const DiskHashPageData& DiskHashPageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

DiskHashPageData* DiskHashPageData::default_instance_ = NULL;

DiskHashPageData* DiskHashPageData::New() const {
  return new DiskHashPageData;
}

void DiskHashPageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crc_ = 0u;
    entry_count_ = 0u;
    overflow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskHashPageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 crc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entry_count;
        break;
      }

      // optional uint32 entry_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_count_)));
          set_has_entry_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_overflow;
        break;
      }

      // optional bool overflow = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overflow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overflow_)));
          set_has_overflow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskHashPageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 crc = 1;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->crc(), output);
  }

  // optional uint32 entry_count = 2;
  if (has_entry_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entry_count(), output);
  }

  // optional bool overflow = 3 [default = false];
  if (has_overflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overflow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskHashPageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 crc = 1;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->crc(), target);
  }

  // optional uint32 entry_count = 2;
  if (has_entry_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entry_count(), target);
  }

  // optional bool overflow = 3 [default = false];
  if (has_overflow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->overflow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskHashPageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 crc = 1;
    if (has_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 entry_count = 2;
    if (has_entry_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_count());
    }

    // optional bool overflow = 3 [default = false];
    if (has_overflow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskHashPageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskHashPageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskHashPageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskHashPageData::MergeFrom(const DiskHashPageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_entry_count()) {
      set_entry_count(from.entry_count());
    }
    if (from.has_overflow()) {
      set_overflow(from.overflow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskHashPageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskHashPageData::CopyFrom(const DiskHashPageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskHashPageData::IsInitialized() const {

  return true;
}

void DiskHashPageData::Swap(DiskHashPageData* other) {
  if (other != this) {
    std::swap(crc_, other->crc_);
    std::swap(entry_count_, other->entry_count_);
    std::swap(overflow_, other->overflow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskHashPageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskHashPageData_descriptor_;
  metadata.reflection = DiskHashPageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskHashTransactionPageData::kBucketIdFieldNumber;
const int DiskHashTransactionPageData::kOriginalCrcFieldNumber;
const int DiskHashTransactionPageData::kTransactionCrcFieldNumber;
const int DiskHashTransactionPageData::kDataFieldNumber;
const int DiskHashTransactionPageData::kItemCountFieldNumber;
const int DiskHashTransactionPageData::kVersionFieldNumber;
#endif  // !_MSC_VER

DiskHashTransactionPageData::DiskHashTransactionPageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskHashTransactionPageData::InitAsDefaultInstance() {
}

DiskHashTransactionPageData::DiskHashTransactionPageData(const DiskHashTransactionPageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskHashTransactionPageData::SharedCtor() {
  _cached_size_ = 0;
  bucket_id_ = GOOGLE_ULONGLONG(0);
  original_crc_ = 0u;
  transaction_crc_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskHashTransactionPageData::~DiskHashTransactionPageData() {
  SharedDtor();
}

void DiskHashTransactionPageData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DiskHashTransactionPageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskHashTransactionPageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskHashTransactionPageData_descriptor_;
}

const DiskHashTransactionPageData& DiskHashTransactionPageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

DiskHashTransactionPageData* DiskHashTransactionPageData::default_instance_ = NULL;

DiskHashTransactionPageData* DiskHashTransactionPageData::New() const {
  return new DiskHashTransactionPageData;
}

void DiskHashTransactionPageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bucket_id_ = GOOGLE_ULONGLONG(0);
    original_crc_ = 0u;
    transaction_crc_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    item_count_ = GOOGLE_ULONGLONG(0);
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskHashTransactionPageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 bucket_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bucket_id_)));
          set_has_bucket_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_original_crc;
        break;
      }

      // optional fixed32 original_crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_original_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &original_crc_)));
          set_has_original_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_transaction_crc;
        break;
      }

      // optional fixed32 transaction_crc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transaction_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &transaction_crc_)));
          set_has_transaction_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional uint64 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional uint64 version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskHashTransactionPageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 bucket_id = 1;
  if (has_bucket_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bucket_id(), output);
  }

  // optional fixed32 original_crc = 2;
  if (has_original_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->original_crc(), output);
  }

  // optional fixed32 transaction_crc = 3;
  if (has_transaction_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->transaction_crc(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional uint64 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->item_count(), output);
  }

  // optional uint64 version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskHashTransactionPageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 bucket_id = 1;
  if (has_bucket_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bucket_id(), target);
  }

  // optional fixed32 original_crc = 2;
  if (has_original_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->original_crc(), target);
  }

  // optional fixed32 transaction_crc = 3;
  if (has_transaction_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->transaction_crc(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->item_count(), target);
  }

  // optional uint64 version = 6;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskHashTransactionPageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 bucket_id = 1;
    if (has_bucket_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bucket_id());
    }

    // optional fixed32 original_crc = 2;
    if (has_original_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 transaction_crc = 3;
    if (has_transaction_crc()) {
      total_size += 1 + 4;
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_count());
    }

    // optional uint64 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskHashTransactionPageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskHashTransactionPageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskHashTransactionPageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskHashTransactionPageData::MergeFrom(const DiskHashTransactionPageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket_id()) {
      set_bucket_id(from.bucket_id());
    }
    if (from.has_original_crc()) {
      set_original_crc(from.original_crc());
    }
    if (from.has_transaction_crc()) {
      set_transaction_crc(from.transaction_crc());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskHashTransactionPageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskHashTransactionPageData::CopyFrom(const DiskHashTransactionPageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskHashTransactionPageData::IsInitialized() const {

  return true;
}

void DiskHashTransactionPageData::Swap(DiskHashTransactionPageData* other) {
  if (other != this) {
    std::swap(bucket_id_, other->bucket_id_);
    std::swap(original_crc_, other->original_crc_);
    std::swap(transaction_crc_, other->transaction_crc_);
    std::swap(data_, other->data_);
    std::swap(item_count_, other->item_count_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskHashTransactionPageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskHashTransactionPageData_descriptor_;
  metadata.reflection = DiskHashTransactionPageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedIndexMetaData::kWidthFieldNumber;
const int FixedIndexMetaData::kSizeFieldNumber;
const int FixedIndexMetaData::kFileCountFieldNumber;
#endif  // !_MSC_VER

FixedIndexMetaData::FixedIndexMetaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixedIndexMetaData::InitAsDefaultInstance() {
}

FixedIndexMetaData::FixedIndexMetaData(const FixedIndexMetaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixedIndexMetaData::SharedCtor() {
  _cached_size_ = 0;
  width_ = GOOGLE_ULONGLONG(0);
  size_ = GOOGLE_ULONGLONG(0);
  file_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedIndexMetaData::~FixedIndexMetaData() {
  SharedDtor();
}

void FixedIndexMetaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FixedIndexMetaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedIndexMetaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedIndexMetaData_descriptor_;
}

const FixedIndexMetaData& FixedIndexMetaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

FixedIndexMetaData* FixedIndexMetaData::default_instance_ = NULL;

FixedIndexMetaData* FixedIndexMetaData::New() const {
  return new FixedIndexMetaData;
}

void FixedIndexMetaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = GOOGLE_ULONGLONG(0);
    size_ = GOOGLE_ULONGLONG(0);
    file_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedIndexMetaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_count;
        break;
      }

      // optional uint64 file_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_count_)));
          set_has_file_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixedIndexMetaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->width(), output);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint64 file_count = 3;
  if (has_file_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->file_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixedIndexMetaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->width(), target);
  }

  // optional uint64 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint64 file_count = 3;
  if (has_file_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->file_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixedIndexMetaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->width());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 file_count = 3;
    if (has_file_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedIndexMetaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedIndexMetaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedIndexMetaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedIndexMetaData::MergeFrom(const FixedIndexMetaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_file_count()) {
      set_file_count(from.file_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedIndexMetaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedIndexMetaData::CopyFrom(const FixedIndexMetaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedIndexMetaData::IsInitialized() const {

  return true;
}

void FixedIndexMetaData::Swap(FixedIndexMetaData* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(size_, other->size_);
    std::swap(file_count_, other->file_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedIndexMetaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedIndexMetaData_descriptor_;
  metadata.reflection = FixedIndexMetaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedIndexBucketData::kKeyFieldNumber;
const int FixedIndexBucketData::kDataFieldNumber;
const int FixedIndexBucketData::kStateFieldNumber;
const int FixedIndexBucketData::kCrcFieldNumber;
#endif  // !_MSC_VER

FixedIndexBucketData::FixedIndexBucketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixedIndexBucketData::InitAsDefaultInstance() {
}

FixedIndexBucketData::FixedIndexBucketData(const FixedIndexBucketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixedIndexBucketData::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedIndexBucketData::~FixedIndexBucketData() {
  SharedDtor();
}

void FixedIndexBucketData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FixedIndexBucketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedIndexBucketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedIndexBucketData_descriptor_;
}

const FixedIndexBucketData& FixedIndexBucketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

FixedIndexBucketData* FixedIndexBucketData::default_instance_ = NULL;

FixedIndexBucketData* FixedIndexBucketData::New() const {
  return new FixedIndexBucketData;
}

void FixedIndexBucketData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_LONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    state_ = 0;
    crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedIndexBucketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .FixedIndexBucketStateData state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FixedIndexBucketStateData_IsValid(value)) {
            set_state(static_cast< ::FixedIndexBucketStateData >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_crc;
        break;
      }

      // optional fixed32 crc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixedIndexBucketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->key(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // optional .FixedIndexBucketStateData state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional fixed32 crc = 4;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixedIndexBucketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->key(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional .FixedIndexBucketStateData state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional fixed32 crc = 4;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixedIndexBucketData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .FixedIndexBucketStateData state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional fixed32 crc = 4;
    if (has_crc()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedIndexBucketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedIndexBucketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedIndexBucketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedIndexBucketData::MergeFrom(const FixedIndexBucketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedIndexBucketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedIndexBucketData::CopyFrom(const FixedIndexBucketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedIndexBucketData::IsInitialized() const {

  return true;
}

void FixedIndexBucketData::Swap(FixedIndexBucketData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(state_, other->state_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedIndexBucketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedIndexBucketData_descriptor_;
  metadata.reflection = FixedIndexBucketData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntData::kIFieldNumber;
#endif  // !_MSC_VER

IntData::IntData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntData::InitAsDefaultInstance() {
}

IntData::IntData(const IntData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntData::SharedCtor() {
  _cached_size_ = 0;
  i_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntData::~IntData() {
  SharedDtor();
}

void IntData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntData_descriptor_;
}

const IntData& IntData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

IntData* IntData::default_instance_ = NULL;

IntData* IntData::New() const {
  return new IntData;
}

void IntData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    i_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 i = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 i = 1;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->i(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 i = 1;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->i(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 i = 1;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->i());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntData::MergeFrom(const IntData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i()) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntData::CopyFrom(const IntData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntData::IsInitialized() const {

  return true;
}

void IntData::Swap(IntData* other) {
  if (other != this) {
    std::swap(i_, other->i_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntData_descriptor_;
  metadata.reflection = IntData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitmapData::kSizeFieldNumber;
const int BitmapData::kCleanBitsFieldNumber;
const int BitmapData::kPageSizeFieldNumber;
const int BitmapData::kCrcFieldNumber;
#endif  // !_MSC_VER

BitmapData::BitmapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitmapData::InitAsDefaultInstance() {
}

BitmapData::BitmapData(const BitmapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitmapData::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  clean_bits_ = GOOGLE_ULONGLONG(0);
  page_size_ = GOOGLE_ULONGLONG(0);
  crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitmapData::~BitmapData() {
  SharedDtor();
}

void BitmapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitmapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitmapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitmapData_descriptor_;
}

const BitmapData& BitmapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

BitmapData* BitmapData::default_instance_ = NULL;

BitmapData* BitmapData::New() const {
  return new BitmapData;
}

void BitmapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    clean_bits_ = GOOGLE_ULONGLONG(0);
    page_size_ = GOOGLE_ULONGLONG(0);
    crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitmapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clean_bits;
        break;
      }

      // optional uint64 clean_bits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clean_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clean_bits_)));
          set_has_clean_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_page_size;
        break;
      }

      // optional uint64 page_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_size_)));
          set_has_page_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crc;
        break;
      }

      // optional uint32 crc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitmapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // optional uint64 clean_bits = 2;
  if (has_clean_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clean_bits(), output);
  }

  // optional uint64 page_size = 3;
  if (has_page_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->page_size(), output);
  }

  // optional uint32 crc = 4;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitmapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // optional uint64 clean_bits = 2;
  if (has_clean_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clean_bits(), target);
  }

  // optional uint64 page_size = 3;
  if (has_page_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->page_size(), target);
  }

  // optional uint32 crc = 4;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitmapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 clean_bits = 2;
    if (has_clean_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clean_bits());
    }

    // optional uint64 page_size = 3;
    if (has_page_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->page_size());
    }

    // optional uint32 crc = 4;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitmapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitmapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitmapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitmapData::MergeFrom(const BitmapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_clean_bits()) {
      set_clean_bits(from.clean_bits());
    }
    if (from.has_page_size()) {
      set_page_size(from.page_size());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitmapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitmapData::CopyFrom(const BitmapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitmapData::IsInitialized() const {

  return true;
}

void BitmapData::Swap(BitmapData* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(clean_bits_, other->clean_bits_);
    std::swap(page_size_, other->page_size_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitmapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitmapData_descriptor_;
  metadata.reflection = BitmapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitmapPageData::kDataFieldNumber;
const int BitmapPageData::kCrcFieldNumber;
#endif  // !_MSC_VER

BitmapPageData::BitmapPageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitmapPageData::InitAsDefaultInstance() {
}

BitmapPageData::BitmapPageData(const BitmapPageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitmapPageData::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  crc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitmapPageData::~BitmapPageData() {
  SharedDtor();
}

void BitmapPageData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BitmapPageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitmapPageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitmapPageData_descriptor_;
}

const BitmapPageData& BitmapPageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

BitmapPageData* BitmapPageData::default_instance_ = NULL;

BitmapPageData* BitmapPageData::New() const {
  return new BitmapPageData;
}

void BitmapPageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    crc_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitmapPageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_crc;
        break;
      }

      // optional uint32 crc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitmapPageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  // optional uint32 crc = 2;
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitmapPageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional uint32 crc = 2;
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitmapPageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 crc = 2;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitmapPageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitmapPageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitmapPageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitmapPageData::MergeFrom(const BitmapPageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitmapPageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitmapPageData::CopyFrom(const BitmapPageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitmapPageData::IsInitialized() const {

  return true;
}

void BitmapPageData::Swap(BitmapPageData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(crc_, other->crc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitmapPageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitmapPageData_descriptor_;
  metadata.reflection = BitmapPageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawByteData::kRawValueFieldNumber;
#endif  // !_MSC_VER

RawByteData::RawByteData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawByteData::InitAsDefaultInstance() {
}

RawByteData::RawByteData(const RawByteData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawByteData::SharedCtor() {
  _cached_size_ = 0;
  raw_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawByteData::~RawByteData() {
  SharedDtor();
}

void RawByteData::SharedDtor() {
  if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_value_;
  }
  if (this != default_instance_) {
  }
}

void RawByteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawByteData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawByteData_descriptor_;
}

const RawByteData& RawByteData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fbase_2eproto();
  return *default_instance_;
}

RawByteData* RawByteData::default_instance_ = NULL;

RawByteData* RawByteData::New() const {
  return new RawByteData;
}

void RawByteData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_raw_value()) {
      if (raw_value_ != &::google::protobuf::internal::kEmptyString) {
        raw_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawByteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string raw_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_value().data(), this->raw_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawByteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string raw_value = 1;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->raw_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawByteData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string raw_value = 1;
  if (has_raw_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_value().data(), this->raw_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->raw_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawByteData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string raw_value = 1;
    if (has_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawByteData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawByteData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawByteData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawByteData::MergeFrom(const RawByteData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_value()) {
      set_raw_value(from.raw_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawByteData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawByteData::CopyFrom(const RawByteData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawByteData::IsInitialized() const {

  return true;
}

void RawByteData::Swap(RawByteData* other) {
  if (other != this) {
    std::swap(raw_value_, other->raw_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawByteData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawByteData_descriptor_;
  metadata.reflection = RawByteData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
