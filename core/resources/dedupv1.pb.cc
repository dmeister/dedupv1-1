// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedupv1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dedupv1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BlockMappingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingPairData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingPairData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingPairItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingPairItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkMappingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkMappingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerItemValueData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerItemValueData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Limit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Limit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerFileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerFileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerSuperblockData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerSuperblockData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerLogfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerLogfileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemStartEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemStartEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayStartEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayStartEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplayStopEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplayStopEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogEntryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEntryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerOpenedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerOpenedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerCommittedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerCommittedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerMergedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerMergedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerDeletedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerDeletedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerMoveEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerMoveEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerCommitFailedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerCommitFailedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeAttachedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeAttachedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VolumeDetachedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VolumeDetachedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingWrittenEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingWrittenEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingWriteFailedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingWriteFailedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMappingDeletedEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMappingDeletedEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OphranChunksEventData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OphranChunksEventData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockIndexLogfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockIndexLogfileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkIndexLogfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkIndexLogfileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomFilterLogfileData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomFilterLogfileData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarbageCollectionCandidateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarbageCollectionCandidateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarbageCollectionCandidateItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarbageCollectionCandidateItemData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GarbageCollectionCandidateItemData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GarbageCollectionInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarbageCollectionInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerGreedyGCCandidateItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerGreedyGCCandidateItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerGreedyGCCandidateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerGreedyGCCandidateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStorageAddressData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStorageAddressData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitmapAllocatorItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitmapAllocatorItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerTrackerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerTrackerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogReplayIDData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogReplayIDData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogLogIDData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogLogIDData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockWriteFailedData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockWriteFailedData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressionMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dedupv1_2eproto() {
  protobuf_AddDesc_dedupv1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dedupv1.proto");
  GOOGLE_CHECK(file != NULL);
  BlockMappingData_descriptor_ = file->message_type(0);
  static const int BlockMappingData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, version_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, event_log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, checksum_),
  };
  BlockMappingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingData_descriptor_,
      BlockMappingData::default_instance_,
      BlockMappingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingData));
  BlockMappingPairData_descriptor_ = file->message_type(1);
  static const int BlockMappingPairData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairData, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairData, version_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairData, items_),
  };
  BlockMappingPairData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingPairData_descriptor_,
      BlockMappingPairData::default_instance_,
      BlockMappingPairData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingPairData));
  BlockMappingPairItemData_descriptor_ = file->message_type(2);
  static const int BlockMappingPairItemData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, data_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, chunk_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, usage_count_modifier_),
  };
  BlockMappingPairItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingPairItemData_descriptor_,
      BlockMappingPairItemData::default_instance_,
      BlockMappingPairItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingPairItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingPairItemData));
  BlockMappingItemData_descriptor_ = file->message_type(3);
  static const int BlockMappingItemData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, data_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, chunk_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, size_),
  };
  BlockMappingItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingItemData_descriptor_,
      BlockMappingItemData::default_instance_,
      BlockMappingItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingItemData));
  ChunkMappingData_descriptor_ = file->message_type(4);
  static const int ChunkMappingData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, data_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, usage_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, usage_count_change_log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, usage_count_failed_write_change_log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, last_block_hint_),
  };
  ChunkMappingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkMappingData_descriptor_,
      ChunkMappingData::default_instance_,
      ChunkMappingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkMappingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkMappingData));
  ContainerData_descriptor_ = file->message_type(5);
  static const int ContainerData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, primary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, container_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, commit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, checksum_),
  };
  ContainerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerData_descriptor_,
      ContainerData::default_instance_,
      ContainerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerData));
  ContainerItemData_descriptor_ = file->message_type(6);
  static const int ContainerItemData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, position_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, item_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, raw_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, indexed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, original_id_),
  };
  ContainerItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerItemData_descriptor_,
      ContainerItemData::default_instance_,
      ContainerItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerItemData));
  ContainerItemValueData_descriptor_ = file->message_type(7);
  static const int ContainerItemValueData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemValueData, on_disk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemValueData, compression_),
  };
  ContainerItemValueData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerItemValueData_descriptor_,
      ContainerItemValueData::default_instance_,
      ContainerItemValueData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemValueData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerItemValueData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerItemValueData));
  Limit_descriptor_ = file->message_type(8);
  static const int Limit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, size_),
  };
  Limit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Limit_descriptor_,
      Limit::default_instance_,
      Limit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Limit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Limit));
  ContainerFileData_descriptor_ = file->message_type(9);
  static const int ContainerFileData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerFileData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerFileData, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerFileData, uuid_),
  };
  ContainerFileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerFileData_descriptor_,
      ContainerFileData::default_instance_,
      ContainerFileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerFileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerFileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerFileData));
  ContainerSuperblockData_descriptor_ = file->message_type(10);
  static const int ContainerSuperblockData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSuperblockData, uuid_),
  };
  ContainerSuperblockData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerSuperblockData_descriptor_,
      ContainerSuperblockData::default_instance_,
      ContainerSuperblockData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSuperblockData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerSuperblockData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerSuperblockData));
  ContainerLogfileData_descriptor_ = file->message_type(11);
  static const int ContainerLogfileData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, last_given_container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, container_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, contains_superblock_),
  };
  ContainerLogfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerLogfileData_descriptor_,
      ContainerLogfileData::default_instance_,
      ContainerLogfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLogfileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerLogfileData));
  SystemStartEventData_descriptor_ = file->message_type(12);
  static const int SystemStartEventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, dirty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, forced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, crashed_),
  };
  SystemStartEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemStartEventData_descriptor_,
      SystemStartEventData::default_instance_,
      SystemStartEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStartEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemStartEventData));
  ReplayStartEventData_descriptor_ = file->message_type(13);
  static const int ReplayStartEventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, replay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, replay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, full_log_replay_),
  };
  ReplayStartEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplayStartEventData_descriptor_,
      ReplayStartEventData::default_instance_,
      ReplayStartEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStartEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayStartEventData));
  ReplayStopEventData_descriptor_ = file->message_type(14);
  static const int ReplayStopEventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, replay_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, replay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, log_id_),
  };
  ReplayStopEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplayStopEventData_descriptor_,
      ReplayStopEventData::default_instance_,
      ReplayStopEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplayStopEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplayStopEventData));
  LogEventData_descriptor_ = file->message_type(15);
  static const int LogEventData_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_opened_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_committed_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_merged_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_deleted_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_moved_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, container_commit_failed_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, volume_attached_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, volume_detached_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, block_mapping_written_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, block_mapping_write_failed_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, block_mapping_deleted_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, ophran_chunks_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, replay_start_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, replay_stop_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, system_start_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, message_data_),
  };
  LogEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEventData_descriptor_,
      LogEventData::default_instance_,
      LogEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEventData));
  LogEntryData_descriptor_ = file->message_type(16);
  static const int LogEntryData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, log_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, partial_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, partial_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, last_fully_written_log_id_),
  };
  LogEntryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEntryData_descriptor_,
      LogEntryData::default_instance_,
      LogEntryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEntryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEntryData));
  ContainerOpenedEventData_descriptor_ = file->message_type(17);
  static const int ContainerOpenedEventData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOpenedEventData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOpenedEventData, address_),
  };
  ContainerOpenedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerOpenedEventData_descriptor_,
      ContainerOpenedEventData::default_instance_,
      ContainerOpenedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOpenedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOpenedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerOpenedEventData));
  ContainerCommittedEventData_descriptor_ = file->message_type(18);
  static const int ContainerCommittedEventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, active_data_size_),
  };
  ContainerCommittedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerCommittedEventData_descriptor_,
      ContainerCommittedEventData::default_instance_,
      ContainerCommittedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommittedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerCommittedEventData));
  ContainerMergedEventData_descriptor_ = file->message_type(19);
  static const int ContainerMergedEventData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, first_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, second_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, first_secondary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, second_secondary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, first_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, second_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, new_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, new_primary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, new_secondary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, unused_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, new_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, new_active_data_size_),
  };
  ContainerMergedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerMergedEventData_descriptor_,
      ContainerMergedEventData::default_instance_,
      ContainerMergedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMergedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerMergedEventData));
  ContainerDeletedEventData_descriptor_ = file->message_type(20);
  static const int ContainerDeletedEventData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, secondary_container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, file_offset_),
  };
  ContainerDeletedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerDeletedEventData_descriptor_,
      ContainerDeletedEventData::default_instance_,
      ContainerDeletedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerDeletedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerDeletedEventData));
  ContainerMoveEventData_descriptor_ = file->message_type(21);
  static const int ContainerMoveEventData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, old_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, new_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, active_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, old_active_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, old_item_count_),
  };
  ContainerMoveEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerMoveEventData_descriptor_,
      ContainerMoveEventData::default_instance_,
      ContainerMoveEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerMoveEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerMoveEventData));
  ContainerCommitFailedEventData_descriptor_ = file->message_type(22);
  static const int ContainerCommitFailedEventData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommitFailedEventData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommitFailedEventData, item_key_),
  };
  ContainerCommitFailedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerCommitFailedEventData_descriptor_,
      ContainerCommitFailedEventData::default_instance_,
      ContainerCommitFailedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommitFailedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerCommitFailedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerCommitFailedEventData));
  VolumeAttachedEventData_descriptor_ = file->message_type(23);
  static const int VolumeAttachedEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAttachedEventData, volume_id_),
  };
  VolumeAttachedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolumeAttachedEventData_descriptor_,
      VolumeAttachedEventData::default_instance_,
      VolumeAttachedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAttachedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeAttachedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolumeAttachedEventData));
  VolumeDetachedEventData_descriptor_ = file->message_type(24);
  static const int VolumeDetachedEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeDetachedEventData, volume_id_),
  };
  VolumeDetachedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VolumeDetachedEventData_descriptor_,
      VolumeDetachedEventData::default_instance_,
      VolumeDetachedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeDetachedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeDetachedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VolumeDetachedEventData));
  BlockMappingWrittenEventData_descriptor_ = file->message_type(25);
  static const int BlockMappingWrittenEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWrittenEventData, mapping_pair_),
  };
  BlockMappingWrittenEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingWrittenEventData_descriptor_,
      BlockMappingWrittenEventData::default_instance_,
      BlockMappingWrittenEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWrittenEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWrittenEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingWrittenEventData));
  BlockMappingWriteFailedEventData_descriptor_ = file->message_type(26);
  static const int BlockMappingWriteFailedEventData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWriteFailedEventData, mapping_pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWriteFailedEventData, write_event_log_id_),
  };
  BlockMappingWriteFailedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingWriteFailedEventData_descriptor_,
      BlockMappingWriteFailedEventData::default_instance_,
      BlockMappingWriteFailedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWriteFailedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingWriteFailedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingWriteFailedEventData));
  BlockMappingDeletedEventData_descriptor_ = file->message_type(27);
  static const int BlockMappingDeletedEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingDeletedEventData, original_block_mapping_),
  };
  BlockMappingDeletedEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMappingDeletedEventData_descriptor_,
      BlockMappingDeletedEventData::default_instance_,
      BlockMappingDeletedEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingDeletedEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMappingDeletedEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMappingDeletedEventData));
  OphranChunksEventData_descriptor_ = file->message_type(28);
  static const int OphranChunksEventData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OphranChunksEventData, chunk_fp_),
  };
  OphranChunksEventData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OphranChunksEventData_descriptor_,
      OphranChunksEventData::default_instance_,
      OphranChunksEventData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OphranChunksEventData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OphranChunksEventData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OphranChunksEventData));
  BlockIndexLogfileData_descriptor_ = file->message_type(29);
  static const int BlockIndexLogfileData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexLogfileData, container_tracker_),
  };
  BlockIndexLogfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockIndexLogfileData_descriptor_,
      BlockIndexLogfileData::default_instance_,
      BlockIndexLogfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexLogfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexLogfileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockIndexLogfileData));
  ChunkIndexLogfileData_descriptor_ = file->message_type(30);
  static const int ChunkIndexLogfileData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexLogfileData, container_tracker_),
  };
  ChunkIndexLogfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkIndexLogfileData_descriptor_,
      ChunkIndexLogfileData::default_instance_,
      ChunkIndexLogfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexLogfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexLogfileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkIndexLogfileData));
  BloomFilterLogfileData_descriptor_ = file->message_type(31);
  static const int BloomFilterLogfileData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterLogfileData, filter_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterLogfileData, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterLogfileData, container_tracker_),
  };
  BloomFilterLogfileData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomFilterLogfileData_descriptor_,
      BloomFilterLogfileData::default_instance_,
      BloomFilterLogfileData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterLogfileData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterLogfileData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomFilterLogfileData));
  GarbageCollectionCandidateData_descriptor_ = file->message_type(32);
  static const int GarbageCollectionCandidateData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, processing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, unchanged_processing_count_),
  };
  GarbageCollectionCandidateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarbageCollectionCandidateData_descriptor_,
      GarbageCollectionCandidateData::default_instance_,
      GarbageCollectionCandidateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarbageCollectionCandidateData));
  GarbageCollectionCandidateItemData_descriptor_ = file->message_type(33);
  static const int GarbageCollectionCandidateItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateItemData, fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateItemData, type_),
  };
  GarbageCollectionCandidateItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarbageCollectionCandidateItemData_descriptor_,
      GarbageCollectionCandidateItemData::default_instance_,
      GarbageCollectionCandidateItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionCandidateItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarbageCollectionCandidateItemData));
  GarbageCollectionCandidateItemData_Type_descriptor_ = GarbageCollectionCandidateItemData_descriptor_->enum_type(0);
  GarbageCollectionInfoData_descriptor_ = file->message_type(34);
  static const int GarbageCollectionInfoData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionInfoData, replayed_block_failed_event_log_id_),
  };
  GarbageCollectionInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarbageCollectionInfoData_descriptor_,
      GarbageCollectionInfoData::default_instance_,
      GarbageCollectionInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectionInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarbageCollectionInfoData));
  ContainerGreedyGCCandidateItemData_descriptor_ = file->message_type(35);
  static const int ContainerGreedyGCCandidateItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateItemData, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateItemData, active_data_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateItemData, active_item_count_),
  };
  ContainerGreedyGCCandidateItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerGreedyGCCandidateItemData_descriptor_,
      ContainerGreedyGCCandidateItemData::default_instance_,
      ContainerGreedyGCCandidateItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerGreedyGCCandidateItemData));
  ContainerGreedyGCCandidateData_descriptor_ = file->message_type(36);
  static const int ContainerGreedyGCCandidateData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateData, item_),
  };
  ContainerGreedyGCCandidateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerGreedyGCCandidateData_descriptor_,
      ContainerGreedyGCCandidateData::default_instance_,
      ContainerGreedyGCCandidateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerGreedyGCCandidateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerGreedyGCCandidateData));
  ContainerStorageAddressData_descriptor_ = file->message_type(37);
  static const int ContainerStorageAddressData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, primary_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, file_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, file_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, log_id_),
  };
  ContainerStorageAddressData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStorageAddressData_descriptor_,
      ContainerStorageAddressData::default_instance_,
      ContainerStorageAddressData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageAddressData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStorageAddressData));
  BitmapAllocatorItemData_descriptor_ = file->message_type(38);
  static const int BitmapAllocatorItemData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapAllocatorItemData, free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapAllocatorItemData, bitmap_),
  };
  BitmapAllocatorItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitmapAllocatorItemData_descriptor_,
      BitmapAllocatorItemData::default_instance_,
      BitmapAllocatorItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapAllocatorItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitmapAllocatorItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitmapAllocatorItemData));
  ContainerTrackerData_descriptor_ = file->message_type(39);
  static const int ContainerTrackerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerTrackerData, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerTrackerData, highest_seen_container_id_),
  };
  ContainerTrackerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerTrackerData_descriptor_,
      ContainerTrackerData::default_instance_,
      ContainerTrackerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerTrackerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerTrackerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerTrackerData));
  LogReplayIDData_descriptor_ = file->message_type(40);
  static const int LogReplayIDData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReplayIDData, replay_id_),
  };
  LogReplayIDData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogReplayIDData_descriptor_,
      LogReplayIDData::default_instance_,
      LogReplayIDData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReplayIDData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogReplayIDData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogReplayIDData));
  LogLogIDData_descriptor_ = file->message_type(41);
  static const int LogLogIDData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLogIDData, log_id_),
  };
  LogLogIDData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogLogIDData_descriptor_,
      LogLogIDData::default_instance_,
      LogLogIDData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLogIDData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLogIDData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogLogIDData));
  LogStateData_descriptor_ = file->message_type(42);
  static const int LogStateData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStateData, limit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStateData, log_entry_width_),
  };
  LogStateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStateData_descriptor_,
      LogStateData::default_instance_,
      LogStateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStateData));
  MessageData_descriptor_ = file->message_type(43);
  static const int MessageData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, message_),
  };
  MessageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageData));
  BlockWriteFailedData_descriptor_ = file->message_type(44);
  static const int BlockWriteFailedData_offsets_[1] = {
  };
  BlockWriteFailedData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockWriteFailedData_descriptor_,
      BlockWriteFailedData::default_instance_,
      BlockWriteFailedData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockWriteFailedData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockWriteFailedData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockWriteFailedData));
  CompressionMode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dedupv1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingData_descriptor_, &BlockMappingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingPairData_descriptor_, &BlockMappingPairData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingPairItemData_descriptor_, &BlockMappingPairItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingItemData_descriptor_, &BlockMappingItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkMappingData_descriptor_, &ChunkMappingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerData_descriptor_, &ContainerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerItemData_descriptor_, &ContainerItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerItemValueData_descriptor_, &ContainerItemValueData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Limit_descriptor_, &Limit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerFileData_descriptor_, &ContainerFileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerSuperblockData_descriptor_, &ContainerSuperblockData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerLogfileData_descriptor_, &ContainerLogfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemStartEventData_descriptor_, &SystemStartEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayStartEventData_descriptor_, &ReplayStartEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplayStopEventData_descriptor_, &ReplayStopEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEventData_descriptor_, &LogEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEntryData_descriptor_, &LogEntryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerOpenedEventData_descriptor_, &ContainerOpenedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerCommittedEventData_descriptor_, &ContainerCommittedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerMergedEventData_descriptor_, &ContainerMergedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerDeletedEventData_descriptor_, &ContainerDeletedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerMoveEventData_descriptor_, &ContainerMoveEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerCommitFailedEventData_descriptor_, &ContainerCommitFailedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolumeAttachedEventData_descriptor_, &VolumeAttachedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VolumeDetachedEventData_descriptor_, &VolumeDetachedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingWrittenEventData_descriptor_, &BlockMappingWrittenEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingWriteFailedEventData_descriptor_, &BlockMappingWriteFailedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMappingDeletedEventData_descriptor_, &BlockMappingDeletedEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OphranChunksEventData_descriptor_, &OphranChunksEventData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockIndexLogfileData_descriptor_, &BlockIndexLogfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkIndexLogfileData_descriptor_, &ChunkIndexLogfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomFilterLogfileData_descriptor_, &BloomFilterLogfileData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarbageCollectionCandidateData_descriptor_, &GarbageCollectionCandidateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarbageCollectionCandidateItemData_descriptor_, &GarbageCollectionCandidateItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarbageCollectionInfoData_descriptor_, &GarbageCollectionInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerGreedyGCCandidateItemData_descriptor_, &ContainerGreedyGCCandidateItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerGreedyGCCandidateData_descriptor_, &ContainerGreedyGCCandidateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStorageAddressData_descriptor_, &ContainerStorageAddressData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitmapAllocatorItemData_descriptor_, &BitmapAllocatorItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerTrackerData_descriptor_, &ContainerTrackerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogReplayIDData_descriptor_, &LogReplayIDData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogLogIDData_descriptor_, &LogLogIDData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStateData_descriptor_, &LogStateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageData_descriptor_, &MessageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockWriteFailedData_descriptor_, &BlockWriteFailedData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dedupv1_2eproto() {
  delete BlockMappingData::default_instance_;
  delete BlockMappingData_reflection_;
  delete BlockMappingPairData::default_instance_;
  delete BlockMappingPairData_reflection_;
  delete BlockMappingPairItemData::default_instance_;
  delete BlockMappingPairItemData_reflection_;
  delete BlockMappingItemData::default_instance_;
  delete BlockMappingItemData_reflection_;
  delete ChunkMappingData::default_instance_;
  delete ChunkMappingData_reflection_;
  delete ContainerData::default_instance_;
  delete ContainerData_reflection_;
  delete ContainerItemData::default_instance_;
  delete ContainerItemData_reflection_;
  delete ContainerItemValueData::default_instance_;
  delete ContainerItemValueData_reflection_;
  delete Limit::default_instance_;
  delete Limit_reflection_;
  delete ContainerFileData::default_instance_;
  delete ContainerFileData_reflection_;
  delete ContainerSuperblockData::default_instance_;
  delete ContainerSuperblockData_reflection_;
  delete ContainerLogfileData::default_instance_;
  delete ContainerLogfileData_reflection_;
  delete SystemStartEventData::default_instance_;
  delete SystemStartEventData_reflection_;
  delete ReplayStartEventData::default_instance_;
  delete ReplayStartEventData_reflection_;
  delete ReplayStopEventData::default_instance_;
  delete ReplayStopEventData_reflection_;
  delete LogEventData::default_instance_;
  delete LogEventData_reflection_;
  delete LogEntryData::default_instance_;
  delete LogEntryData_reflection_;
  delete ContainerOpenedEventData::default_instance_;
  delete ContainerOpenedEventData_reflection_;
  delete ContainerCommittedEventData::default_instance_;
  delete ContainerCommittedEventData_reflection_;
  delete ContainerMergedEventData::default_instance_;
  delete ContainerMergedEventData_reflection_;
  delete ContainerDeletedEventData::default_instance_;
  delete ContainerDeletedEventData_reflection_;
  delete ContainerMoveEventData::default_instance_;
  delete ContainerMoveEventData_reflection_;
  delete ContainerCommitFailedEventData::default_instance_;
  delete ContainerCommitFailedEventData_reflection_;
  delete VolumeAttachedEventData::default_instance_;
  delete VolumeAttachedEventData_reflection_;
  delete VolumeDetachedEventData::default_instance_;
  delete VolumeDetachedEventData_reflection_;
  delete BlockMappingWrittenEventData::default_instance_;
  delete BlockMappingWrittenEventData_reflection_;
  delete BlockMappingWriteFailedEventData::default_instance_;
  delete BlockMappingWriteFailedEventData_reflection_;
  delete BlockMappingDeletedEventData::default_instance_;
  delete BlockMappingDeletedEventData_reflection_;
  delete OphranChunksEventData::default_instance_;
  delete OphranChunksEventData_reflection_;
  delete BlockIndexLogfileData::default_instance_;
  delete BlockIndexLogfileData_reflection_;
  delete ChunkIndexLogfileData::default_instance_;
  delete ChunkIndexLogfileData_reflection_;
  delete BloomFilterLogfileData::default_instance_;
  delete BloomFilterLogfileData_reflection_;
  delete GarbageCollectionCandidateData::default_instance_;
  delete GarbageCollectionCandidateData_reflection_;
  delete GarbageCollectionCandidateItemData::default_instance_;
  delete GarbageCollectionCandidateItemData_reflection_;
  delete GarbageCollectionInfoData::default_instance_;
  delete GarbageCollectionInfoData_reflection_;
  delete ContainerGreedyGCCandidateItemData::default_instance_;
  delete ContainerGreedyGCCandidateItemData_reflection_;
  delete ContainerGreedyGCCandidateData::default_instance_;
  delete ContainerGreedyGCCandidateData_reflection_;
  delete ContainerStorageAddressData::default_instance_;
  delete ContainerStorageAddressData_reflection_;
  delete BitmapAllocatorItemData::default_instance_;
  delete BitmapAllocatorItemData_reflection_;
  delete ContainerTrackerData::default_instance_;
  delete ContainerTrackerData_reflection_;
  delete LogReplayIDData::default_instance_;
  delete LogReplayIDData_reflection_;
  delete LogLogIDData::default_instance_;
  delete LogLogIDData_reflection_;
  delete LogStateData::default_instance_;
  delete LogStateData_reflection_;
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
  delete BlockWriteFailedData::default_instance_;
  delete BlockWriteFailedData_reflection_;
}

void protobuf_AddDesc_dedupv1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdedupv1.proto\"\213\001\n\020BlockMappingData\022\020\n\010"
    "block_id\030\001 \001(\004\022$\n\005items\030\002 \003(\0132\025.BlockMap"
    "pingItemData\022\027\n\017version_counter\030\003 \001(\r\022\024\n"
    "\014event_log_id\030\006 \001(\004\022\020\n\010checksum\030\007 \001(\014\"k\n"
    "\024BlockMappingPairData\022\020\n\010block_id\030\001 \001(\004\022"
    "\027\n\017version_counter\030\002 \001(\r\022(\n\005items\030\003 \003(\0132"
    "\031.BlockMappingPairItemData\"~\n\030BlockMappi"
    "ngPairItemData\022\n\n\002fp\030\001 \002(\014\022\024\n\014data_addre"
    "ss\030\002 \001(\004\022\024\n\014chunk_offset\030\003 \001(\r\022\014\n\004size\030\004"
    " \001(\r\022\034\n\024usage_count_modifier\030\005 \001(\005\"\\\n\024Bl"
    "ockMappingItemData\022\n\n\002fp\030\001 \002(\014\022\024\n\014data_a"
    "ddress\030\002 \001(\004\022\024\n\014chunk_offset\030\003 \001(\r\022\014\n\004si"
    "ze\030\004 \001(\r\"\251\001\n\020ChunkMappingData\022\024\n\014data_ad"
    "dress\030\001 \001(\004\022\023\n\013usage_count\030\002 \001(\003\022!\n\031usag"
    "e_count_change_log_id\030\003 \001(\004\022.\n&usage_cou"
    "nt_failed_write_change_log_id\030\004 \001(\004\022\027\n\017l"
    "ast_block_hint\030\005 \001(\004\"\205\001\n\rContainerData\022\022"
    "\n\nprimary_id\030\001 \001(\004\022\026\n\016container_size\030\002 \001"
    "(\r\022!\n\005items\030\003 \003(\0132\022.ContainerItemData\022\023\n"
    "\013commit_time\030\005 \001(\r\022\020\n\010checksum\030\007 \001(\r\"\224\001\n"
    "\021ContainerItemData\022\n\n\002fp\030\001 \001(\014\022\027\n\017positi"
    "on_offset\030\002 \001(\r\022\021\n\titem_size\030\003 \001(\r\022\020\n\010ra"
    "w_size\030\004 \001(\r\022\017\n\007deleted\030\005 \001(\010\022\017\n\007indexed"
    "\030\007 \001(\010\022\023\n\013original_id\030\006 \001(\004\"e\n\026Container"
    "ItemValueData\022\024\n\014on_disk_size\030\003 \001(\r\0225\n\013c"
    "ompression\030\004 \001(\0162\020.CompressionMode:\016COMP"
    "RESSION_NO\"\025\n\005Limit\022\014\n\004size\030\001 \002(\007\"F\n\021Con"
    "tainerFileData\022\020\n\010filename\030\001 \001(\t\022\021\n\tfile"
    "_size\030\002 \001(\004\022\014\n\004uuid\030\003 \001(\t\"\'\n\027ContainerSu"
    "perblockData\022\014\n\004uuid\030\001 \001(\t\"\234\001\n\024Container"
    "LogfileData\022\037\n\027last_given_container_id\030\001"
    " \001(\004\022\026\n\016container_size\030\002 \001(\r\022\014\n\004size\030\003 \001"
    "(\r\022 \n\004file\030\004 \003(\0132\022.ContainerFileData\022\033\n\023"
    "contains_superblock\030\005 \001(\010\"V\n\024SystemStart"
    "EventData\022\016\n\006create\030\001 \001(\010\022\r\n\005dirty\030\002 \001(\010"
    "\022\016\n\006forced\030\003 \001(\010\022\017\n\007crashed\030\004 \001(\010\"g\n\024Rep"
    "layStartEventData\022\023\n\013replay_type\030\001 \001(\005\022\021"
    "\n\treplay_id\030\003 \001(\004\022\016\n\006log_id\030\004 \001(\004\022\027\n\017ful"
    "l_log_replay\030\005 \001(\010\"^\n\023ReplayStopEventDat"
    "a\022\023\n\013replay_type\030\001 \001(\005\022\017\n\007success\030\002 \001(\010\022"
    "\021\n\treplay_id\030\003 \001(\004\022\016\n\006log_id\030\004 \001(\004\"\315\007\n\014L"
    "ogEventData\022\022\n\nevent_type\030a \001(\005\0229\n\026conta"
    "iner_opened_event\030\001 \001(\0132\031.ContainerOpene"
    "dEventData\022\?\n\031container_committed_event\030"
    "\002 \001(\0132\034.ContainerCommittedEventData\0229\n\026c"
    "ontainer_merged_event\030\003 \001(\0132\031.ContainerM"
    "ergedEventData\022;\n\027container_deleted_even"
    "t\030\004 \001(\0132\032.ContainerDeletedEventData\0226\n\025c"
    "ontainer_moved_event\030\005 \001(\0132\027.ContainerMo"
    "veEventData\022F\n\035container_commit_failed_e"
    "vent\030\006 \001(\0132\037.ContainerCommitFailedEventD"
    "ata\0227\n\025volume_attached_event\030\007 \001(\0132\030.Vol"
    "umeAttachedEventData\0227\n\025volume_detached_"
    "event\030\010 \001(\0132\030.VolumeDetachedEventData\022B\n"
    "\033block_mapping_written_event\030\t \001(\0132\035.Blo"
    "ckMappingWrittenEventData\022K\n block_mappi"
    "ng_write_failed_event\030\n \001(\0132!.BlockMappi"
    "ngWriteFailedEventData\022B\n\033block_mapping_"
    "deleted_event\030\013 \001(\0132\035.BlockMappingDelete"
    "dEventData\0223\n\023ophran_chunks_event\030\014 \001(\0132"
    "\026.OphranChunksEventData\0221\n\022replay_start_"
    "event\030\r \001(\0132\025.ReplayStartEventData\022/\n\021re"
    "play_stop_event\030\016 \001(\0132\024.ReplayStopEventD"
    "ata\0221\n\022system_start_event\030\017 \001(\0132\025.System"
    "StartEventData\022\"\n\014message_data\030b \001(\0132\014.M"
    "essageData\"~\n\014LogEntryData\022\016\n\006log_id\030\007 \001"
    "(\003\022\r\n\005value\030\003 \001(\014\022\025\n\rpartial_index\030\005 \001(\r"
    "\022\025\n\rpartial_count\030\006 \001(\r\022!\n\031last_fully_wr"
    "itten_log_id\030\010 \001(\003\"_\n\030ContainerOpenedEve"
    "ntData\022\024\n\014container_id\030\001 \002(\004\022-\n\007address\030"
    "\002 \001(\0132\034.ContainerStorageAddressData\"\220\001\n\033"
    "ContainerCommittedEventData\022\024\n\014container"
    "_id\030\001 \002(\004\022-\n\007address\030\004 \001(\0132\034.ContainerSt"
    "orageAddressData\022\022\n\nitem_count\030\005 \001(\r\022\030\n\020"
    "active_data_size\030\006 \001(\r\"\242\003\n\030ContainerMerg"
    "edEventData\022\020\n\010first_id\030\001 \002(\004\022\021\n\tsecond_"
    "id\030\002 \002(\004\022\036\n\022first_secondary_id\030\003 \003(\004B\002\020\001"
    "\022\037\n\023second_secondary_id\030\004 \003(\004B\002\020\001\0223\n\rfir"
    "st_address\030\r \001(\0132\034.ContainerStorageAddre"
    "ssData\0224\n\016second_address\030\016 \001(\0132\034.Contain"
    "erStorageAddressData\0221\n\013new_address\030\017 \001("
    "\0132\034.ContainerStorageAddressData\022\026\n\016new_p"
    "rimary_id\030\022 \001(\004\022\034\n\020new_secondary_id\030\013 \003("
    "\004B\002\020\001\022\026\n\nunused_ids\030\014 \003(\004B\002\020\001\022\026\n\016new_ite"
    "m_count\030\020 \001(\r\022\034\n\024new_active_data_size\030\021 "
    "\001(\r\"\231\001\n\031ContainerDeletedEventData\022\024\n\014con"
    "tainer_id\030\001 \002(\004\022\"\n\026secondary_container_i"
    "d\030\002 \003(\004B\002\020\001\022-\n\007address\030\005 \001(\0132\034.Container"
    "StorageAddressData\022\023\n\013file_offset\030\004 \001(\004\""
    "\370\001\n\026ContainerMoveEventData\022\024\n\014container_"
    "id\030\001 \002(\004\0221\n\013old_address\030\006 \001(\0132\034.Containe"
    "rStorageAddressData\0221\n\013new_address\030\007 \001(\013"
    "2\034.ContainerStorageAddressData\022\030\n\020active"
    "_data_size\030\010 \001(\004\022\034\n\024old_active_data_size"
    "\030\t \001(\004\022\022\n\nitem_count\030\n \001(\r\022\026\n\016old_item_c"
    "ount\030\013 \001(\r\"H\n\036ContainerCommitFailedEvent"
    "Data\022\024\n\014container_id\030\001 \002(\004\022\020\n\010item_key\030\002"
    " \003(\014\",\n\027VolumeAttachedEventData\022\021\n\tvolum"
    "e_id\030\001 \002(\r\",\n\027VolumeDetachedEventData\022\021\n"
    "\tvolume_id\030\001 \002(\r\"K\n\034BlockMappingWrittenE"
    "ventData\022+\n\014mapping_pair\030\004 \001(\0132\025.BlockMa"
    "ppingPairData\"k\n BlockMappingWriteFailed"
    "EventData\022+\n\014mapping_pair\030\004 \001(\0132\025.BlockM"
    "appingPairData\022\032\n\022write_event_log_id\030\003 \001"
    "(\003\"Q\n\034BlockMappingDeletedEventData\0221\n\026or"
    "iginal_block_mapping\030\001 \001(\0132\021.BlockMappin"
    "gData\")\n\025OphranChunksEventData\022\020\n\010chunk_"
    "fp\030\001 \003(\014\"I\n\025BlockIndexLogfileData\0220\n\021con"
    "tainer_tracker\030\002 \001(\0132\025.ContainerTrackerD"
    "ata\"I\n\025ChunkIndexLogfileData\0220\n\021containe"
    "r_tracker\030\002 \001(\0132\025.ContainerTrackerData\"j"
    "\n\026BloomFilterLogfileData\022\023\n\013filter_size\030"
    "\001 \001(\004\022\t\n\001k\030\002 \001(\r\0220\n\021container_tracker\030\004 "
    "\001(\0132\025.ContainerTrackerData\"\234\001\n\036GarbageCo"
    "llectionCandidateData\022\017\n\007address\030\001 \001(\004\0221"
    "\n\004item\030\002 \003(\0132#.GarbageCollectionCandidat"
    "eItemData\022\022\n\nprocessing\030\003 \001(\010\022\"\n\032unchang"
    "ed_processing_count\030\004 \001(\r\"\212\001\n\"GarbageCol"
    "lectionCandidateItemData\022\n\n\002fp\030\001 \001(\014\0226\n\004"
    "type\030\002 \001(\0162(.GarbageCollectionCandidateI"
    "temData.Type\" \n\004Type\022\014\n\010STANDARD\020\000\022\n\n\006FA"
    "ILED\020\001\"G\n\031GarbageCollectionInfoData\022*\n\"r"
    "eplayed_block_failed_event_log_id\030\001 \003(\003\""
    "j\n\"ContainerGreedyGCCandidateItemData\022\017\n"
    "\007address\030\001 \001(\004\022\030\n\020active_data_size\030\002 \001(\r"
    "\022\031\n\021active_item_count\030\003 \001(\r\"S\n\036Container"
    "GreedyGCCandidateData\0221\n\004item\030\001 \003(\0132#.Co"
    "ntainerGreedyGCCandidateItemData\"j\n\033Cont"
    "ainerStorageAddressData\022\022\n\nprimary_id\030\003 "
    "\001(\004\022\022\n\nfile_index\030\001 \001(\r\022\023\n\013file_offset\030\002"
    " \001(\004\022\016\n\006log_id\030\004 \001(\004\"=\n\027BitmapAllocatorI"
    "temData\022\022\n\nfree_count\030\001 \001(\r\022\016\n\006bitmap\030\002 "
    "\001(\014\"S\n\024ContainerTrackerData\022\030\n\014container"
    "_id\030\001 \003(\004B\002\020\001\022!\n\031highest_seen_container_"
    "id\030\002 \001(\004\"$\n\017LogReplayIDData\022\021\n\treplay_id"
    "\030\001 \001(\003\"\036\n\014LogLogIDData\022\016\n\006log_id\030\001 \001(\003\"9"
    "\n\014LogStateData\022\020\n\010limit_id\030\001 \001(\003\022\027\n\017log_"
    "entry_width\030\002 \001(\003\"\036\n\013MessageData\022\017\n\007mess"
    "age\030\001 \001(\t\"\026\n\024BlockWriteFailedData*\226\001\n\017Co"
    "mpressionMode\022\022\n\016COMPRESSION_NO\020\000\022\027\n\023COM"
    "PRESSION_DEFLATE\020\001\022\024\n\020COMPRESSION_GZIP\020\002"
    "\022\023\n\017COMPRESSION_BZ2\020\003\022\026\n\022COMPRESSION_SNA"
    "PPY\020\004\022\023\n\017COMPRESSION_LZ4\020\005", 5706);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dedupv1.proto", &protobuf_RegisterTypes);
  BlockMappingData::default_instance_ = new BlockMappingData();
  BlockMappingPairData::default_instance_ = new BlockMappingPairData();
  BlockMappingPairItemData::default_instance_ = new BlockMappingPairItemData();
  BlockMappingItemData::default_instance_ = new BlockMappingItemData();
  ChunkMappingData::default_instance_ = new ChunkMappingData();
  ContainerData::default_instance_ = new ContainerData();
  ContainerItemData::default_instance_ = new ContainerItemData();
  ContainerItemValueData::default_instance_ = new ContainerItemValueData();
  Limit::default_instance_ = new Limit();
  ContainerFileData::default_instance_ = new ContainerFileData();
  ContainerSuperblockData::default_instance_ = new ContainerSuperblockData();
  ContainerLogfileData::default_instance_ = new ContainerLogfileData();
  SystemStartEventData::default_instance_ = new SystemStartEventData();
  ReplayStartEventData::default_instance_ = new ReplayStartEventData();
  ReplayStopEventData::default_instance_ = new ReplayStopEventData();
  LogEventData::default_instance_ = new LogEventData();
  LogEntryData::default_instance_ = new LogEntryData();
  ContainerOpenedEventData::default_instance_ = new ContainerOpenedEventData();
  ContainerCommittedEventData::default_instance_ = new ContainerCommittedEventData();
  ContainerMergedEventData::default_instance_ = new ContainerMergedEventData();
  ContainerDeletedEventData::default_instance_ = new ContainerDeletedEventData();
  ContainerMoveEventData::default_instance_ = new ContainerMoveEventData();
  ContainerCommitFailedEventData::default_instance_ = new ContainerCommitFailedEventData();
  VolumeAttachedEventData::default_instance_ = new VolumeAttachedEventData();
  VolumeDetachedEventData::default_instance_ = new VolumeDetachedEventData();
  BlockMappingWrittenEventData::default_instance_ = new BlockMappingWrittenEventData();
  BlockMappingWriteFailedEventData::default_instance_ = new BlockMappingWriteFailedEventData();
  BlockMappingDeletedEventData::default_instance_ = new BlockMappingDeletedEventData();
  OphranChunksEventData::default_instance_ = new OphranChunksEventData();
  BlockIndexLogfileData::default_instance_ = new BlockIndexLogfileData();
  ChunkIndexLogfileData::default_instance_ = new ChunkIndexLogfileData();
  BloomFilterLogfileData::default_instance_ = new BloomFilterLogfileData();
  GarbageCollectionCandidateData::default_instance_ = new GarbageCollectionCandidateData();
  GarbageCollectionCandidateItemData::default_instance_ = new GarbageCollectionCandidateItemData();
  GarbageCollectionInfoData::default_instance_ = new GarbageCollectionInfoData();
  ContainerGreedyGCCandidateItemData::default_instance_ = new ContainerGreedyGCCandidateItemData();
  ContainerGreedyGCCandidateData::default_instance_ = new ContainerGreedyGCCandidateData();
  ContainerStorageAddressData::default_instance_ = new ContainerStorageAddressData();
  BitmapAllocatorItemData::default_instance_ = new BitmapAllocatorItemData();
  ContainerTrackerData::default_instance_ = new ContainerTrackerData();
  LogReplayIDData::default_instance_ = new LogReplayIDData();
  LogLogIDData::default_instance_ = new LogLogIDData();
  LogStateData::default_instance_ = new LogStateData();
  MessageData::default_instance_ = new MessageData();
  BlockWriteFailedData::default_instance_ = new BlockWriteFailedData();
  BlockMappingData::default_instance_->InitAsDefaultInstance();
  BlockMappingPairData::default_instance_->InitAsDefaultInstance();
  BlockMappingPairItemData::default_instance_->InitAsDefaultInstance();
  BlockMappingItemData::default_instance_->InitAsDefaultInstance();
  ChunkMappingData::default_instance_->InitAsDefaultInstance();
  ContainerData::default_instance_->InitAsDefaultInstance();
  ContainerItemData::default_instance_->InitAsDefaultInstance();
  ContainerItemValueData::default_instance_->InitAsDefaultInstance();
  Limit::default_instance_->InitAsDefaultInstance();
  ContainerFileData::default_instance_->InitAsDefaultInstance();
  ContainerSuperblockData::default_instance_->InitAsDefaultInstance();
  ContainerLogfileData::default_instance_->InitAsDefaultInstance();
  SystemStartEventData::default_instance_->InitAsDefaultInstance();
  ReplayStartEventData::default_instance_->InitAsDefaultInstance();
  ReplayStopEventData::default_instance_->InitAsDefaultInstance();
  LogEventData::default_instance_->InitAsDefaultInstance();
  LogEntryData::default_instance_->InitAsDefaultInstance();
  ContainerOpenedEventData::default_instance_->InitAsDefaultInstance();
  ContainerCommittedEventData::default_instance_->InitAsDefaultInstance();
  ContainerMergedEventData::default_instance_->InitAsDefaultInstance();
  ContainerDeletedEventData::default_instance_->InitAsDefaultInstance();
  ContainerMoveEventData::default_instance_->InitAsDefaultInstance();
  ContainerCommitFailedEventData::default_instance_->InitAsDefaultInstance();
  VolumeAttachedEventData::default_instance_->InitAsDefaultInstance();
  VolumeDetachedEventData::default_instance_->InitAsDefaultInstance();
  BlockMappingWrittenEventData::default_instance_->InitAsDefaultInstance();
  BlockMappingWriteFailedEventData::default_instance_->InitAsDefaultInstance();
  BlockMappingDeletedEventData::default_instance_->InitAsDefaultInstance();
  OphranChunksEventData::default_instance_->InitAsDefaultInstance();
  BlockIndexLogfileData::default_instance_->InitAsDefaultInstance();
  ChunkIndexLogfileData::default_instance_->InitAsDefaultInstance();
  BloomFilterLogfileData::default_instance_->InitAsDefaultInstance();
  GarbageCollectionCandidateData::default_instance_->InitAsDefaultInstance();
  GarbageCollectionCandidateItemData::default_instance_->InitAsDefaultInstance();
  GarbageCollectionInfoData::default_instance_->InitAsDefaultInstance();
  ContainerGreedyGCCandidateItemData::default_instance_->InitAsDefaultInstance();
  ContainerGreedyGCCandidateData::default_instance_->InitAsDefaultInstance();
  ContainerStorageAddressData::default_instance_->InitAsDefaultInstance();
  BitmapAllocatorItemData::default_instance_->InitAsDefaultInstance();
  ContainerTrackerData::default_instance_->InitAsDefaultInstance();
  LogReplayIDData::default_instance_->InitAsDefaultInstance();
  LogLogIDData::default_instance_->InitAsDefaultInstance();
  LogStateData::default_instance_->InitAsDefaultInstance();
  MessageData::default_instance_->InitAsDefaultInstance();
  BlockWriteFailedData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dedupv1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dedupv1_2eproto {
  StaticDescriptorInitializer_dedupv1_2eproto() {
    protobuf_AddDesc_dedupv1_2eproto();
  }
} static_descriptor_initializer_dedupv1_2eproto_;
const ::google::protobuf::EnumDescriptor* CompressionMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressionMode_descriptor_;
}
bool CompressionMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingData::kBlockIdFieldNumber;
const int BlockMappingData::kItemsFieldNumber;
const int BlockMappingData::kVersionCounterFieldNumber;
const int BlockMappingData::kEventLogIdFieldNumber;
const int BlockMappingData::kChecksumFieldNumber;
#endif  // !_MSC_VER

BlockMappingData::BlockMappingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingData::InitAsDefaultInstance() {
}

BlockMappingData::BlockMappingData(const BlockMappingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingData::SharedCtor() {
  _cached_size_ = 0;
  block_id_ = GOOGLE_ULONGLONG(0);
  version_counter_ = 0u;
  event_log_id_ = GOOGLE_ULONGLONG(0);
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingData::~BlockMappingData() {
  SharedDtor();
}

void BlockMappingData::SharedDtor() {
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (this != default_instance_) {
  }
}

void BlockMappingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingData_descriptor_;
}

const BlockMappingData& BlockMappingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingData* BlockMappingData::default_instance_ = NULL;

BlockMappingData* BlockMappingData::New() const {
  return new BlockMappingData;
}

void BlockMappingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_id_ = GOOGLE_ULONGLONG(0);
    version_counter_ = 0u;
    event_log_id_ = GOOGLE_ULONGLONG(0);
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 block_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .BlockMappingItemData items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_version_counter;
        break;
      }

      // optional uint32 version_counter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_counter_)));
          set_has_version_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_event_log_id;
        break;
      }

      // optional uint64 event_log_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_log_id_)));
          set_has_event_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_checksum;
        break;
      }

      // optional bytes checksum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 block_id = 1;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->block_id(), output);
  }

  // repeated .BlockMappingItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional uint32 version_counter = 3;
  if (has_version_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version_counter(), output);
  }

  // optional uint64 event_log_id = 6;
  if (has_event_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->event_log_id(), output);
  }

  // optional bytes checksum = 7;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 block_id = 1;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->block_id(), target);
  }

  // repeated .BlockMappingItemData items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional uint32 version_counter = 3;
  if (has_version_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version_counter(), target);
  }

  // optional uint64 event_log_id = 6;
  if (has_event_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->event_log_id(), target);
  }

  // optional bytes checksum = 7;
  if (has_checksum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 block_id = 1;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_id());
    }

    // optional uint32 version_counter = 3;
    if (has_version_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_counter());
    }

    // optional uint64 event_log_id = 6;
    if (has_event_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_log_id());
    }

    // optional bytes checksum = 7;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->checksum());
    }

  }
  // repeated .BlockMappingItemData items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingData::MergeFrom(const BlockMappingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_version_counter()) {
      set_version_counter(from.version_counter());
    }
    if (from.has_event_log_id()) {
      set_event_log_id(from.event_log_id());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingData::CopyFrom(const BlockMappingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingData::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BlockMappingData::Swap(BlockMappingData* other) {
  if (other != this) {
    std::swap(block_id_, other->block_id_);
    items_.Swap(&other->items_);
    std::swap(version_counter_, other->version_counter_);
    std::swap(event_log_id_, other->event_log_id_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingData_descriptor_;
  metadata.reflection = BlockMappingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingPairData::kBlockIdFieldNumber;
const int BlockMappingPairData::kVersionCounterFieldNumber;
const int BlockMappingPairData::kItemsFieldNumber;
#endif  // !_MSC_VER

BlockMappingPairData::BlockMappingPairData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingPairData::InitAsDefaultInstance() {
}

BlockMappingPairData::BlockMappingPairData(const BlockMappingPairData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingPairData::SharedCtor() {
  _cached_size_ = 0;
  block_id_ = GOOGLE_ULONGLONG(0);
  version_counter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingPairData::~BlockMappingPairData() {
  SharedDtor();
}

void BlockMappingPairData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockMappingPairData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingPairData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingPairData_descriptor_;
}

const BlockMappingPairData& BlockMappingPairData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingPairData* BlockMappingPairData::default_instance_ = NULL;

BlockMappingPairData* BlockMappingPairData::New() const {
  return new BlockMappingPairData;
}

void BlockMappingPairData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_id_ = GOOGLE_ULONGLONG(0);
    version_counter_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingPairData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 block_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_id_)));
          set_has_block_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version_counter;
        break;
      }

      // optional uint32 version_counter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_counter_)));
          set_has_version_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .BlockMappingPairItemData items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingPairData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 block_id = 1;
  if (has_block_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->block_id(), output);
  }

  // optional uint32 version_counter = 2;
  if (has_version_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version_counter(), output);
  }

  // repeated .BlockMappingPairItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingPairData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 block_id = 1;
  if (has_block_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->block_id(), target);
  }

  // optional uint32 version_counter = 2;
  if (has_version_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version_counter(), target);
  }

  // repeated .BlockMappingPairItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingPairData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 block_id = 1;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_id());
    }

    // optional uint32 version_counter = 2;
    if (has_version_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version_counter());
    }

  }
  // repeated .BlockMappingPairItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingPairData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingPairData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingPairData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingPairData::MergeFrom(const BlockMappingPairData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_id()) {
      set_block_id(from.block_id());
    }
    if (from.has_version_counter()) {
      set_version_counter(from.version_counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingPairData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingPairData::CopyFrom(const BlockMappingPairData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingPairData::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void BlockMappingPairData::Swap(BlockMappingPairData* other) {
  if (other != this) {
    std::swap(block_id_, other->block_id_);
    std::swap(version_counter_, other->version_counter_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingPairData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingPairData_descriptor_;
  metadata.reflection = BlockMappingPairData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingPairItemData::kFpFieldNumber;
const int BlockMappingPairItemData::kDataAddressFieldNumber;
const int BlockMappingPairItemData::kChunkOffsetFieldNumber;
const int BlockMappingPairItemData::kSizeFieldNumber;
const int BlockMappingPairItemData::kUsageCountModifierFieldNumber;
#endif  // !_MSC_VER

BlockMappingPairItemData::BlockMappingPairItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingPairItemData::InitAsDefaultInstance() {
}

BlockMappingPairItemData::BlockMappingPairItemData(const BlockMappingPairItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingPairItemData::SharedCtor() {
  _cached_size_ = 0;
  fp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_address_ = GOOGLE_ULONGLONG(0);
  chunk_offset_ = 0u;
  size_ = 0u;
  usage_count_modifier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingPairItemData::~BlockMappingPairItemData() {
  SharedDtor();
}

void BlockMappingPairItemData::SharedDtor() {
  if (fp_ != &::google::protobuf::internal::kEmptyString) {
    delete fp_;
  }
  if (this != default_instance_) {
  }
}

void BlockMappingPairItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingPairItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingPairItemData_descriptor_;
}

const BlockMappingPairItemData& BlockMappingPairItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingPairItemData* BlockMappingPairItemData::default_instance_ = NULL;

BlockMappingPairItemData* BlockMappingPairItemData::New() const {
  return new BlockMappingPairItemData;
}

void BlockMappingPairItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fp()) {
      if (fp_ != &::google::protobuf::internal::kEmptyString) {
        fp_->clear();
      }
    }
    data_address_ = GOOGLE_ULONGLONG(0);
    chunk_offset_ = 0u;
    size_ = 0u;
    usage_count_modifier_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingPairItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_address;
        break;
      }

      // optional uint64 data_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_address_)));
          set_has_data_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chunk_offset;
        break;
      }

      // optional uint32 chunk_offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_offset_)));
          set_has_chunk_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_usage_count_modifier;
        break;
      }

      // optional int32 usage_count_modifier = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_count_modifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usage_count_modifier_)));
          set_has_usage_count_modifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingPairItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes fp = 1;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fp(), output);
  }

  // optional uint64 data_address = 2;
  if (has_data_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data_address(), output);
  }

  // optional uint32 chunk_offset = 3;
  if (has_chunk_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chunk_offset(), output);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional int32 usage_count_modifier = 5;
  if (has_usage_count_modifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usage_count_modifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingPairItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes fp = 1;
  if (has_fp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fp(), target);
  }

  // optional uint64 data_address = 2;
  if (has_data_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data_address(), target);
  }

  // optional uint32 chunk_offset = 3;
  if (has_chunk_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chunk_offset(), target);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional int32 usage_count_modifier = 5;
  if (has_usage_count_modifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usage_count_modifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingPairItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fp = 1;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fp());
    }

    // optional uint64 data_address = 2;
    if (has_data_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_address());
    }

    // optional uint32 chunk_offset = 3;
    if (has_chunk_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_offset());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional int32 usage_count_modifier = 5;
    if (has_usage_count_modifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usage_count_modifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingPairItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingPairItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingPairItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingPairItemData::MergeFrom(const BlockMappingPairItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_data_address()) {
      set_data_address(from.data_address());
    }
    if (from.has_chunk_offset()) {
      set_chunk_offset(from.chunk_offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_usage_count_modifier()) {
      set_usage_count_modifier(from.usage_count_modifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingPairItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingPairItemData::CopyFrom(const BlockMappingPairItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingPairItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockMappingPairItemData::Swap(BlockMappingPairItemData* other) {
  if (other != this) {
    std::swap(fp_, other->fp_);
    std::swap(data_address_, other->data_address_);
    std::swap(chunk_offset_, other->chunk_offset_);
    std::swap(size_, other->size_);
    std::swap(usage_count_modifier_, other->usage_count_modifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingPairItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingPairItemData_descriptor_;
  metadata.reflection = BlockMappingPairItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingItemData::kFpFieldNumber;
const int BlockMappingItemData::kDataAddressFieldNumber;
const int BlockMappingItemData::kChunkOffsetFieldNumber;
const int BlockMappingItemData::kSizeFieldNumber;
#endif  // !_MSC_VER

BlockMappingItemData::BlockMappingItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingItemData::InitAsDefaultInstance() {
}

BlockMappingItemData::BlockMappingItemData(const BlockMappingItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingItemData::SharedCtor() {
  _cached_size_ = 0;
  fp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_address_ = GOOGLE_ULONGLONG(0);
  chunk_offset_ = 0u;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingItemData::~BlockMappingItemData() {
  SharedDtor();
}

void BlockMappingItemData::SharedDtor() {
  if (fp_ != &::google::protobuf::internal::kEmptyString) {
    delete fp_;
  }
  if (this != default_instance_) {
  }
}

void BlockMappingItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingItemData_descriptor_;
}

const BlockMappingItemData& BlockMappingItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingItemData* BlockMappingItemData::default_instance_ = NULL;

BlockMappingItemData* BlockMappingItemData::New() const {
  return new BlockMappingItemData;
}

void BlockMappingItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fp()) {
      if (fp_ != &::google::protobuf::internal::kEmptyString) {
        fp_->clear();
      }
    }
    data_address_ = GOOGLE_ULONGLONG(0);
    chunk_offset_ = 0u;
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes fp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data_address;
        break;
      }

      // optional uint64 data_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_address:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_address_)));
          set_has_data_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chunk_offset;
        break;
      }

      // optional uint32 chunk_offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunk_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunk_offset_)));
          set_has_chunk_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes fp = 1;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fp(), output);
  }

  // optional uint64 data_address = 2;
  if (has_data_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->data_address(), output);
  }

  // optional uint32 chunk_offset = 3;
  if (has_chunk_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chunk_offset(), output);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes fp = 1;
  if (has_fp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fp(), target);
  }

  // optional uint64 data_address = 2;
  if (has_data_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->data_address(), target);
  }

  // optional uint32 chunk_offset = 3;
  if (has_chunk_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chunk_offset(), target);
  }

  // optional uint32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes fp = 1;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fp());
    }

    // optional uint64 data_address = 2;
    if (has_data_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_address());
    }

    // optional uint32 chunk_offset = 3;
    if (has_chunk_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunk_offset());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingItemData::MergeFrom(const BlockMappingItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_data_address()) {
      set_data_address(from.data_address());
    }
    if (from.has_chunk_offset()) {
      set_chunk_offset(from.chunk_offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingItemData::CopyFrom(const BlockMappingItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlockMappingItemData::Swap(BlockMappingItemData* other) {
  if (other != this) {
    std::swap(fp_, other->fp_);
    std::swap(data_address_, other->data_address_);
    std::swap(chunk_offset_, other->chunk_offset_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingItemData_descriptor_;
  metadata.reflection = BlockMappingItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkMappingData::kDataAddressFieldNumber;
const int ChunkMappingData::kUsageCountFieldNumber;
const int ChunkMappingData::kUsageCountChangeLogIdFieldNumber;
const int ChunkMappingData::kUsageCountFailedWriteChangeLogIdFieldNumber;
const int ChunkMappingData::kLastBlockHintFieldNumber;
#endif  // !_MSC_VER

ChunkMappingData::ChunkMappingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkMappingData::InitAsDefaultInstance() {
}

ChunkMappingData::ChunkMappingData(const ChunkMappingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkMappingData::SharedCtor() {
  _cached_size_ = 0;
  data_address_ = GOOGLE_ULONGLONG(0);
  usage_count_ = GOOGLE_LONGLONG(0);
  usage_count_change_log_id_ = GOOGLE_ULONGLONG(0);
  usage_count_failed_write_change_log_id_ = GOOGLE_ULONGLONG(0);
  last_block_hint_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkMappingData::~ChunkMappingData() {
  SharedDtor();
}

void ChunkMappingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkMappingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkMappingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkMappingData_descriptor_;
}

const ChunkMappingData& ChunkMappingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ChunkMappingData* ChunkMappingData::default_instance_ = NULL;

ChunkMappingData* ChunkMappingData::New() const {
  return new ChunkMappingData;
}

void ChunkMappingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_address_ = GOOGLE_ULONGLONG(0);
    usage_count_ = GOOGLE_LONGLONG(0);
    usage_count_change_log_id_ = GOOGLE_ULONGLONG(0);
    usage_count_failed_write_change_log_id_ = GOOGLE_ULONGLONG(0);
    last_block_hint_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkMappingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 data_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_address_)));
          set_has_data_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usage_count;
        break;
      }

      // optional int64 usage_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usage_count_)));
          set_has_usage_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_usage_count_change_log_id;
        break;
      }

      // optional uint64 usage_count_change_log_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_count_change_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usage_count_change_log_id_)));
          set_has_usage_count_change_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usage_count_failed_write_change_log_id;
        break;
      }

      // optional uint64 usage_count_failed_write_change_log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usage_count_failed_write_change_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &usage_count_failed_write_change_log_id_)));
          set_has_usage_count_failed_write_change_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_block_hint;
        break;
      }

      // optional uint64 last_block_hint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_block_hint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_block_hint_)));
          set_has_last_block_hint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkMappingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 data_address = 1;
  if (has_data_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->data_address(), output);
  }

  // optional int64 usage_count = 2;
  if (has_usage_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->usage_count(), output);
  }

  // optional uint64 usage_count_change_log_id = 3;
  if (has_usage_count_change_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->usage_count_change_log_id(), output);
  }

  // optional uint64 usage_count_failed_write_change_log_id = 4;
  if (has_usage_count_failed_write_change_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->usage_count_failed_write_change_log_id(), output);
  }

  // optional uint64 last_block_hint = 5;
  if (has_last_block_hint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_block_hint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkMappingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 data_address = 1;
  if (has_data_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->data_address(), target);
  }

  // optional int64 usage_count = 2;
  if (has_usage_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->usage_count(), target);
  }

  // optional uint64 usage_count_change_log_id = 3;
  if (has_usage_count_change_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->usage_count_change_log_id(), target);
  }

  // optional uint64 usage_count_failed_write_change_log_id = 4;
  if (has_usage_count_failed_write_change_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->usage_count_failed_write_change_log_id(), target);
  }

  // optional uint64 last_block_hint = 5;
  if (has_last_block_hint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_block_hint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkMappingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 data_address = 1;
    if (has_data_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_address());
    }

    // optional int64 usage_count = 2;
    if (has_usage_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usage_count());
    }

    // optional uint64 usage_count_change_log_id = 3;
    if (has_usage_count_change_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usage_count_change_log_id());
    }

    // optional uint64 usage_count_failed_write_change_log_id = 4;
    if (has_usage_count_failed_write_change_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->usage_count_failed_write_change_log_id());
    }

    // optional uint64 last_block_hint = 5;
    if (has_last_block_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_block_hint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkMappingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkMappingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkMappingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkMappingData::MergeFrom(const ChunkMappingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_address()) {
      set_data_address(from.data_address());
    }
    if (from.has_usage_count()) {
      set_usage_count(from.usage_count());
    }
    if (from.has_usage_count_change_log_id()) {
      set_usage_count_change_log_id(from.usage_count_change_log_id());
    }
    if (from.has_usage_count_failed_write_change_log_id()) {
      set_usage_count_failed_write_change_log_id(from.usage_count_failed_write_change_log_id());
    }
    if (from.has_last_block_hint()) {
      set_last_block_hint(from.last_block_hint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkMappingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkMappingData::CopyFrom(const ChunkMappingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkMappingData::IsInitialized() const {

  return true;
}

void ChunkMappingData::Swap(ChunkMappingData* other) {
  if (other != this) {
    std::swap(data_address_, other->data_address_);
    std::swap(usage_count_, other->usage_count_);
    std::swap(usage_count_change_log_id_, other->usage_count_change_log_id_);
    std::swap(usage_count_failed_write_change_log_id_, other->usage_count_failed_write_change_log_id_);
    std::swap(last_block_hint_, other->last_block_hint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkMappingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkMappingData_descriptor_;
  metadata.reflection = ChunkMappingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerData::kPrimaryIdFieldNumber;
const int ContainerData::kContainerSizeFieldNumber;
const int ContainerData::kItemsFieldNumber;
const int ContainerData::kCommitTimeFieldNumber;
const int ContainerData::kChecksumFieldNumber;
#endif  // !_MSC_VER

ContainerData::ContainerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerData::InitAsDefaultInstance() {
}

ContainerData::ContainerData(const ContainerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerData::SharedCtor() {
  _cached_size_ = 0;
  primary_id_ = GOOGLE_ULONGLONG(0);
  container_size_ = 0u;
  commit_time_ = 0u;
  checksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerData::~ContainerData() {
  SharedDtor();
}

void ContainerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerData_descriptor_;
}

const ContainerData& ContainerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerData* ContainerData::default_instance_ = NULL;

ContainerData* ContainerData::New() const {
  return new ContainerData;
}

void ContainerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    primary_id_ = GOOGLE_ULONGLONG(0);
    container_size_ = 0u;
    commit_time_ = 0u;
    checksum_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 primary_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_id_)));
          set_has_primary_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container_size;
        break;
      }

      // optional uint32 container_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_size_)));
          set_has_container_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .ContainerItemData items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_commit_time;
        break;
      }

      // optional uint32 commit_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commit_time_)));
          set_has_commit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
          set_has_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 primary_id = 1;
  if (has_primary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->primary_id(), output);
  }

  // optional uint32 container_size = 2;
  if (has_container_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->container_size(), output);
  }

  // repeated .ContainerItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional uint32 commit_time = 5;
  if (has_commit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->commit_time(), output);
  }

  // optional uint32 checksum = 7;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->checksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 primary_id = 1;
  if (has_primary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->primary_id(), target);
  }

  // optional uint32 container_size = 2;
  if (has_container_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->container_size(), target);
  }

  // repeated .ContainerItemData items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional uint32 commit_time = 5;
  if (has_commit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->commit_time(), target);
  }

  // optional uint32 checksum = 7;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->checksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 primary_id = 1;
    if (has_primary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary_id());
    }

    // optional uint32 container_size = 2;
    if (has_container_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_size());
    }

    // optional uint32 commit_time = 5;
    if (has_commit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commit_time());
    }

    // optional uint32 checksum = 7;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->checksum());
    }

  }
  // repeated .ContainerItemData items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerData::MergeFrom(const ContainerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_id()) {
      set_primary_id(from.primary_id());
    }
    if (from.has_container_size()) {
      set_container_size(from.container_size());
    }
    if (from.has_commit_time()) {
      set_commit_time(from.commit_time());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerData::CopyFrom(const ContainerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerData::IsInitialized() const {

  return true;
}

void ContainerData::Swap(ContainerData* other) {
  if (other != this) {
    std::swap(primary_id_, other->primary_id_);
    std::swap(container_size_, other->container_size_);
    items_.Swap(&other->items_);
    std::swap(commit_time_, other->commit_time_);
    std::swap(checksum_, other->checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerData_descriptor_;
  metadata.reflection = ContainerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerItemData::kFpFieldNumber;
const int ContainerItemData::kPositionOffsetFieldNumber;
const int ContainerItemData::kItemSizeFieldNumber;
const int ContainerItemData::kRawSizeFieldNumber;
const int ContainerItemData::kDeletedFieldNumber;
const int ContainerItemData::kIndexedFieldNumber;
const int ContainerItemData::kOriginalIdFieldNumber;
#endif  // !_MSC_VER

ContainerItemData::ContainerItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerItemData::InitAsDefaultInstance() {
}

ContainerItemData::ContainerItemData(const ContainerItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerItemData::SharedCtor() {
  _cached_size_ = 0;
  fp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_offset_ = 0u;
  item_size_ = 0u;
  raw_size_ = 0u;
  deleted_ = false;
  indexed_ = false;
  original_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerItemData::~ContainerItemData() {
  SharedDtor();
}

void ContainerItemData::SharedDtor() {
  if (fp_ != &::google::protobuf::internal::kEmptyString) {
    delete fp_;
  }
  if (this != default_instance_) {
  }
}

void ContainerItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerItemData_descriptor_;
}

const ContainerItemData& ContainerItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerItemData* ContainerItemData::default_instance_ = NULL;

ContainerItemData* ContainerItemData::New() const {
  return new ContainerItemData;
}

void ContainerItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fp()) {
      if (fp_ != &::google::protobuf::internal::kEmptyString) {
        fp_->clear();
      }
    }
    position_offset_ = 0u;
    item_size_ = 0u;
    raw_size_ = 0u;
    deleted_ = false;
    indexed_ = false;
    original_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position_offset;
        break;
      }

      // optional uint32 position_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_offset_)));
          set_has_position_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_size;
        break;
      }

      // optional uint32 item_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_size_)));
          set_has_item_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_raw_size;
        break;
      }

      // optional uint32 raw_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_size_)));
          set_has_raw_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_original_id;
        break;
      }

      // optional uint64 original_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
          set_has_original_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_indexed;
        break;
      }

      // optional bool indexed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_indexed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &indexed_)));
          set_has_indexed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes fp = 1;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fp(), output);
  }

  // optional uint32 position_offset = 2;
  if (has_position_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_offset(), output);
  }

  // optional uint32 item_size = 3;
  if (has_item_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_size(), output);
  }

  // optional uint32 raw_size = 4;
  if (has_raw_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raw_size(), output);
  }

  // optional bool deleted = 5;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->deleted(), output);
  }

  // optional uint64 original_id = 6;
  if (has_original_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->original_id(), output);
  }

  // optional bool indexed = 7;
  if (has_indexed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->indexed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes fp = 1;
  if (has_fp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fp(), target);
  }

  // optional uint32 position_offset = 2;
  if (has_position_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_offset(), target);
  }

  // optional uint32 item_size = 3;
  if (has_item_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_size(), target);
  }

  // optional uint32 raw_size = 4;
  if (has_raw_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raw_size(), target);
  }

  // optional bool deleted = 5;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->deleted(), target);
  }

  // optional uint64 original_id = 6;
  if (has_original_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->original_id(), target);
  }

  // optional bool indexed = 7;
  if (has_indexed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->indexed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes fp = 1;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fp());
    }

    // optional uint32 position_offset = 2;
    if (has_position_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_offset());
    }

    // optional uint32 item_size = 3;
    if (has_item_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_size());
    }

    // optional uint32 raw_size = 4;
    if (has_raw_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_size());
    }

    // optional bool deleted = 5;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

    // optional bool indexed = 7;
    if (has_indexed()) {
      total_size += 1 + 1;
    }

    // optional uint64 original_id = 6;
    if (has_original_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerItemData::MergeFrom(const ContainerItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_position_offset()) {
      set_position_offset(from.position_offset());
    }
    if (from.has_item_size()) {
      set_item_size(from.item_size());
    }
    if (from.has_raw_size()) {
      set_raw_size(from.raw_size());
    }
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
    if (from.has_indexed()) {
      set_indexed(from.indexed());
    }
    if (from.has_original_id()) {
      set_original_id(from.original_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerItemData::CopyFrom(const ContainerItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerItemData::IsInitialized() const {

  return true;
}

void ContainerItemData::Swap(ContainerItemData* other) {
  if (other != this) {
    std::swap(fp_, other->fp_);
    std::swap(position_offset_, other->position_offset_);
    std::swap(item_size_, other->item_size_);
    std::swap(raw_size_, other->raw_size_);
    std::swap(deleted_, other->deleted_);
    std::swap(indexed_, other->indexed_);
    std::swap(original_id_, other->original_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerItemData_descriptor_;
  metadata.reflection = ContainerItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerItemValueData::kOnDiskSizeFieldNumber;
const int ContainerItemValueData::kCompressionFieldNumber;
#endif  // !_MSC_VER

ContainerItemValueData::ContainerItemValueData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerItemValueData::InitAsDefaultInstance() {
}

ContainerItemValueData::ContainerItemValueData(const ContainerItemValueData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerItemValueData::SharedCtor() {
  _cached_size_ = 0;
  on_disk_size_ = 0u;
  compression_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerItemValueData::~ContainerItemValueData() {
  SharedDtor();
}

void ContainerItemValueData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerItemValueData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerItemValueData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerItemValueData_descriptor_;
}

const ContainerItemValueData& ContainerItemValueData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerItemValueData* ContainerItemValueData::default_instance_ = NULL;

ContainerItemValueData* ContainerItemValueData::New() const {
  return new ContainerItemValueData;
}

void ContainerItemValueData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    on_disk_size_ = 0u;
    compression_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerItemValueData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 on_disk_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &on_disk_size_)));
          set_has_on_disk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_compression;
        break;
      }

      // optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compression:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CompressionMode_IsValid(value)) {
            set_compression(static_cast< ::CompressionMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerItemValueData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 on_disk_size = 3;
  if (has_on_disk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->on_disk_size(), output);
  }

  // optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->compression(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerItemValueData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 on_disk_size = 3;
  if (has_on_disk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->on_disk_size(), target);
  }

  // optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->compression(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerItemValueData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 on_disk_size = 3;
    if (has_on_disk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->on_disk_size());
    }

    // optional .CompressionMode compression = 4 [default = COMPRESSION_NO];
    if (has_compression()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compression());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerItemValueData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerItemValueData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerItemValueData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerItemValueData::MergeFrom(const ContainerItemValueData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_on_disk_size()) {
      set_on_disk_size(from.on_disk_size());
    }
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerItemValueData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerItemValueData::CopyFrom(const ContainerItemValueData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerItemValueData::IsInitialized() const {

  return true;
}

void ContainerItemValueData::Swap(ContainerItemValueData* other) {
  if (other != this) {
    std::swap(on_disk_size_, other->on_disk_size_);
    std::swap(compression_, other->compression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerItemValueData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerItemValueData_descriptor_;
  metadata.reflection = ContainerItemValueData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Limit::kSizeFieldNumber;
#endif  // !_MSC_VER

Limit::Limit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Limit::InitAsDefaultInstance() {
}

Limit::Limit(const Limit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Limit::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Limit::~Limit() {
  SharedDtor();
}

void Limit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Limit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Limit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Limit_descriptor_;
}

const Limit& Limit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

Limit* Limit::default_instance_ = NULL;

Limit* Limit::New() const {
  return new Limit;
}

void Limit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Limit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Limit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 size = 1;
    if (has_size()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Limit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Limit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Limit::Swap(Limit* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Limit_descriptor_;
  metadata.reflection = Limit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerFileData::kFilenameFieldNumber;
const int ContainerFileData::kFileSizeFieldNumber;
const int ContainerFileData::kUuidFieldNumber;
#endif  // !_MSC_VER

ContainerFileData::ContainerFileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerFileData::InitAsDefaultInstance() {
}

ContainerFileData::ContainerFileData(const ContainerFileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerFileData::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerFileData::~ContainerFileData() {
  SharedDtor();
}

void ContainerFileData::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void ContainerFileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerFileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerFileData_descriptor_;
}

const ContainerFileData& ContainerFileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerFileData* ContainerFileData::default_instance_ = NULL;

ContainerFileData* ContainerFileData::New() const {
  return new ContainerFileData;
}

void ContainerFileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerFileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // optional string uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerFileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional uint64 file_size = 2;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerFileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint64 file_size = 2;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_size(), target);
  }

  // optional string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerFileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint64 file_size = 2;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerFileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerFileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerFileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerFileData::MergeFrom(const ContainerFileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerFileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerFileData::CopyFrom(const ContainerFileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerFileData::IsInitialized() const {

  return true;
}

void ContainerFileData::Swap(ContainerFileData* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(file_size_, other->file_size_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerFileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerFileData_descriptor_;
  metadata.reflection = ContainerFileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerSuperblockData::kUuidFieldNumber;
#endif  // !_MSC_VER

ContainerSuperblockData::ContainerSuperblockData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerSuperblockData::InitAsDefaultInstance() {
}

ContainerSuperblockData::ContainerSuperblockData(const ContainerSuperblockData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerSuperblockData::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerSuperblockData::~ContainerSuperblockData() {
  SharedDtor();
}

void ContainerSuperblockData::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void ContainerSuperblockData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerSuperblockData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerSuperblockData_descriptor_;
}

const ContainerSuperblockData& ContainerSuperblockData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerSuperblockData* ContainerSuperblockData::default_instance_ = NULL;

ContainerSuperblockData* ContainerSuperblockData::New() const {
  return new ContainerSuperblockData;
}

void ContainerSuperblockData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerSuperblockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerSuperblockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerSuperblockData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerSuperblockData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerSuperblockData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerSuperblockData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerSuperblockData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerSuperblockData::MergeFrom(const ContainerSuperblockData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerSuperblockData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerSuperblockData::CopyFrom(const ContainerSuperblockData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerSuperblockData::IsInitialized() const {

  return true;
}

void ContainerSuperblockData::Swap(ContainerSuperblockData* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerSuperblockData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerSuperblockData_descriptor_;
  metadata.reflection = ContainerSuperblockData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerLogfileData::kLastGivenContainerIdFieldNumber;
const int ContainerLogfileData::kContainerSizeFieldNumber;
const int ContainerLogfileData::kSizeFieldNumber;
const int ContainerLogfileData::kFileFieldNumber;
const int ContainerLogfileData::kContainsSuperblockFieldNumber;
#endif  // !_MSC_VER

ContainerLogfileData::ContainerLogfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerLogfileData::InitAsDefaultInstance() {
}

ContainerLogfileData::ContainerLogfileData(const ContainerLogfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerLogfileData::SharedCtor() {
  _cached_size_ = 0;
  last_given_container_id_ = GOOGLE_ULONGLONG(0);
  container_size_ = 0u;
  size_ = 0u;
  contains_superblock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerLogfileData::~ContainerLogfileData() {
  SharedDtor();
}

void ContainerLogfileData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerLogfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerLogfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerLogfileData_descriptor_;
}

const ContainerLogfileData& ContainerLogfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerLogfileData* ContainerLogfileData::default_instance_ = NULL;

ContainerLogfileData* ContainerLogfileData::New() const {
  return new ContainerLogfileData;
}

void ContainerLogfileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_given_container_id_ = GOOGLE_ULONGLONG(0);
    container_size_ = 0u;
    size_ = 0u;
    contains_superblock_ = false;
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerLogfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_given_container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_given_container_id_)));
          set_has_last_given_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container_size;
        break;
      }

      // optional uint32 container_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_size_)));
          set_has_container_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional uint32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file;
        break;
      }

      // repeated .ContainerFileData file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file;
        if (input->ExpectTag(40)) goto parse_contains_superblock;
        break;
      }

      // optional bool contains_superblock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contains_superblock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contains_superblock_)));
          set_has_contains_superblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerLogfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_given_container_id = 1;
  if (has_last_given_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_given_container_id(), output);
  }

  // optional uint32 container_size = 2;
  if (has_container_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->container_size(), output);
  }

  // optional uint32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // repeated .ContainerFileData file = 4;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->file(i), output);
  }

  // optional bool contains_superblock = 5;
  if (has_contains_superblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->contains_superblock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerLogfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 last_given_container_id = 1;
  if (has_last_given_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_given_container_id(), target);
  }

  // optional uint32 container_size = 2;
  if (has_container_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->container_size(), target);
  }

  // optional uint32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // repeated .ContainerFileData file = 4;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->file(i), target);
  }

  // optional bool contains_superblock = 5;
  if (has_contains_superblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->contains_superblock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerLogfileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_given_container_id = 1;
    if (has_last_given_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_given_container_id());
    }

    // optional uint32 container_size = 2;
    if (has_container_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_size());
    }

    // optional uint32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bool contains_superblock = 5;
    if (has_contains_superblock()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ContainerFileData file = 4;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerLogfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerLogfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerLogfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerLogfileData::MergeFrom(const ContainerLogfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_given_container_id()) {
      set_last_given_container_id(from.last_given_container_id());
    }
    if (from.has_container_size()) {
      set_container_size(from.container_size());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_contains_superblock()) {
      set_contains_superblock(from.contains_superblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerLogfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerLogfileData::CopyFrom(const ContainerLogfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerLogfileData::IsInitialized() const {

  return true;
}

void ContainerLogfileData::Swap(ContainerLogfileData* other) {
  if (other != this) {
    std::swap(last_given_container_id_, other->last_given_container_id_);
    std::swap(container_size_, other->container_size_);
    std::swap(size_, other->size_);
    file_.Swap(&other->file_);
    std::swap(contains_superblock_, other->contains_superblock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerLogfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerLogfileData_descriptor_;
  metadata.reflection = ContainerLogfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemStartEventData::kCreateFieldNumber;
const int SystemStartEventData::kDirtyFieldNumber;
const int SystemStartEventData::kForcedFieldNumber;
const int SystemStartEventData::kCrashedFieldNumber;
#endif  // !_MSC_VER

SystemStartEventData::SystemStartEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemStartEventData::InitAsDefaultInstance() {
}

SystemStartEventData::SystemStartEventData(const SystemStartEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemStartEventData::SharedCtor() {
  _cached_size_ = 0;
  create_ = false;
  dirty_ = false;
  forced_ = false;
  crashed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemStartEventData::~SystemStartEventData() {
  SharedDtor();
}

void SystemStartEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemStartEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStartEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemStartEventData_descriptor_;
}

const SystemStartEventData& SystemStartEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

SystemStartEventData* SystemStartEventData::default_instance_ = NULL;

SystemStartEventData* SystemStartEventData::New() const {
  return new SystemStartEventData;
}

void SystemStartEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    create_ = false;
    dirty_ = false;
    forced_ = false;
    crashed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemStartEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool create = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_)));
          set_has_create();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dirty;
        break;
      }

      // optional bool dirty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dirty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dirty_)));
          set_has_dirty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_forced;
        break;
      }

      // optional bool forced = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_)));
          set_has_forced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crashed;
        break;
      }

      // optional bool crashed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crashed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crashed_)));
          set_has_crashed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemStartEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool create = 1;
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->create(), output);
  }

  // optional bool dirty = 2;
  if (has_dirty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dirty(), output);
  }

  // optional bool forced = 3;
  if (has_forced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forced(), output);
  }

  // optional bool crashed = 4;
  if (has_crashed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->crashed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemStartEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool create = 1;
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->create(), target);
  }

  // optional bool dirty = 2;
  if (has_dirty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dirty(), target);
  }

  // optional bool forced = 3;
  if (has_forced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forced(), target);
  }

  // optional bool crashed = 4;
  if (has_crashed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->crashed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemStartEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool create = 1;
    if (has_create()) {
      total_size += 1 + 1;
    }

    // optional bool dirty = 2;
    if (has_dirty()) {
      total_size += 1 + 1;
    }

    // optional bool forced = 3;
    if (has_forced()) {
      total_size += 1 + 1;
    }

    // optional bool crashed = 4;
    if (has_crashed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStartEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemStartEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemStartEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemStartEventData::MergeFrom(const SystemStartEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_create()) {
      set_create(from.create());
    }
    if (from.has_dirty()) {
      set_dirty(from.dirty());
    }
    if (from.has_forced()) {
      set_forced(from.forced());
    }
    if (from.has_crashed()) {
      set_crashed(from.crashed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemStartEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStartEventData::CopyFrom(const SystemStartEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStartEventData::IsInitialized() const {

  return true;
}

void SystemStartEventData::Swap(SystemStartEventData* other) {
  if (other != this) {
    std::swap(create_, other->create_);
    std::swap(dirty_, other->dirty_);
    std::swap(forced_, other->forced_);
    std::swap(crashed_, other->crashed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemStartEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemStartEventData_descriptor_;
  metadata.reflection = SystemStartEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayStartEventData::kReplayTypeFieldNumber;
const int ReplayStartEventData::kReplayIdFieldNumber;
const int ReplayStartEventData::kLogIdFieldNumber;
const int ReplayStartEventData::kFullLogReplayFieldNumber;
#endif  // !_MSC_VER

ReplayStartEventData::ReplayStartEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplayStartEventData::InitAsDefaultInstance() {
}

ReplayStartEventData::ReplayStartEventData(const ReplayStartEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplayStartEventData::SharedCtor() {
  _cached_size_ = 0;
  replay_type_ = 0;
  replay_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  full_log_replay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayStartEventData::~ReplayStartEventData() {
  SharedDtor();
}

void ReplayStartEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplayStartEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayStartEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayStartEventData_descriptor_;
}

const ReplayStartEventData& ReplayStartEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ReplayStartEventData* ReplayStartEventData::default_instance_ = NULL;

ReplayStartEventData* ReplayStartEventData::New() const {
  return new ReplayStartEventData;
}

void ReplayStartEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    replay_type_ = 0;
    replay_id_ = GOOGLE_ULONGLONG(0);
    log_id_ = GOOGLE_ULONGLONG(0);
    full_log_replay_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayStartEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 replay_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_type_)));
          set_has_replay_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_full_log_replay;
        break;
      }

      // optional bool full_log_replay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_full_log_replay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &full_log_replay_)));
          set_has_full_log_replay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplayStartEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 replay_type = 1;
  if (has_replay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replay_type(), output);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->replay_id(), output);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  // optional bool full_log_replay = 5;
  if (has_full_log_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->full_log_replay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplayStartEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 replay_type = 1;
  if (has_replay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replay_type(), target);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->replay_id(), target);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  // optional bool full_log_replay = 5;
  if (has_full_log_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->full_log_replay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplayStartEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 replay_type = 1;
    if (has_replay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_type());
    }

    // optional uint64 replay_id = 3;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

    // optional bool full_log_replay = 5;
    if (has_full_log_replay()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayStartEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayStartEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplayStartEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayStartEventData::MergeFrom(const ReplayStartEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_replay_type()) {
      set_replay_type(from.replay_type());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_full_log_replay()) {
      set_full_log_replay(from.full_log_replay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayStartEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStartEventData::CopyFrom(const ReplayStartEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStartEventData::IsInitialized() const {

  return true;
}

void ReplayStartEventData::Swap(ReplayStartEventData* other) {
  if (other != this) {
    std::swap(replay_type_, other->replay_type_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(full_log_replay_, other->full_log_replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplayStartEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayStartEventData_descriptor_;
  metadata.reflection = ReplayStartEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplayStopEventData::kReplayTypeFieldNumber;
const int ReplayStopEventData::kSuccessFieldNumber;
const int ReplayStopEventData::kReplayIdFieldNumber;
const int ReplayStopEventData::kLogIdFieldNumber;
#endif  // !_MSC_VER

ReplayStopEventData::ReplayStopEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplayStopEventData::InitAsDefaultInstance() {
}

ReplayStopEventData::ReplayStopEventData(const ReplayStopEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplayStopEventData::SharedCtor() {
  _cached_size_ = 0;
  replay_type_ = 0;
  success_ = false;
  replay_id_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplayStopEventData::~ReplayStopEventData() {
  SharedDtor();
}

void ReplayStopEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplayStopEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplayStopEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplayStopEventData_descriptor_;
}

const ReplayStopEventData& ReplayStopEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ReplayStopEventData* ReplayStopEventData::default_instance_ = NULL;

ReplayStopEventData* ReplayStopEventData::New() const {
  return new ReplayStopEventData;
}

void ReplayStopEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    replay_type_ = 0;
    success_ = false;
    replay_id_ = GOOGLE_ULONGLONG(0);
    log_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplayStopEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 replay_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_type_)));
          set_has_replay_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplayStopEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 replay_type = 1;
  if (has_replay_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replay_type(), output);
  }

  // optional bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->replay_id(), output);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplayStopEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 replay_type = 1;
  if (has_replay_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replay_type(), target);
  }

  // optional bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->replay_id(), target);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplayStopEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 replay_type = 1;
    if (has_replay_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_type());
    }

    // optional bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint64 replay_id = 3;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplayStopEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplayStopEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplayStopEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplayStopEventData::MergeFrom(const ReplayStopEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_replay_type()) {
      set_replay_type(from.replay_type());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplayStopEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayStopEventData::CopyFrom(const ReplayStopEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayStopEventData::IsInitialized() const {

  return true;
}

void ReplayStopEventData::Swap(ReplayStopEventData* other) {
  if (other != this) {
    std::swap(replay_type_, other->replay_type_);
    std::swap(success_, other->success_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(log_id_, other->log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplayStopEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplayStopEventData_descriptor_;
  metadata.reflection = ReplayStopEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEventData::kEventTypeFieldNumber;
const int LogEventData::kContainerOpenedEventFieldNumber;
const int LogEventData::kContainerCommittedEventFieldNumber;
const int LogEventData::kContainerMergedEventFieldNumber;
const int LogEventData::kContainerDeletedEventFieldNumber;
const int LogEventData::kContainerMovedEventFieldNumber;
const int LogEventData::kContainerCommitFailedEventFieldNumber;
const int LogEventData::kVolumeAttachedEventFieldNumber;
const int LogEventData::kVolumeDetachedEventFieldNumber;
const int LogEventData::kBlockMappingWrittenEventFieldNumber;
const int LogEventData::kBlockMappingWriteFailedEventFieldNumber;
const int LogEventData::kBlockMappingDeletedEventFieldNumber;
const int LogEventData::kOphranChunksEventFieldNumber;
const int LogEventData::kReplayStartEventFieldNumber;
const int LogEventData::kReplayStopEventFieldNumber;
const int LogEventData::kSystemStartEventFieldNumber;
const int LogEventData::kMessageDataFieldNumber;
#endif  // !_MSC_VER

LogEventData::LogEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEventData::InitAsDefaultInstance() {
  container_opened_event_ = const_cast< ::ContainerOpenedEventData*>(&::ContainerOpenedEventData::default_instance());
  container_committed_event_ = const_cast< ::ContainerCommittedEventData*>(&::ContainerCommittedEventData::default_instance());
  container_merged_event_ = const_cast< ::ContainerMergedEventData*>(&::ContainerMergedEventData::default_instance());
  container_deleted_event_ = const_cast< ::ContainerDeletedEventData*>(&::ContainerDeletedEventData::default_instance());
  container_moved_event_ = const_cast< ::ContainerMoveEventData*>(&::ContainerMoveEventData::default_instance());
  container_commit_failed_event_ = const_cast< ::ContainerCommitFailedEventData*>(&::ContainerCommitFailedEventData::default_instance());
  volume_attached_event_ = const_cast< ::VolumeAttachedEventData*>(&::VolumeAttachedEventData::default_instance());
  volume_detached_event_ = const_cast< ::VolumeDetachedEventData*>(&::VolumeDetachedEventData::default_instance());
  block_mapping_written_event_ = const_cast< ::BlockMappingWrittenEventData*>(&::BlockMappingWrittenEventData::default_instance());
  block_mapping_write_failed_event_ = const_cast< ::BlockMappingWriteFailedEventData*>(&::BlockMappingWriteFailedEventData::default_instance());
  block_mapping_deleted_event_ = const_cast< ::BlockMappingDeletedEventData*>(&::BlockMappingDeletedEventData::default_instance());
  ophran_chunks_event_ = const_cast< ::OphranChunksEventData*>(&::OphranChunksEventData::default_instance());
  replay_start_event_ = const_cast< ::ReplayStartEventData*>(&::ReplayStartEventData::default_instance());
  replay_stop_event_ = const_cast< ::ReplayStopEventData*>(&::ReplayStopEventData::default_instance());
  system_start_event_ = const_cast< ::SystemStartEventData*>(&::SystemStartEventData::default_instance());
  message_data_ = const_cast< ::MessageData*>(&::MessageData::default_instance());
}

LogEventData::LogEventData(const LogEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEventData::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  container_opened_event_ = NULL;
  container_committed_event_ = NULL;
  container_merged_event_ = NULL;
  container_deleted_event_ = NULL;
  container_moved_event_ = NULL;
  container_commit_failed_event_ = NULL;
  volume_attached_event_ = NULL;
  volume_detached_event_ = NULL;
  block_mapping_written_event_ = NULL;
  block_mapping_write_failed_event_ = NULL;
  block_mapping_deleted_event_ = NULL;
  ophran_chunks_event_ = NULL;
  replay_start_event_ = NULL;
  replay_stop_event_ = NULL;
  system_start_event_ = NULL;
  message_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEventData::~LogEventData() {
  SharedDtor();
}

void LogEventData::SharedDtor() {
  if (this != default_instance_) {
    delete container_opened_event_;
    delete container_committed_event_;
    delete container_merged_event_;
    delete container_deleted_event_;
    delete container_moved_event_;
    delete container_commit_failed_event_;
    delete volume_attached_event_;
    delete volume_detached_event_;
    delete block_mapping_written_event_;
    delete block_mapping_write_failed_event_;
    delete block_mapping_deleted_event_;
    delete ophran_chunks_event_;
    delete replay_start_event_;
    delete replay_stop_event_;
    delete system_start_event_;
    delete message_data_;
  }
}

void LogEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEventData_descriptor_;
}

const LogEventData& LogEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

LogEventData* LogEventData::default_instance_ = NULL;

LogEventData* LogEventData::New() const {
  return new LogEventData;
}

void LogEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    if (has_container_opened_event()) {
      if (container_opened_event_ != NULL) container_opened_event_->::ContainerOpenedEventData::Clear();
    }
    if (has_container_committed_event()) {
      if (container_committed_event_ != NULL) container_committed_event_->::ContainerCommittedEventData::Clear();
    }
    if (has_container_merged_event()) {
      if (container_merged_event_ != NULL) container_merged_event_->::ContainerMergedEventData::Clear();
    }
    if (has_container_deleted_event()) {
      if (container_deleted_event_ != NULL) container_deleted_event_->::ContainerDeletedEventData::Clear();
    }
    if (has_container_moved_event()) {
      if (container_moved_event_ != NULL) container_moved_event_->::ContainerMoveEventData::Clear();
    }
    if (has_container_commit_failed_event()) {
      if (container_commit_failed_event_ != NULL) container_commit_failed_event_->::ContainerCommitFailedEventData::Clear();
    }
    if (has_volume_attached_event()) {
      if (volume_attached_event_ != NULL) volume_attached_event_->::VolumeAttachedEventData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_volume_detached_event()) {
      if (volume_detached_event_ != NULL) volume_detached_event_->::VolumeDetachedEventData::Clear();
    }
    if (has_block_mapping_written_event()) {
      if (block_mapping_written_event_ != NULL) block_mapping_written_event_->::BlockMappingWrittenEventData::Clear();
    }
    if (has_block_mapping_write_failed_event()) {
      if (block_mapping_write_failed_event_ != NULL) block_mapping_write_failed_event_->::BlockMappingWriteFailedEventData::Clear();
    }
    if (has_block_mapping_deleted_event()) {
      if (block_mapping_deleted_event_ != NULL) block_mapping_deleted_event_->::BlockMappingDeletedEventData::Clear();
    }
    if (has_ophran_chunks_event()) {
      if (ophran_chunks_event_ != NULL) ophran_chunks_event_->::OphranChunksEventData::Clear();
    }
    if (has_replay_start_event()) {
      if (replay_start_event_ != NULL) replay_start_event_->::ReplayStartEventData::Clear();
    }
    if (has_replay_stop_event()) {
      if (replay_stop_event_ != NULL) replay_stop_event_->::ReplayStopEventData::Clear();
    }
    if (has_system_start_event()) {
      if (system_start_event_ != NULL) system_start_event_->::SystemStartEventData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_message_data()) {
      if (message_data_ != NULL) message_data_->::MessageData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContainerOpenedEventData container_opened_event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_opened_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_committed_event;
        break;
      }

      // optional .ContainerCommittedEventData container_committed_event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_committed_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_committed_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_container_merged_event;
        break;
      }

      // optional .ContainerMergedEventData container_merged_event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_merged_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_merged_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_container_deleted_event;
        break;
      }

      // optional .ContainerDeletedEventData container_deleted_event = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_deleted_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_deleted_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_container_moved_event;
        break;
      }

      // optional .ContainerMoveEventData container_moved_event = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_moved_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_moved_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_container_commit_failed_event;
        break;
      }

      // optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_commit_failed_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_commit_failed_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_volume_attached_event;
        break;
      }

      // optional .VolumeAttachedEventData volume_attached_event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_attached_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volume_attached_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_volume_detached_event;
        break;
      }

      // optional .VolumeDetachedEventData volume_detached_event = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume_detached_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volume_detached_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_block_mapping_written_event;
        break;
      }

      // optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_mapping_written_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_mapping_written_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_block_mapping_write_failed_event;
        break;
      }

      // optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_mapping_write_failed_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_mapping_write_failed_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_block_mapping_deleted_event;
        break;
      }

      // optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_mapping_deleted_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_mapping_deleted_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ophran_chunks_event;
        break;
      }

      // optional .OphranChunksEventData ophran_chunks_event = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ophran_chunks_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ophran_chunks_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_replay_start_event;
        break;
      }

      // optional .ReplayStartEventData replay_start_event = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replay_start_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay_start_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_replay_stop_event;
        break;
      }

      // optional .ReplayStopEventData replay_stop_event = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replay_stop_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay_stop_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_system_start_event;
        break;
      }

      // optional .SystemStartEventData system_start_event = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_system_start_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_system_start_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(776)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(786)) goto parse_message_data;
        break;
      }

      // optional .MessageData message_data = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContainerOpenedEventData container_opened_event = 1;
  if (has_container_opened_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_opened_event(), output);
  }

  // optional .ContainerCommittedEventData container_committed_event = 2;
  if (has_container_committed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container_committed_event(), output);
  }

  // optional .ContainerMergedEventData container_merged_event = 3;
  if (has_container_merged_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->container_merged_event(), output);
  }

  // optional .ContainerDeletedEventData container_deleted_event = 4;
  if (has_container_deleted_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->container_deleted_event(), output);
  }

  // optional .ContainerMoveEventData container_moved_event = 5;
  if (has_container_moved_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->container_moved_event(), output);
  }

  // optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
  if (has_container_commit_failed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->container_commit_failed_event(), output);
  }

  // optional .VolumeAttachedEventData volume_attached_event = 7;
  if (has_volume_attached_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->volume_attached_event(), output);
  }

  // optional .VolumeDetachedEventData volume_detached_event = 8;
  if (has_volume_detached_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->volume_detached_event(), output);
  }

  // optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
  if (has_block_mapping_written_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->block_mapping_written_event(), output);
  }

  // optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
  if (has_block_mapping_write_failed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->block_mapping_write_failed_event(), output);
  }

  // optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
  if (has_block_mapping_deleted_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->block_mapping_deleted_event(), output);
  }

  // optional .OphranChunksEventData ophran_chunks_event = 12;
  if (has_ophran_chunks_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->ophran_chunks_event(), output);
  }

  // optional .ReplayStartEventData replay_start_event = 13;
  if (has_replay_start_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->replay_start_event(), output);
  }

  // optional .ReplayStopEventData replay_stop_event = 14;
  if (has_replay_stop_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->replay_stop_event(), output);
  }

  // optional .SystemStartEventData system_start_event = 15;
  if (has_system_start_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->system_start_event(), output);
  }

  // optional int32 event_type = 97;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(97, this->event_type(), output);
  }

  // optional .MessageData message_data = 98;
  if (has_message_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98, this->message_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContainerOpenedEventData container_opened_event = 1;
  if (has_container_opened_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_opened_event(), target);
  }

  // optional .ContainerCommittedEventData container_committed_event = 2;
  if (has_container_committed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container_committed_event(), target);
  }

  // optional .ContainerMergedEventData container_merged_event = 3;
  if (has_container_merged_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->container_merged_event(), target);
  }

  // optional .ContainerDeletedEventData container_deleted_event = 4;
  if (has_container_deleted_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->container_deleted_event(), target);
  }

  // optional .ContainerMoveEventData container_moved_event = 5;
  if (has_container_moved_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->container_moved_event(), target);
  }

  // optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
  if (has_container_commit_failed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->container_commit_failed_event(), target);
  }

  // optional .VolumeAttachedEventData volume_attached_event = 7;
  if (has_volume_attached_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->volume_attached_event(), target);
  }

  // optional .VolumeDetachedEventData volume_detached_event = 8;
  if (has_volume_detached_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->volume_detached_event(), target);
  }

  // optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
  if (has_block_mapping_written_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->block_mapping_written_event(), target);
  }

  // optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
  if (has_block_mapping_write_failed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->block_mapping_write_failed_event(), target);
  }

  // optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
  if (has_block_mapping_deleted_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->block_mapping_deleted_event(), target);
  }

  // optional .OphranChunksEventData ophran_chunks_event = 12;
  if (has_ophran_chunks_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->ophran_chunks_event(), target);
  }

  // optional .ReplayStartEventData replay_start_event = 13;
  if (has_replay_start_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->replay_start_event(), target);
  }

  // optional .ReplayStopEventData replay_stop_event = 14;
  if (has_replay_stop_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->replay_stop_event(), target);
  }

  // optional .SystemStartEventData system_start_event = 15;
  if (has_system_start_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->system_start_event(), target);
  }

  // optional int32 event_type = 97;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(97, this->event_type(), target);
  }

  // optional .MessageData message_data = 98;
  if (has_message_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, this->message_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_type = 97;
    if (has_event_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional .ContainerOpenedEventData container_opened_event = 1;
    if (has_container_opened_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_opened_event());
    }

    // optional .ContainerCommittedEventData container_committed_event = 2;
    if (has_container_committed_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_committed_event());
    }

    // optional .ContainerMergedEventData container_merged_event = 3;
    if (has_container_merged_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_merged_event());
    }

    // optional .ContainerDeletedEventData container_deleted_event = 4;
    if (has_container_deleted_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_deleted_event());
    }

    // optional .ContainerMoveEventData container_moved_event = 5;
    if (has_container_moved_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_moved_event());
    }

    // optional .ContainerCommitFailedEventData container_commit_failed_event = 6;
    if (has_container_commit_failed_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_commit_failed_event());
    }

    // optional .VolumeAttachedEventData volume_attached_event = 7;
    if (has_volume_attached_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_attached_event());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .VolumeDetachedEventData volume_detached_event = 8;
    if (has_volume_detached_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_detached_event());
    }

    // optional .BlockMappingWrittenEventData block_mapping_written_event = 9;
    if (has_block_mapping_written_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_mapping_written_event());
    }

    // optional .BlockMappingWriteFailedEventData block_mapping_write_failed_event = 10;
    if (has_block_mapping_write_failed_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_mapping_write_failed_event());
    }

    // optional .BlockMappingDeletedEventData block_mapping_deleted_event = 11;
    if (has_block_mapping_deleted_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_mapping_deleted_event());
    }

    // optional .OphranChunksEventData ophran_chunks_event = 12;
    if (has_ophran_chunks_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ophran_chunks_event());
    }

    // optional .ReplayStartEventData replay_start_event = 13;
    if (has_replay_start_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replay_start_event());
    }

    // optional .ReplayStopEventData replay_stop_event = 14;
    if (has_replay_stop_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replay_stop_event());
    }

    // optional .SystemStartEventData system_start_event = 15;
    if (has_system_start_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->system_start_event());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MessageData message_data = 98;
    if (has_message_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEventData::MergeFrom(const LogEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_container_opened_event()) {
      mutable_container_opened_event()->::ContainerOpenedEventData::MergeFrom(from.container_opened_event());
    }
    if (from.has_container_committed_event()) {
      mutable_container_committed_event()->::ContainerCommittedEventData::MergeFrom(from.container_committed_event());
    }
    if (from.has_container_merged_event()) {
      mutable_container_merged_event()->::ContainerMergedEventData::MergeFrom(from.container_merged_event());
    }
    if (from.has_container_deleted_event()) {
      mutable_container_deleted_event()->::ContainerDeletedEventData::MergeFrom(from.container_deleted_event());
    }
    if (from.has_container_moved_event()) {
      mutable_container_moved_event()->::ContainerMoveEventData::MergeFrom(from.container_moved_event());
    }
    if (from.has_container_commit_failed_event()) {
      mutable_container_commit_failed_event()->::ContainerCommitFailedEventData::MergeFrom(from.container_commit_failed_event());
    }
    if (from.has_volume_attached_event()) {
      mutable_volume_attached_event()->::VolumeAttachedEventData::MergeFrom(from.volume_attached_event());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_volume_detached_event()) {
      mutable_volume_detached_event()->::VolumeDetachedEventData::MergeFrom(from.volume_detached_event());
    }
    if (from.has_block_mapping_written_event()) {
      mutable_block_mapping_written_event()->::BlockMappingWrittenEventData::MergeFrom(from.block_mapping_written_event());
    }
    if (from.has_block_mapping_write_failed_event()) {
      mutable_block_mapping_write_failed_event()->::BlockMappingWriteFailedEventData::MergeFrom(from.block_mapping_write_failed_event());
    }
    if (from.has_block_mapping_deleted_event()) {
      mutable_block_mapping_deleted_event()->::BlockMappingDeletedEventData::MergeFrom(from.block_mapping_deleted_event());
    }
    if (from.has_ophran_chunks_event()) {
      mutable_ophran_chunks_event()->::OphranChunksEventData::MergeFrom(from.ophran_chunks_event());
    }
    if (from.has_replay_start_event()) {
      mutable_replay_start_event()->::ReplayStartEventData::MergeFrom(from.replay_start_event());
    }
    if (from.has_replay_stop_event()) {
      mutable_replay_stop_event()->::ReplayStopEventData::MergeFrom(from.replay_stop_event());
    }
    if (from.has_system_start_event()) {
      mutable_system_start_event()->::SystemStartEventData::MergeFrom(from.system_start_event());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_message_data()) {
      mutable_message_data()->::MessageData::MergeFrom(from.message_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEventData::CopyFrom(const LogEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEventData::IsInitialized() const {

  if (has_container_opened_event()) {
    if (!this->container_opened_event().IsInitialized()) return false;
  }
  if (has_container_committed_event()) {
    if (!this->container_committed_event().IsInitialized()) return false;
  }
  if (has_container_merged_event()) {
    if (!this->container_merged_event().IsInitialized()) return false;
  }
  if (has_container_deleted_event()) {
    if (!this->container_deleted_event().IsInitialized()) return false;
  }
  if (has_container_moved_event()) {
    if (!this->container_moved_event().IsInitialized()) return false;
  }
  if (has_container_commit_failed_event()) {
    if (!this->container_commit_failed_event().IsInitialized()) return false;
  }
  if (has_volume_attached_event()) {
    if (!this->volume_attached_event().IsInitialized()) return false;
  }
  if (has_volume_detached_event()) {
    if (!this->volume_detached_event().IsInitialized()) return false;
  }
  if (has_block_mapping_written_event()) {
    if (!this->block_mapping_written_event().IsInitialized()) return false;
  }
  if (has_block_mapping_write_failed_event()) {
    if (!this->block_mapping_write_failed_event().IsInitialized()) return false;
  }
  if (has_block_mapping_deleted_event()) {
    if (!this->block_mapping_deleted_event().IsInitialized()) return false;
  }
  return true;
}

void LogEventData::Swap(LogEventData* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(container_opened_event_, other->container_opened_event_);
    std::swap(container_committed_event_, other->container_committed_event_);
    std::swap(container_merged_event_, other->container_merged_event_);
    std::swap(container_deleted_event_, other->container_deleted_event_);
    std::swap(container_moved_event_, other->container_moved_event_);
    std::swap(container_commit_failed_event_, other->container_commit_failed_event_);
    std::swap(volume_attached_event_, other->volume_attached_event_);
    std::swap(volume_detached_event_, other->volume_detached_event_);
    std::swap(block_mapping_written_event_, other->block_mapping_written_event_);
    std::swap(block_mapping_write_failed_event_, other->block_mapping_write_failed_event_);
    std::swap(block_mapping_deleted_event_, other->block_mapping_deleted_event_);
    std::swap(ophran_chunks_event_, other->ophran_chunks_event_);
    std::swap(replay_start_event_, other->replay_start_event_);
    std::swap(replay_stop_event_, other->replay_stop_event_);
    std::swap(system_start_event_, other->system_start_event_);
    std::swap(message_data_, other->message_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEventData_descriptor_;
  metadata.reflection = LogEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogEntryData::kLogIdFieldNumber;
const int LogEntryData::kValueFieldNumber;
const int LogEntryData::kPartialIndexFieldNumber;
const int LogEntryData::kPartialCountFieldNumber;
const int LogEntryData::kLastFullyWrittenLogIdFieldNumber;
#endif  // !_MSC_VER

LogEntryData::LogEntryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogEntryData::InitAsDefaultInstance() {
}

LogEntryData::LogEntryData(const LogEntryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogEntryData::SharedCtor() {
  _cached_size_ = 0;
  log_id_ = GOOGLE_LONGLONG(0);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partial_index_ = 0u;
  partial_count_ = 0u;
  last_fully_written_log_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEntryData::~LogEntryData() {
  SharedDtor();
}

void LogEntryData::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void LogEntryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEntryData_descriptor_;
}

const LogEntryData& LogEntryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

LogEntryData* LogEntryData::default_instance_ = NULL;

LogEntryData* LogEntryData::New() const {
  return new LogEntryData;
}

void LogEntryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_id_ = GOOGLE_LONGLONG(0);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    partial_index_ = 0u;
    partial_count_ = 0u;
    last_fully_written_log_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEntryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_partial_index;
        break;
      }

      // optional uint32 partial_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_index_)));
          set_has_partial_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_partial_count;
        break;
      }

      // optional uint32 partial_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partial_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partial_count_)));
          set_has_partial_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_log_id;
        break;
      }

      // optional int64 log_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_fully_written_log_id;
        break;
      }

      // optional int64 last_fully_written_log_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fully_written_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_fully_written_log_id_)));
          set_has_last_fully_written_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogEntryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->value(), output);
  }

  // optional uint32 partial_index = 5;
  if (has_partial_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->partial_index(), output);
  }

  // optional uint32 partial_count = 6;
  if (has_partial_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->partial_count(), output);
  }

  // optional int64 log_id = 7;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->log_id(), output);
  }

  // optional int64 last_fully_written_log_id = 8;
  if (has_last_fully_written_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->last_fully_written_log_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogEntryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional uint32 partial_index = 5;
  if (has_partial_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->partial_index(), target);
  }

  // optional uint32 partial_count = 6;
  if (has_partial_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->partial_count(), target);
  }

  // optional int64 log_id = 7;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->log_id(), target);
  }

  // optional int64 last_fully_written_log_id = 8;
  if (has_last_fully_written_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->last_fully_written_log_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogEntryData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 log_id = 7;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint32 partial_index = 5;
    if (has_partial_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_index());
    }

    // optional uint32 partial_count = 6;
    if (has_partial_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partial_count());
    }

    // optional int64 last_fully_written_log_id = 8;
    if (has_last_fully_written_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_fully_written_log_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEntryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEntryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEntryData::MergeFrom(const LogEntryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_partial_index()) {
      set_partial_index(from.partial_index());
    }
    if (from.has_partial_count()) {
      set_partial_count(from.partial_count());
    }
    if (from.has_last_fully_written_log_id()) {
      set_last_fully_written_log_id(from.last_fully_written_log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEntryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryData::CopyFrom(const LogEntryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryData::IsInitialized() const {

  return true;
}

void LogEntryData::Swap(LogEntryData* other) {
  if (other != this) {
    std::swap(log_id_, other->log_id_);
    std::swap(value_, other->value_);
    std::swap(partial_index_, other->partial_index_);
    std::swap(partial_count_, other->partial_count_);
    std::swap(last_fully_written_log_id_, other->last_fully_written_log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEntryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEntryData_descriptor_;
  metadata.reflection = LogEntryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerOpenedEventData::kContainerIdFieldNumber;
const int ContainerOpenedEventData::kAddressFieldNumber;
#endif  // !_MSC_VER

ContainerOpenedEventData::ContainerOpenedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerOpenedEventData::InitAsDefaultInstance() {
  address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
}

ContainerOpenedEventData::ContainerOpenedEventData(const ContainerOpenedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerOpenedEventData::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = GOOGLE_ULONGLONG(0);
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerOpenedEventData::~ContainerOpenedEventData() {
  SharedDtor();
}

void ContainerOpenedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
  }
}

void ContainerOpenedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerOpenedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerOpenedEventData_descriptor_;
}

const ContainerOpenedEventData& ContainerOpenedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerOpenedEventData* ContainerOpenedEventData::default_instance_ = NULL;

ContainerOpenedEventData* ContainerOpenedEventData::New() const {
  return new ContainerOpenedEventData;
}

void ContainerOpenedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerOpenedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_id_)));
          set_has_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional .ContainerStorageAddressData address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerOpenedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->container_id(), output);
  }

  // optional .ContainerStorageAddressData address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerOpenedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->container_id(), target);
  }

  // optional .ContainerStorageAddressData address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerOpenedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_id());
    }

    // optional .ContainerStorageAddressData address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerOpenedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerOpenedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerOpenedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerOpenedEventData::MergeFrom(const ContainerOpenedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_address()) {
      mutable_address()->::ContainerStorageAddressData::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerOpenedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerOpenedEventData::CopyFrom(const ContainerOpenedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerOpenedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerOpenedEventData::Swap(ContainerOpenedEventData* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerOpenedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerOpenedEventData_descriptor_;
  metadata.reflection = ContainerOpenedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerCommittedEventData::kContainerIdFieldNumber;
const int ContainerCommittedEventData::kAddressFieldNumber;
const int ContainerCommittedEventData::kItemCountFieldNumber;
const int ContainerCommittedEventData::kActiveDataSizeFieldNumber;
#endif  // !_MSC_VER

ContainerCommittedEventData::ContainerCommittedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerCommittedEventData::InitAsDefaultInstance() {
  address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
}

ContainerCommittedEventData::ContainerCommittedEventData(const ContainerCommittedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerCommittedEventData::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = GOOGLE_ULONGLONG(0);
  address_ = NULL;
  item_count_ = 0u;
  active_data_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerCommittedEventData::~ContainerCommittedEventData() {
  SharedDtor();
}

void ContainerCommittedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
  }
}

void ContainerCommittedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerCommittedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerCommittedEventData_descriptor_;
}

const ContainerCommittedEventData& ContainerCommittedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerCommittedEventData* ContainerCommittedEventData::default_instance_ = NULL;

ContainerCommittedEventData* ContainerCommittedEventData::New() const {
  return new ContainerCommittedEventData;
}

void ContainerCommittedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
    }
    item_count_ = 0u;
    active_data_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerCommittedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_id_)));
          set_has_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_address;
        break;
      }

      // optional .ContainerStorageAddressData address = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_active_data_size;
        break;
      }

      // optional uint32 active_data_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_data_size_)));
          set_has_active_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerCommittedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->container_id(), output);
  }

  // optional .ContainerStorageAddressData address = 4;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->address(), output);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_count(), output);
  }

  // optional uint32 active_data_size = 6;
  if (has_active_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->active_data_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerCommittedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->container_id(), target);
  }

  // optional .ContainerStorageAddressData address = 4;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->address(), target);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_count(), target);
  }

  // optional uint32 active_data_size = 6;
  if (has_active_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->active_data_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerCommittedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_id());
    }

    // optional .ContainerStorageAddressData address = 4;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional uint32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 active_data_size = 6;
    if (has_active_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_data_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerCommittedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerCommittedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerCommittedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerCommittedEventData::MergeFrom(const ContainerCommittedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_address()) {
      mutable_address()->::ContainerStorageAddressData::MergeFrom(from.address());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_active_data_size()) {
      set_active_data_size(from.active_data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerCommittedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerCommittedEventData::CopyFrom(const ContainerCommittedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerCommittedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerCommittedEventData::Swap(ContainerCommittedEventData* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(address_, other->address_);
    std::swap(item_count_, other->item_count_);
    std::swap(active_data_size_, other->active_data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerCommittedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerCommittedEventData_descriptor_;
  metadata.reflection = ContainerCommittedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerMergedEventData::kFirstIdFieldNumber;
const int ContainerMergedEventData::kSecondIdFieldNumber;
const int ContainerMergedEventData::kFirstSecondaryIdFieldNumber;
const int ContainerMergedEventData::kSecondSecondaryIdFieldNumber;
const int ContainerMergedEventData::kFirstAddressFieldNumber;
const int ContainerMergedEventData::kSecondAddressFieldNumber;
const int ContainerMergedEventData::kNewAddressFieldNumber;
const int ContainerMergedEventData::kNewPrimaryIdFieldNumber;
const int ContainerMergedEventData::kNewSecondaryIdFieldNumber;
const int ContainerMergedEventData::kUnusedIdsFieldNumber;
const int ContainerMergedEventData::kNewItemCountFieldNumber;
const int ContainerMergedEventData::kNewActiveDataSizeFieldNumber;
#endif  // !_MSC_VER

ContainerMergedEventData::ContainerMergedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerMergedEventData::InitAsDefaultInstance() {
  first_address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
  second_address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
  new_address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
}

ContainerMergedEventData::ContainerMergedEventData(const ContainerMergedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerMergedEventData::SharedCtor() {
  _cached_size_ = 0;
  first_id_ = GOOGLE_ULONGLONG(0);
  second_id_ = GOOGLE_ULONGLONG(0);
  first_address_ = NULL;
  second_address_ = NULL;
  new_address_ = NULL;
  new_primary_id_ = GOOGLE_ULONGLONG(0);
  new_item_count_ = 0u;
  new_active_data_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerMergedEventData::~ContainerMergedEventData() {
  SharedDtor();
}

void ContainerMergedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete first_address_;
    delete second_address_;
    delete new_address_;
  }
}

void ContainerMergedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerMergedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerMergedEventData_descriptor_;
}

const ContainerMergedEventData& ContainerMergedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerMergedEventData* ContainerMergedEventData::default_instance_ = NULL;

ContainerMergedEventData* ContainerMergedEventData::New() const {
  return new ContainerMergedEventData;
}

void ContainerMergedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_id_ = GOOGLE_ULONGLONG(0);
    second_id_ = GOOGLE_ULONGLONG(0);
    if (has_first_address()) {
      if (first_address_ != NULL) first_address_->::ContainerStorageAddressData::Clear();
    }
    if (has_second_address()) {
      if (second_address_ != NULL) second_address_->::ContainerStorageAddressData::Clear();
    }
    if (has_new_address()) {
      if (new_address_ != NULL) new_address_->::ContainerStorageAddressData::Clear();
    }
    new_primary_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    new_item_count_ = 0u;
    new_active_data_size_ = 0u;
  }
  first_secondary_id_.Clear();
  second_secondary_id_.Clear();
  new_secondary_id_.Clear();
  unused_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerMergedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 first_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_id_)));
          set_has_first_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_second_id;
        break;
      }

      // required uint64 second_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &second_id_)));
          set_has_second_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_first_secondary_id;
        break;
      }

      // repeated uint64 first_secondary_id = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_secondary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_first_secondary_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_first_secondary_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_second_secondary_id;
        break;
      }

      // repeated uint64 second_secondary_id = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second_secondary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_second_secondary_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 34, input, this->mutable_second_secondary_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_new_secondary_id;
        break;
      }

      // repeated uint64 new_secondary_id = 11 [packed = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_secondary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_secondary_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 90, input, this->mutable_new_secondary_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_unused_ids;
        break;
      }

      // repeated uint64 unused_ids = 12 [packed = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unused_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unused_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 98, input, this->mutable_unused_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_first_address;
        break;
      }

      // optional .ContainerStorageAddressData first_address = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_first_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_second_address;
        break;
      }

      // optional .ContainerStorageAddressData second_address = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_second_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_new_address;
        break;
      }

      // optional .ContainerStorageAddressData new_address = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_new_item_count;
        break;
      }

      // optional uint32 new_item_count = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_item_count_)));
          set_has_new_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_new_active_data_size;
        break;
      }

      // optional uint32 new_active_data_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_active_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_active_data_size_)));
          set_has_new_active_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_new_primary_id;
        break;
      }

      // optional uint64 new_primary_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_primary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_primary_id_)));
          set_has_new_primary_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerMergedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 first_id = 1;
  if (has_first_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->first_id(), output);
  }

  // required uint64 second_id = 2;
  if (has_second_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->second_id(), output);
  }

  // repeated uint64 first_secondary_id = 3 [packed = true];
  if (this->first_secondary_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_first_secondary_id_cached_byte_size_);
  }
  for (int i = 0; i < this->first_secondary_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->first_secondary_id(i), output);
  }

  // repeated uint64 second_secondary_id = 4 [packed = true];
  if (this->second_secondary_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_second_secondary_id_cached_byte_size_);
  }
  for (int i = 0; i < this->second_secondary_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->second_secondary_id(i), output);
  }

  // repeated uint64 new_secondary_id = 11 [packed = true];
  if (this->new_secondary_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_secondary_id_cached_byte_size_);
  }
  for (int i = 0; i < this->new_secondary_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_secondary_id(i), output);
  }

  // repeated uint64 unused_ids = 12 [packed = true];
  if (this->unused_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_unused_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->unused_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->unused_ids(i), output);
  }

  // optional .ContainerStorageAddressData first_address = 13;
  if (has_first_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->first_address(), output);
  }

  // optional .ContainerStorageAddressData second_address = 14;
  if (has_second_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->second_address(), output);
  }

  // optional .ContainerStorageAddressData new_address = 15;
  if (has_new_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->new_address(), output);
  }

  // optional uint32 new_item_count = 16;
  if (has_new_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->new_item_count(), output);
  }

  // optional uint32 new_active_data_size = 17;
  if (has_new_active_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->new_active_data_size(), output);
  }

  // optional uint64 new_primary_id = 18;
  if (has_new_primary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->new_primary_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerMergedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 first_id = 1;
  if (has_first_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->first_id(), target);
  }

  // required uint64 second_id = 2;
  if (has_second_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->second_id(), target);
  }

  // repeated uint64 first_secondary_id = 3 [packed = true];
  if (this->first_secondary_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _first_secondary_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->first_secondary_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->first_secondary_id(i), target);
  }

  // repeated uint64 second_secondary_id = 4 [packed = true];
  if (this->second_secondary_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _second_secondary_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->second_secondary_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->second_secondary_id(i), target);
  }

  // repeated uint64 new_secondary_id = 11 [packed = true];
  if (this->new_secondary_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_secondary_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_secondary_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_secondary_id(i), target);
  }

  // repeated uint64 unused_ids = 12 [packed = true];
  if (this->unused_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _unused_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->unused_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->unused_ids(i), target);
  }

  // optional .ContainerStorageAddressData first_address = 13;
  if (has_first_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->first_address(), target);
  }

  // optional .ContainerStorageAddressData second_address = 14;
  if (has_second_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->second_address(), target);
  }

  // optional .ContainerStorageAddressData new_address = 15;
  if (has_new_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->new_address(), target);
  }

  // optional uint32 new_item_count = 16;
  if (has_new_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->new_item_count(), target);
  }

  // optional uint32 new_active_data_size = 17;
  if (has_new_active_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->new_active_data_size(), target);
  }

  // optional uint64 new_primary_id = 18;
  if (has_new_primary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->new_primary_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerMergedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 first_id = 1;
    if (has_first_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->first_id());
    }

    // required uint64 second_id = 2;
    if (has_second_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->second_id());
    }

    // optional .ContainerStorageAddressData first_address = 13;
    if (has_first_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_address());
    }

    // optional .ContainerStorageAddressData second_address = 14;
    if (has_second_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->second_address());
    }

    // optional .ContainerStorageAddressData new_address = 15;
    if (has_new_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_address());
    }

    // optional uint64 new_primary_id = 18;
    if (has_new_primary_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->new_primary_id());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 new_item_count = 16;
    if (has_new_item_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_item_count());
    }

    // optional uint32 new_active_data_size = 17;
    if (has_new_active_data_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_active_data_size());
    }

  }
  // repeated uint64 first_secondary_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->first_secondary_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->first_secondary_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _first_secondary_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 second_secondary_id = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->second_secondary_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->second_secondary_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _second_secondary_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 new_secondary_id = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->new_secondary_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_secondary_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_secondary_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint64 unused_ids = 12 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->unused_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unused_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unused_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerMergedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerMergedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerMergedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerMergedEventData::MergeFrom(const ContainerMergedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_secondary_id_.MergeFrom(from.first_secondary_id_);
  second_secondary_id_.MergeFrom(from.second_secondary_id_);
  new_secondary_id_.MergeFrom(from.new_secondary_id_);
  unused_ids_.MergeFrom(from.unused_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_id()) {
      set_first_id(from.first_id());
    }
    if (from.has_second_id()) {
      set_second_id(from.second_id());
    }
    if (from.has_first_address()) {
      mutable_first_address()->::ContainerStorageAddressData::MergeFrom(from.first_address());
    }
    if (from.has_second_address()) {
      mutable_second_address()->::ContainerStorageAddressData::MergeFrom(from.second_address());
    }
    if (from.has_new_address()) {
      mutable_new_address()->::ContainerStorageAddressData::MergeFrom(from.new_address());
    }
    if (from.has_new_primary_id()) {
      set_new_primary_id(from.new_primary_id());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_new_item_count()) {
      set_new_item_count(from.new_item_count());
    }
    if (from.has_new_active_data_size()) {
      set_new_active_data_size(from.new_active_data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerMergedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerMergedEventData::CopyFrom(const ContainerMergedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerMergedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContainerMergedEventData::Swap(ContainerMergedEventData* other) {
  if (other != this) {
    std::swap(first_id_, other->first_id_);
    std::swap(second_id_, other->second_id_);
    first_secondary_id_.Swap(&other->first_secondary_id_);
    second_secondary_id_.Swap(&other->second_secondary_id_);
    std::swap(first_address_, other->first_address_);
    std::swap(second_address_, other->second_address_);
    std::swap(new_address_, other->new_address_);
    std::swap(new_primary_id_, other->new_primary_id_);
    new_secondary_id_.Swap(&other->new_secondary_id_);
    unused_ids_.Swap(&other->unused_ids_);
    std::swap(new_item_count_, other->new_item_count_);
    std::swap(new_active_data_size_, other->new_active_data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerMergedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerMergedEventData_descriptor_;
  metadata.reflection = ContainerMergedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerDeletedEventData::kContainerIdFieldNumber;
const int ContainerDeletedEventData::kSecondaryContainerIdFieldNumber;
const int ContainerDeletedEventData::kAddressFieldNumber;
const int ContainerDeletedEventData::kFileOffsetFieldNumber;
#endif  // !_MSC_VER

ContainerDeletedEventData::ContainerDeletedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerDeletedEventData::InitAsDefaultInstance() {
  address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
}

ContainerDeletedEventData::ContainerDeletedEventData(const ContainerDeletedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerDeletedEventData::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = GOOGLE_ULONGLONG(0);
  address_ = NULL;
  file_offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerDeletedEventData::~ContainerDeletedEventData() {
  SharedDtor();
}

void ContainerDeletedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete address_;
  }
}

void ContainerDeletedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerDeletedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerDeletedEventData_descriptor_;
}

const ContainerDeletedEventData& ContainerDeletedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerDeletedEventData* ContainerDeletedEventData::default_instance_ = NULL;

ContainerDeletedEventData* ContainerDeletedEventData::New() const {
  return new ContainerDeletedEventData;
}

void ContainerDeletedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_id_ = GOOGLE_ULONGLONG(0);
    if (has_address()) {
      if (address_ != NULL) address_->::ContainerStorageAddressData::Clear();
    }
    file_offset_ = GOOGLE_ULONGLONG(0);
  }
  secondary_container_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerDeletedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_id_)));
          set_has_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secondary_container_id;
        break;
      }

      // repeated uint64 secondary_container_id = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondary_container_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_secondary_container_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_secondary_container_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_file_offset;
        break;
      }

      // optional uint64 file_offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_offset_)));
          set_has_file_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional .ContainerStorageAddressData address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerDeletedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->container_id(), output);
  }

  // repeated uint64 secondary_container_id = 2 [packed = true];
  if (this->secondary_container_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_secondary_container_id_cached_byte_size_);
  }
  for (int i = 0; i < this->secondary_container_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->secondary_container_id(i), output);
  }

  // optional uint64 file_offset = 4;
  if (has_file_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->file_offset(), output);
  }

  // optional .ContainerStorageAddressData address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerDeletedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->container_id(), target);
  }

  // repeated uint64 secondary_container_id = 2 [packed = true];
  if (this->secondary_container_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _secondary_container_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->secondary_container_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->secondary_container_id(i), target);
  }

  // optional uint64 file_offset = 4;
  if (has_file_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->file_offset(), target);
  }

  // optional .ContainerStorageAddressData address = 5;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerDeletedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_id());
    }

    // optional .ContainerStorageAddressData address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional uint64 file_offset = 4;
    if (has_file_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_offset());
    }

  }
  // repeated uint64 secondary_container_id = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->secondary_container_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->secondary_container_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _secondary_container_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerDeletedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerDeletedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerDeletedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerDeletedEventData::MergeFrom(const ContainerDeletedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  secondary_container_id_.MergeFrom(from.secondary_container_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_address()) {
      mutable_address()->::ContainerStorageAddressData::MergeFrom(from.address());
    }
    if (from.has_file_offset()) {
      set_file_offset(from.file_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerDeletedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerDeletedEventData::CopyFrom(const ContainerDeletedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerDeletedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerDeletedEventData::Swap(ContainerDeletedEventData* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    secondary_container_id_.Swap(&other->secondary_container_id_);
    std::swap(address_, other->address_);
    std::swap(file_offset_, other->file_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerDeletedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerDeletedEventData_descriptor_;
  metadata.reflection = ContainerDeletedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerMoveEventData::kContainerIdFieldNumber;
const int ContainerMoveEventData::kOldAddressFieldNumber;
const int ContainerMoveEventData::kNewAddressFieldNumber;
const int ContainerMoveEventData::kActiveDataSizeFieldNumber;
const int ContainerMoveEventData::kOldActiveDataSizeFieldNumber;
const int ContainerMoveEventData::kItemCountFieldNumber;
const int ContainerMoveEventData::kOldItemCountFieldNumber;
#endif  // !_MSC_VER

ContainerMoveEventData::ContainerMoveEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerMoveEventData::InitAsDefaultInstance() {
  old_address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
  new_address_ = const_cast< ::ContainerStorageAddressData*>(&::ContainerStorageAddressData::default_instance());
}

ContainerMoveEventData::ContainerMoveEventData(const ContainerMoveEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerMoveEventData::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = GOOGLE_ULONGLONG(0);
  old_address_ = NULL;
  new_address_ = NULL;
  active_data_size_ = GOOGLE_ULONGLONG(0);
  old_active_data_size_ = GOOGLE_ULONGLONG(0);
  item_count_ = 0u;
  old_item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerMoveEventData::~ContainerMoveEventData() {
  SharedDtor();
}

void ContainerMoveEventData::SharedDtor() {
  if (this != default_instance_) {
    delete old_address_;
    delete new_address_;
  }
}

void ContainerMoveEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerMoveEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerMoveEventData_descriptor_;
}

const ContainerMoveEventData& ContainerMoveEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerMoveEventData* ContainerMoveEventData::default_instance_ = NULL;

ContainerMoveEventData* ContainerMoveEventData::New() const {
  return new ContainerMoveEventData;
}

void ContainerMoveEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_id_ = GOOGLE_ULONGLONG(0);
    if (has_old_address()) {
      if (old_address_ != NULL) old_address_->::ContainerStorageAddressData::Clear();
    }
    if (has_new_address()) {
      if (new_address_ != NULL) new_address_->::ContainerStorageAddressData::Clear();
    }
    active_data_size_ = GOOGLE_ULONGLONG(0);
    old_active_data_size_ = GOOGLE_ULONGLONG(0);
    item_count_ = 0u;
    old_item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerMoveEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_id_)));
          set_has_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_old_address;
        break;
      }

      // optional .ContainerStorageAddressData old_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_address;
        break;
      }

      // optional .ContainerStorageAddressData new_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_active_data_size;
        break;
      }

      // optional uint64 active_data_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_data_size_)));
          set_has_active_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_old_active_data_size;
        break;
      }

      // optional uint64 old_active_data_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_active_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_active_data_size_)));
          set_has_old_active_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_old_item_count;
        break;
      }

      // optional uint32 old_item_count = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_item_count_)));
          set_has_old_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerMoveEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->container_id(), output);
  }

  // optional .ContainerStorageAddressData old_address = 6;
  if (has_old_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->old_address(), output);
  }

  // optional .ContainerStorageAddressData new_address = 7;
  if (has_new_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->new_address(), output);
  }

  // optional uint64 active_data_size = 8;
  if (has_active_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->active_data_size(), output);
  }

  // optional uint64 old_active_data_size = 9;
  if (has_old_active_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->old_active_data_size(), output);
  }

  // optional uint32 item_count = 10;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->item_count(), output);
  }

  // optional uint32 old_item_count = 11;
  if (has_old_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->old_item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerMoveEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->container_id(), target);
  }

  // optional .ContainerStorageAddressData old_address = 6;
  if (has_old_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->old_address(), target);
  }

  // optional .ContainerStorageAddressData new_address = 7;
  if (has_new_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->new_address(), target);
  }

  // optional uint64 active_data_size = 8;
  if (has_active_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->active_data_size(), target);
  }

  // optional uint64 old_active_data_size = 9;
  if (has_old_active_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->old_active_data_size(), target);
  }

  // optional uint32 item_count = 10;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->item_count(), target);
  }

  // optional uint32 old_item_count = 11;
  if (has_old_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->old_item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerMoveEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_id());
    }

    // optional .ContainerStorageAddressData old_address = 6;
    if (has_old_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->old_address());
    }

    // optional .ContainerStorageAddressData new_address = 7;
    if (has_new_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_address());
    }

    // optional uint64 active_data_size = 8;
    if (has_active_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_data_size());
    }

    // optional uint64 old_active_data_size = 9;
    if (has_old_active_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_active_data_size());
    }

    // optional uint32 item_count = 10;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

    // optional uint32 old_item_count = 11;
    if (has_old_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerMoveEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerMoveEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerMoveEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerMoveEventData::MergeFrom(const ContainerMoveEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
    if (from.has_old_address()) {
      mutable_old_address()->::ContainerStorageAddressData::MergeFrom(from.old_address());
    }
    if (from.has_new_address()) {
      mutable_new_address()->::ContainerStorageAddressData::MergeFrom(from.new_address());
    }
    if (from.has_active_data_size()) {
      set_active_data_size(from.active_data_size());
    }
    if (from.has_old_active_data_size()) {
      set_old_active_data_size(from.old_active_data_size());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_old_item_count()) {
      set_old_item_count(from.old_item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerMoveEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerMoveEventData::CopyFrom(const ContainerMoveEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerMoveEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerMoveEventData::Swap(ContainerMoveEventData* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(old_address_, other->old_address_);
    std::swap(new_address_, other->new_address_);
    std::swap(active_data_size_, other->active_data_size_);
    std::swap(old_active_data_size_, other->old_active_data_size_);
    std::swap(item_count_, other->item_count_);
    std::swap(old_item_count_, other->old_item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerMoveEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerMoveEventData_descriptor_;
  metadata.reflection = ContainerMoveEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerCommitFailedEventData::kContainerIdFieldNumber;
const int ContainerCommitFailedEventData::kItemKeyFieldNumber;
#endif  // !_MSC_VER

ContainerCommitFailedEventData::ContainerCommitFailedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerCommitFailedEventData::InitAsDefaultInstance() {
}

ContainerCommitFailedEventData::ContainerCommitFailedEventData(const ContainerCommitFailedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerCommitFailedEventData::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerCommitFailedEventData::~ContainerCommitFailedEventData() {
  SharedDtor();
}

void ContainerCommitFailedEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerCommitFailedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerCommitFailedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerCommitFailedEventData_descriptor_;
}

const ContainerCommitFailedEventData& ContainerCommitFailedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerCommitFailedEventData* ContainerCommitFailedEventData::default_instance_ = NULL;

ContainerCommitFailedEventData* ContainerCommitFailedEventData::New() const {
  return new ContainerCommitFailedEventData;
}

void ContainerCommitFailedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_id_ = GOOGLE_ULONGLONG(0);
  }
  item_key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerCommitFailedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_id_)));
          set_has_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_key;
        break;
      }

      // repeated bytes item_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_item_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_key;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerCommitFailedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->container_id(), output);
  }

  // repeated bytes item_key = 2;
  for (int i = 0; i < this->item_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->item_key(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerCommitFailedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->container_id(), target);
  }

  // repeated bytes item_key = 2;
  for (int i = 0; i < this->item_key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->item_key(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerCommitFailedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_id());
    }

  }
  // repeated bytes item_key = 2;
  total_size += 1 * this->item_key_size();
  for (int i = 0; i < this->item_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->item_key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerCommitFailedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerCommitFailedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerCommitFailedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerCommitFailedEventData::MergeFrom(const ContainerCommitFailedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_key_.MergeFrom(from.item_key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      set_container_id(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerCommitFailedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerCommitFailedEventData::CopyFrom(const ContainerCommitFailedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerCommitFailedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerCommitFailedEventData::Swap(ContainerCommitFailedEventData* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    item_key_.Swap(&other->item_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerCommitFailedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerCommitFailedEventData_descriptor_;
  metadata.reflection = ContainerCommitFailedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VolumeAttachedEventData::kVolumeIdFieldNumber;
#endif  // !_MSC_VER

VolumeAttachedEventData::VolumeAttachedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VolumeAttachedEventData::InitAsDefaultInstance() {
}

VolumeAttachedEventData::VolumeAttachedEventData(const VolumeAttachedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VolumeAttachedEventData::SharedCtor() {
  _cached_size_ = 0;
  volume_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeAttachedEventData::~VolumeAttachedEventData() {
  SharedDtor();
}

void VolumeAttachedEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeAttachedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeAttachedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeAttachedEventData_descriptor_;
}

const VolumeAttachedEventData& VolumeAttachedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

VolumeAttachedEventData* VolumeAttachedEventData::default_instance_ = NULL;

VolumeAttachedEventData* VolumeAttachedEventData::New() const {
  return new VolumeAttachedEventData;
}

void VolumeAttachedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volume_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolumeAttachedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 volume_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
          set_has_volume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VolumeAttachedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 volume_id = 1;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->volume_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VolumeAttachedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 volume_id = 1;
  if (has_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->volume_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VolumeAttachedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 volume_id = 1;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeAttachedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolumeAttachedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolumeAttachedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolumeAttachedEventData::MergeFrom(const VolumeAttachedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolumeAttachedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeAttachedEventData::CopyFrom(const VolumeAttachedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeAttachedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VolumeAttachedEventData::Swap(VolumeAttachedEventData* other) {
  if (other != this) {
    std::swap(volume_id_, other->volume_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolumeAttachedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeAttachedEventData_descriptor_;
  metadata.reflection = VolumeAttachedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VolumeDetachedEventData::kVolumeIdFieldNumber;
#endif  // !_MSC_VER

VolumeDetachedEventData::VolumeDetachedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VolumeDetachedEventData::InitAsDefaultInstance() {
}

VolumeDetachedEventData::VolumeDetachedEventData(const VolumeDetachedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VolumeDetachedEventData::SharedCtor() {
  _cached_size_ = 0;
  volume_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VolumeDetachedEventData::~VolumeDetachedEventData() {
  SharedDtor();
}

void VolumeDetachedEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VolumeDetachedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeDetachedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VolumeDetachedEventData_descriptor_;
}

const VolumeDetachedEventData& VolumeDetachedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

VolumeDetachedEventData* VolumeDetachedEventData::default_instance_ = NULL;

VolumeDetachedEventData* VolumeDetachedEventData::New() const {
  return new VolumeDetachedEventData;
}

void VolumeDetachedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    volume_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VolumeDetachedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 volume_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
          set_has_volume_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VolumeDetachedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 volume_id = 1;
  if (has_volume_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->volume_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VolumeDetachedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 volume_id = 1;
  if (has_volume_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->volume_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VolumeDetachedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 volume_id = 1;
    if (has_volume_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeDetachedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VolumeDetachedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VolumeDetachedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VolumeDetachedEventData::MergeFrom(const VolumeDetachedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_volume_id()) {
      set_volume_id(from.volume_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VolumeDetachedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeDetachedEventData::CopyFrom(const VolumeDetachedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeDetachedEventData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VolumeDetachedEventData::Swap(VolumeDetachedEventData* other) {
  if (other != this) {
    std::swap(volume_id_, other->volume_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VolumeDetachedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VolumeDetachedEventData_descriptor_;
  metadata.reflection = VolumeDetachedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingWrittenEventData::kMappingPairFieldNumber;
#endif  // !_MSC_VER

BlockMappingWrittenEventData::BlockMappingWrittenEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingWrittenEventData::InitAsDefaultInstance() {
  mapping_pair_ = const_cast< ::BlockMappingPairData*>(&::BlockMappingPairData::default_instance());
}

BlockMappingWrittenEventData::BlockMappingWrittenEventData(const BlockMappingWrittenEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingWrittenEventData::SharedCtor() {
  _cached_size_ = 0;
  mapping_pair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingWrittenEventData::~BlockMappingWrittenEventData() {
  SharedDtor();
}

void BlockMappingWrittenEventData::SharedDtor() {
  if (this != default_instance_) {
    delete mapping_pair_;
  }
}

void BlockMappingWrittenEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingWrittenEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingWrittenEventData_descriptor_;
}

const BlockMappingWrittenEventData& BlockMappingWrittenEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingWrittenEventData* BlockMappingWrittenEventData::default_instance_ = NULL;

BlockMappingWrittenEventData* BlockMappingWrittenEventData::New() const {
  return new BlockMappingWrittenEventData;
}

void BlockMappingWrittenEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mapping_pair()) {
      if (mapping_pair_ != NULL) mapping_pair_->::BlockMappingPairData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingWrittenEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BlockMappingPairData mapping_pair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapping_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingWrittenEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BlockMappingPairData mapping_pair = 4;
  if (has_mapping_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mapping_pair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingWrittenEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BlockMappingPairData mapping_pair = 4;
  if (has_mapping_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mapping_pair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingWrittenEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BlockMappingPairData mapping_pair = 4;
    if (has_mapping_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapping_pair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingWrittenEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingWrittenEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingWrittenEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingWrittenEventData::MergeFrom(const BlockMappingWrittenEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapping_pair()) {
      mutable_mapping_pair()->::BlockMappingPairData::MergeFrom(from.mapping_pair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingWrittenEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingWrittenEventData::CopyFrom(const BlockMappingWrittenEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingWrittenEventData::IsInitialized() const {

  if (has_mapping_pair()) {
    if (!this->mapping_pair().IsInitialized()) return false;
  }
  return true;
}

void BlockMappingWrittenEventData::Swap(BlockMappingWrittenEventData* other) {
  if (other != this) {
    std::swap(mapping_pair_, other->mapping_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingWrittenEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingWrittenEventData_descriptor_;
  metadata.reflection = BlockMappingWrittenEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingWriteFailedEventData::kMappingPairFieldNumber;
const int BlockMappingWriteFailedEventData::kWriteEventLogIdFieldNumber;
#endif  // !_MSC_VER

BlockMappingWriteFailedEventData::BlockMappingWriteFailedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingWriteFailedEventData::InitAsDefaultInstance() {
  mapping_pair_ = const_cast< ::BlockMappingPairData*>(&::BlockMappingPairData::default_instance());
}

BlockMappingWriteFailedEventData::BlockMappingWriteFailedEventData(const BlockMappingWriteFailedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingWriteFailedEventData::SharedCtor() {
  _cached_size_ = 0;
  mapping_pair_ = NULL;
  write_event_log_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingWriteFailedEventData::~BlockMappingWriteFailedEventData() {
  SharedDtor();
}

void BlockMappingWriteFailedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete mapping_pair_;
  }
}

void BlockMappingWriteFailedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingWriteFailedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingWriteFailedEventData_descriptor_;
}

const BlockMappingWriteFailedEventData& BlockMappingWriteFailedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingWriteFailedEventData* BlockMappingWriteFailedEventData::default_instance_ = NULL;

BlockMappingWriteFailedEventData* BlockMappingWriteFailedEventData::New() const {
  return new BlockMappingWriteFailedEventData;
}

void BlockMappingWriteFailedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mapping_pair()) {
      if (mapping_pair_ != NULL) mapping_pair_->::BlockMappingPairData::Clear();
    }
    write_event_log_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingWriteFailedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 write_event_log_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &write_event_log_id_)));
          set_has_write_event_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mapping_pair;
        break;
      }

      // optional .BlockMappingPairData mapping_pair = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapping_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapping_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingWriteFailedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 write_event_log_id = 3;
  if (has_write_event_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->write_event_log_id(), output);
  }

  // optional .BlockMappingPairData mapping_pair = 4;
  if (has_mapping_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mapping_pair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingWriteFailedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 write_event_log_id = 3;
  if (has_write_event_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->write_event_log_id(), target);
  }

  // optional .BlockMappingPairData mapping_pair = 4;
  if (has_mapping_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mapping_pair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingWriteFailedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BlockMappingPairData mapping_pair = 4;
    if (has_mapping_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapping_pair());
    }

    // optional int64 write_event_log_id = 3;
    if (has_write_event_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->write_event_log_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingWriteFailedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingWriteFailedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingWriteFailedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingWriteFailedEventData::MergeFrom(const BlockMappingWriteFailedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapping_pair()) {
      mutable_mapping_pair()->::BlockMappingPairData::MergeFrom(from.mapping_pair());
    }
    if (from.has_write_event_log_id()) {
      set_write_event_log_id(from.write_event_log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingWriteFailedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingWriteFailedEventData::CopyFrom(const BlockMappingWriteFailedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingWriteFailedEventData::IsInitialized() const {

  if (has_mapping_pair()) {
    if (!this->mapping_pair().IsInitialized()) return false;
  }
  return true;
}

void BlockMappingWriteFailedEventData::Swap(BlockMappingWriteFailedEventData* other) {
  if (other != this) {
    std::swap(mapping_pair_, other->mapping_pair_);
    std::swap(write_event_log_id_, other->write_event_log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingWriteFailedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingWriteFailedEventData_descriptor_;
  metadata.reflection = BlockMappingWriteFailedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMappingDeletedEventData::kOriginalBlockMappingFieldNumber;
#endif  // !_MSC_VER

BlockMappingDeletedEventData::BlockMappingDeletedEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMappingDeletedEventData::InitAsDefaultInstance() {
  original_block_mapping_ = const_cast< ::BlockMappingData*>(&::BlockMappingData::default_instance());
}

BlockMappingDeletedEventData::BlockMappingDeletedEventData(const BlockMappingDeletedEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMappingDeletedEventData::SharedCtor() {
  _cached_size_ = 0;
  original_block_mapping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMappingDeletedEventData::~BlockMappingDeletedEventData() {
  SharedDtor();
}

void BlockMappingDeletedEventData::SharedDtor() {
  if (this != default_instance_) {
    delete original_block_mapping_;
  }
}

void BlockMappingDeletedEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMappingDeletedEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMappingDeletedEventData_descriptor_;
}

const BlockMappingDeletedEventData& BlockMappingDeletedEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockMappingDeletedEventData* BlockMappingDeletedEventData::default_instance_ = NULL;

BlockMappingDeletedEventData* BlockMappingDeletedEventData::New() const {
  return new BlockMappingDeletedEventData;
}

void BlockMappingDeletedEventData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_original_block_mapping()) {
      if (original_block_mapping_ != NULL) original_block_mapping_->::BlockMappingData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMappingDeletedEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BlockMappingData original_block_mapping = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_original_block_mapping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMappingDeletedEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BlockMappingData original_block_mapping = 1;
  if (has_original_block_mapping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->original_block_mapping(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMappingDeletedEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BlockMappingData original_block_mapping = 1;
  if (has_original_block_mapping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->original_block_mapping(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMappingDeletedEventData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BlockMappingData original_block_mapping = 1;
    if (has_original_block_mapping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->original_block_mapping());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMappingDeletedEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMappingDeletedEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMappingDeletedEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMappingDeletedEventData::MergeFrom(const BlockMappingDeletedEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_original_block_mapping()) {
      mutable_original_block_mapping()->::BlockMappingData::MergeFrom(from.original_block_mapping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMappingDeletedEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMappingDeletedEventData::CopyFrom(const BlockMappingDeletedEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMappingDeletedEventData::IsInitialized() const {

  if (has_original_block_mapping()) {
    if (!this->original_block_mapping().IsInitialized()) return false;
  }
  return true;
}

void BlockMappingDeletedEventData::Swap(BlockMappingDeletedEventData* other) {
  if (other != this) {
    std::swap(original_block_mapping_, other->original_block_mapping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMappingDeletedEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMappingDeletedEventData_descriptor_;
  metadata.reflection = BlockMappingDeletedEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OphranChunksEventData::kChunkFpFieldNumber;
#endif  // !_MSC_VER

OphranChunksEventData::OphranChunksEventData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OphranChunksEventData::InitAsDefaultInstance() {
}

OphranChunksEventData::OphranChunksEventData(const OphranChunksEventData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OphranChunksEventData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OphranChunksEventData::~OphranChunksEventData() {
  SharedDtor();
}

void OphranChunksEventData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OphranChunksEventData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OphranChunksEventData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OphranChunksEventData_descriptor_;
}

const OphranChunksEventData& OphranChunksEventData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

OphranChunksEventData* OphranChunksEventData::default_instance_ = NULL;

OphranChunksEventData* OphranChunksEventData::New() const {
  return new OphranChunksEventData;
}

void OphranChunksEventData::Clear() {
  chunk_fp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OphranChunksEventData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes chunk_fp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunk_fp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_chunk_fp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chunk_fp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OphranChunksEventData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes chunk_fp = 1;
  for (int i = 0; i < this->chunk_fp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->chunk_fp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OphranChunksEventData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes chunk_fp = 1;
  for (int i = 0; i < this->chunk_fp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->chunk_fp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OphranChunksEventData::ByteSize() const {
  int total_size = 0;

  // repeated bytes chunk_fp = 1;
  total_size += 1 * this->chunk_fp_size();
  for (int i = 0; i < this->chunk_fp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->chunk_fp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OphranChunksEventData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OphranChunksEventData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OphranChunksEventData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OphranChunksEventData::MergeFrom(const OphranChunksEventData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunk_fp_.MergeFrom(from.chunk_fp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OphranChunksEventData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OphranChunksEventData::CopyFrom(const OphranChunksEventData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OphranChunksEventData::IsInitialized() const {

  return true;
}

void OphranChunksEventData::Swap(OphranChunksEventData* other) {
  if (other != this) {
    chunk_fp_.Swap(&other->chunk_fp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OphranChunksEventData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OphranChunksEventData_descriptor_;
  metadata.reflection = OphranChunksEventData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockIndexLogfileData::kContainerTrackerFieldNumber;
#endif  // !_MSC_VER

BlockIndexLogfileData::BlockIndexLogfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockIndexLogfileData::InitAsDefaultInstance() {
  container_tracker_ = const_cast< ::ContainerTrackerData*>(&::ContainerTrackerData::default_instance());
}

BlockIndexLogfileData::BlockIndexLogfileData(const BlockIndexLogfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockIndexLogfileData::SharedCtor() {
  _cached_size_ = 0;
  container_tracker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockIndexLogfileData::~BlockIndexLogfileData() {
  SharedDtor();
}

void BlockIndexLogfileData::SharedDtor() {
  if (this != default_instance_) {
    delete container_tracker_;
  }
}

void BlockIndexLogfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockIndexLogfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockIndexLogfileData_descriptor_;
}

const BlockIndexLogfileData& BlockIndexLogfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockIndexLogfileData* BlockIndexLogfileData::default_instance_ = NULL;

BlockIndexLogfileData* BlockIndexLogfileData::New() const {
  return new BlockIndexLogfileData;
}

void BlockIndexLogfileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_tracker()) {
      if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockIndexLogfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContainerTrackerData container_tracker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockIndexLogfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContainerTrackerData container_tracker = 2;
  if (has_container_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container_tracker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockIndexLogfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContainerTrackerData container_tracker = 2;
  if (has_container_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container_tracker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockIndexLogfileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContainerTrackerData container_tracker = 2;
    if (has_container_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_tracker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockIndexLogfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockIndexLogfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockIndexLogfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockIndexLogfileData::MergeFrom(const BlockIndexLogfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_tracker()) {
      mutable_container_tracker()->::ContainerTrackerData::MergeFrom(from.container_tracker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockIndexLogfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIndexLogfileData::CopyFrom(const BlockIndexLogfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIndexLogfileData::IsInitialized() const {

  return true;
}

void BlockIndexLogfileData::Swap(BlockIndexLogfileData* other) {
  if (other != this) {
    std::swap(container_tracker_, other->container_tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockIndexLogfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockIndexLogfileData_descriptor_;
  metadata.reflection = BlockIndexLogfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkIndexLogfileData::kContainerTrackerFieldNumber;
#endif  // !_MSC_VER

ChunkIndexLogfileData::ChunkIndexLogfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkIndexLogfileData::InitAsDefaultInstance() {
  container_tracker_ = const_cast< ::ContainerTrackerData*>(&::ContainerTrackerData::default_instance());
}

ChunkIndexLogfileData::ChunkIndexLogfileData(const ChunkIndexLogfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkIndexLogfileData::SharedCtor() {
  _cached_size_ = 0;
  container_tracker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkIndexLogfileData::~ChunkIndexLogfileData() {
  SharedDtor();
}

void ChunkIndexLogfileData::SharedDtor() {
  if (this != default_instance_) {
    delete container_tracker_;
  }
}

void ChunkIndexLogfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkIndexLogfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkIndexLogfileData_descriptor_;
}

const ChunkIndexLogfileData& ChunkIndexLogfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ChunkIndexLogfileData* ChunkIndexLogfileData::default_instance_ = NULL;

ChunkIndexLogfileData* ChunkIndexLogfileData::New() const {
  return new ChunkIndexLogfileData;
}

void ChunkIndexLogfileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_tracker()) {
      if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkIndexLogfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ContainerTrackerData container_tracker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkIndexLogfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ContainerTrackerData container_tracker = 2;
  if (has_container_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container_tracker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkIndexLogfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ContainerTrackerData container_tracker = 2;
  if (has_container_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container_tracker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkIndexLogfileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ContainerTrackerData container_tracker = 2;
    if (has_container_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_tracker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkIndexLogfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkIndexLogfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkIndexLogfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkIndexLogfileData::MergeFrom(const ChunkIndexLogfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_tracker()) {
      mutable_container_tracker()->::ContainerTrackerData::MergeFrom(from.container_tracker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkIndexLogfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkIndexLogfileData::CopyFrom(const ChunkIndexLogfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkIndexLogfileData::IsInitialized() const {

  return true;
}

void ChunkIndexLogfileData::Swap(ChunkIndexLogfileData* other) {
  if (other != this) {
    std::swap(container_tracker_, other->container_tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkIndexLogfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkIndexLogfileData_descriptor_;
  metadata.reflection = ChunkIndexLogfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomFilterLogfileData::kFilterSizeFieldNumber;
const int BloomFilterLogfileData::kKFieldNumber;
const int BloomFilterLogfileData::kContainerTrackerFieldNumber;
#endif  // !_MSC_VER

BloomFilterLogfileData::BloomFilterLogfileData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloomFilterLogfileData::InitAsDefaultInstance() {
  container_tracker_ = const_cast< ::ContainerTrackerData*>(&::ContainerTrackerData::default_instance());
}

BloomFilterLogfileData::BloomFilterLogfileData(const BloomFilterLogfileData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloomFilterLogfileData::SharedCtor() {
  _cached_size_ = 0;
  filter_size_ = GOOGLE_ULONGLONG(0);
  k_ = 0u;
  container_tracker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomFilterLogfileData::~BloomFilterLogfileData() {
  SharedDtor();
}

void BloomFilterLogfileData::SharedDtor() {
  if (this != default_instance_) {
    delete container_tracker_;
  }
}

void BloomFilterLogfileData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomFilterLogfileData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomFilterLogfileData_descriptor_;
}

const BloomFilterLogfileData& BloomFilterLogfileData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BloomFilterLogfileData* BloomFilterLogfileData::default_instance_ = NULL;

BloomFilterLogfileData* BloomFilterLogfileData::New() const {
  return new BloomFilterLogfileData;
}

void BloomFilterLogfileData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_size_ = GOOGLE_ULONGLONG(0);
    k_ = 0u;
    if (has_container_tracker()) {
      if (container_tracker_ != NULL) container_tracker_->::ContainerTrackerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomFilterLogfileData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 filter_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_size_)));
          set_has_filter_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_k;
        break;
      }

      // optional uint32 k = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_container_tracker;
        break;
      }

      // optional .ContainerTrackerData container_tracker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloomFilterLogfileData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 filter_size = 1;
  if (has_filter_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->filter_size(), output);
  }

  // optional uint32 k = 2;
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->k(), output);
  }

  // optional .ContainerTrackerData container_tracker = 4;
  if (has_container_tracker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->container_tracker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloomFilterLogfileData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 filter_size = 1;
  if (has_filter_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->filter_size(), target);
  }

  // optional uint32 k = 2;
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->k(), target);
  }

  // optional .ContainerTrackerData container_tracker = 4;
  if (has_container_tracker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->container_tracker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloomFilterLogfileData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 filter_size = 1;
    if (has_filter_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_size());
    }

    // optional uint32 k = 2;
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->k());
    }

    // optional .ContainerTrackerData container_tracker = 4;
    if (has_container_tracker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_tracker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomFilterLogfileData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomFilterLogfileData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomFilterLogfileData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomFilterLogfileData::MergeFrom(const BloomFilterLogfileData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_size()) {
      set_filter_size(from.filter_size());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_container_tracker()) {
      mutable_container_tracker()->::ContainerTrackerData::MergeFrom(from.container_tracker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomFilterLogfileData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomFilterLogfileData::CopyFrom(const BloomFilterLogfileData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilterLogfileData::IsInitialized() const {

  return true;
}

void BloomFilterLogfileData::Swap(BloomFilterLogfileData* other) {
  if (other != this) {
    std::swap(filter_size_, other->filter_size_);
    std::swap(k_, other->k_);
    std::swap(container_tracker_, other->container_tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomFilterLogfileData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomFilterLogfileData_descriptor_;
  metadata.reflection = BloomFilterLogfileData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarbageCollectionCandidateData::kAddressFieldNumber;
const int GarbageCollectionCandidateData::kItemFieldNumber;
const int GarbageCollectionCandidateData::kProcessingFieldNumber;
const int GarbageCollectionCandidateData::kUnchangedProcessingCountFieldNumber;
#endif  // !_MSC_VER

GarbageCollectionCandidateData::GarbageCollectionCandidateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarbageCollectionCandidateData::InitAsDefaultInstance() {
}

GarbageCollectionCandidateData::GarbageCollectionCandidateData(const GarbageCollectionCandidateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarbageCollectionCandidateData::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  processing_ = false;
  unchanged_processing_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbageCollectionCandidateData::~GarbageCollectionCandidateData() {
  SharedDtor();
}

void GarbageCollectionCandidateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarbageCollectionCandidateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarbageCollectionCandidateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbageCollectionCandidateData_descriptor_;
}

const GarbageCollectionCandidateData& GarbageCollectionCandidateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

GarbageCollectionCandidateData* GarbageCollectionCandidateData::default_instance_ = NULL;

GarbageCollectionCandidateData* GarbageCollectionCandidateData::New() const {
  return new GarbageCollectionCandidateData;
}

void GarbageCollectionCandidateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    processing_ = false;
    unchanged_processing_count_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbageCollectionCandidateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .GarbageCollectionCandidateItemData item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_processing;
        break;
      }

      // optional bool processing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &processing_)));
          set_has_processing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unchanged_processing_count;
        break;
      }

      // optional uint32 unchanged_processing_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unchanged_processing_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unchanged_processing_count_)));
          set_has_unchanged_processing_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarbageCollectionCandidateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // repeated .GarbageCollectionCandidateItemData item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  // optional bool processing = 3;
  if (has_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->processing(), output);
  }

  // optional uint32 unchanged_processing_count = 4;
  if (has_unchanged_processing_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unchanged_processing_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarbageCollectionCandidateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // repeated .GarbageCollectionCandidateItemData item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  // optional bool processing = 3;
  if (has_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->processing(), target);
  }

  // optional uint32 unchanged_processing_count = 4;
  if (has_unchanged_processing_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unchanged_processing_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarbageCollectionCandidateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // optional bool processing = 3;
    if (has_processing()) {
      total_size += 1 + 1;
    }

    // optional uint32 unchanged_processing_count = 4;
    if (has_unchanged_processing_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unchanged_processing_count());
    }

  }
  // repeated .GarbageCollectionCandidateItemData item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectionCandidateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarbageCollectionCandidateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarbageCollectionCandidateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarbageCollectionCandidateData::MergeFrom(const GarbageCollectionCandidateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_processing()) {
      set_processing(from.processing());
    }
    if (from.has_unchanged_processing_count()) {
      set_unchanged_processing_count(from.unchanged_processing_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbageCollectionCandidateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbageCollectionCandidateData::CopyFrom(const GarbageCollectionCandidateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionCandidateData::IsInitialized() const {

  return true;
}

void GarbageCollectionCandidateData::Swap(GarbageCollectionCandidateData* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    item_.Swap(&other->item_);
    std::swap(processing_, other->processing_);
    std::swap(unchanged_processing_count_, other->unchanged_processing_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarbageCollectionCandidateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarbageCollectionCandidateData_descriptor_;
  metadata.reflection = GarbageCollectionCandidateData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GarbageCollectionCandidateItemData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbageCollectionCandidateItemData_Type_descriptor_;
}
bool GarbageCollectionCandidateItemData_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData::STANDARD;
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData::FAILED;
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData::Type_MIN;
const GarbageCollectionCandidateItemData_Type GarbageCollectionCandidateItemData::Type_MAX;
const int GarbageCollectionCandidateItemData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GarbageCollectionCandidateItemData::kFpFieldNumber;
const int GarbageCollectionCandidateItemData::kTypeFieldNumber;
#endif  // !_MSC_VER

GarbageCollectionCandidateItemData::GarbageCollectionCandidateItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarbageCollectionCandidateItemData::InitAsDefaultInstance() {
}

GarbageCollectionCandidateItemData::GarbageCollectionCandidateItemData(const GarbageCollectionCandidateItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarbageCollectionCandidateItemData::SharedCtor() {
  _cached_size_ = 0;
  fp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbageCollectionCandidateItemData::~GarbageCollectionCandidateItemData() {
  SharedDtor();
}

void GarbageCollectionCandidateItemData::SharedDtor() {
  if (fp_ != &::google::protobuf::internal::kEmptyString) {
    delete fp_;
  }
  if (this != default_instance_) {
  }
}

void GarbageCollectionCandidateItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarbageCollectionCandidateItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbageCollectionCandidateItemData_descriptor_;
}

const GarbageCollectionCandidateItemData& GarbageCollectionCandidateItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

GarbageCollectionCandidateItemData* GarbageCollectionCandidateItemData::default_instance_ = NULL;

GarbageCollectionCandidateItemData* GarbageCollectionCandidateItemData::New() const {
  return new GarbageCollectionCandidateItemData;
}

void GarbageCollectionCandidateItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fp()) {
      if (fp_ != &::google::protobuf::internal::kEmptyString) {
        fp_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbageCollectionCandidateItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes fp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .GarbageCollectionCandidateItemData.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GarbageCollectionCandidateItemData_Type_IsValid(value)) {
            set_type(static_cast< ::GarbageCollectionCandidateItemData_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarbageCollectionCandidateItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes fp = 1;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->fp(), output);
  }

  // optional .GarbageCollectionCandidateItemData.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarbageCollectionCandidateItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes fp = 1;
  if (has_fp()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fp(), target);
  }

  // optional .GarbageCollectionCandidateItemData.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarbageCollectionCandidateItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes fp = 1;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fp());
    }

    // optional .GarbageCollectionCandidateItemData.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectionCandidateItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarbageCollectionCandidateItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarbageCollectionCandidateItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarbageCollectionCandidateItemData::MergeFrom(const GarbageCollectionCandidateItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fp()) {
      set_fp(from.fp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbageCollectionCandidateItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbageCollectionCandidateItemData::CopyFrom(const GarbageCollectionCandidateItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionCandidateItemData::IsInitialized() const {

  return true;
}

void GarbageCollectionCandidateItemData::Swap(GarbageCollectionCandidateItemData* other) {
  if (other != this) {
    std::swap(fp_, other->fp_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarbageCollectionCandidateItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarbageCollectionCandidateItemData_descriptor_;
  metadata.reflection = GarbageCollectionCandidateItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarbageCollectionInfoData::kReplayedBlockFailedEventLogIdFieldNumber;
#endif  // !_MSC_VER

GarbageCollectionInfoData::GarbageCollectionInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarbageCollectionInfoData::InitAsDefaultInstance() {
}

GarbageCollectionInfoData::GarbageCollectionInfoData(const GarbageCollectionInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarbageCollectionInfoData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbageCollectionInfoData::~GarbageCollectionInfoData() {
  SharedDtor();
}

void GarbageCollectionInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarbageCollectionInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarbageCollectionInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbageCollectionInfoData_descriptor_;
}

const GarbageCollectionInfoData& GarbageCollectionInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

GarbageCollectionInfoData* GarbageCollectionInfoData::default_instance_ = NULL;

GarbageCollectionInfoData* GarbageCollectionInfoData::New() const {
  return new GarbageCollectionInfoData;
}

void GarbageCollectionInfoData::Clear() {
  replayed_block_failed_event_log_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbageCollectionInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 replayed_block_failed_event_log_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replayed_block_failed_event_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_replayed_block_failed_event_log_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_replayed_block_failed_event_log_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_replayed_block_failed_event_log_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarbageCollectionInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 replayed_block_failed_event_log_id = 1;
  for (int i = 0; i < this->replayed_block_failed_event_log_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->replayed_block_failed_event_log_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarbageCollectionInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 replayed_block_failed_event_log_id = 1;
  for (int i = 0; i < this->replayed_block_failed_event_log_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->replayed_block_failed_event_log_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarbageCollectionInfoData::ByteSize() const {
  int total_size = 0;

  // repeated int64 replayed_block_failed_event_log_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->replayed_block_failed_event_log_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->replayed_block_failed_event_log_id(i));
    }
    total_size += 1 * this->replayed_block_failed_event_log_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectionInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarbageCollectionInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarbageCollectionInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarbageCollectionInfoData::MergeFrom(const GarbageCollectionInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  replayed_block_failed_event_log_id_.MergeFrom(from.replayed_block_failed_event_log_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbageCollectionInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbageCollectionInfoData::CopyFrom(const GarbageCollectionInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectionInfoData::IsInitialized() const {

  return true;
}

void GarbageCollectionInfoData::Swap(GarbageCollectionInfoData* other) {
  if (other != this) {
    replayed_block_failed_event_log_id_.Swap(&other->replayed_block_failed_event_log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarbageCollectionInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarbageCollectionInfoData_descriptor_;
  metadata.reflection = GarbageCollectionInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerGreedyGCCandidateItemData::kAddressFieldNumber;
const int ContainerGreedyGCCandidateItemData::kActiveDataSizeFieldNumber;
const int ContainerGreedyGCCandidateItemData::kActiveItemCountFieldNumber;
#endif  // !_MSC_VER

ContainerGreedyGCCandidateItemData::ContainerGreedyGCCandidateItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerGreedyGCCandidateItemData::InitAsDefaultInstance() {
}

ContainerGreedyGCCandidateItemData::ContainerGreedyGCCandidateItemData(const ContainerGreedyGCCandidateItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerGreedyGCCandidateItemData::SharedCtor() {
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  active_data_size_ = 0u;
  active_item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerGreedyGCCandidateItemData::~ContainerGreedyGCCandidateItemData() {
  SharedDtor();
}

void ContainerGreedyGCCandidateItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerGreedyGCCandidateItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerGreedyGCCandidateItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerGreedyGCCandidateItemData_descriptor_;
}

const ContainerGreedyGCCandidateItemData& ContainerGreedyGCCandidateItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerGreedyGCCandidateItemData* ContainerGreedyGCCandidateItemData::default_instance_ = NULL;

ContainerGreedyGCCandidateItemData* ContainerGreedyGCCandidateItemData::New() const {
  return new ContainerGreedyGCCandidateItemData;
}

void ContainerGreedyGCCandidateItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    address_ = GOOGLE_ULONGLONG(0);
    active_data_size_ = 0u;
    active_item_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerGreedyGCCandidateItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
          set_has_address();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_data_size;
        break;
      }

      // optional uint32 active_data_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_data_size_)));
          set_has_active_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_item_count;
        break;
      }

      // optional uint32 active_item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_item_count_)));
          set_has_active_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerGreedyGCCandidateItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // optional uint32 active_data_size = 2;
  if (has_active_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_data_size(), output);
  }

  // optional uint32 active_item_count = 3;
  if (has_active_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerGreedyGCCandidateItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 address = 1;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // optional uint32 active_data_size = 2;
  if (has_active_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_data_size(), target);
  }

  // optional uint32 active_item_count = 3;
  if (has_active_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerGreedyGCCandidateItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->address());
    }

    // optional uint32 active_data_size = 2;
    if (has_active_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_data_size());
    }

    // optional uint32 active_item_count = 3;
    if (has_active_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerGreedyGCCandidateItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerGreedyGCCandidateItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerGreedyGCCandidateItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerGreedyGCCandidateItemData::MergeFrom(const ContainerGreedyGCCandidateItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_active_data_size()) {
      set_active_data_size(from.active_data_size());
    }
    if (from.has_active_item_count()) {
      set_active_item_count(from.active_item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerGreedyGCCandidateItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerGreedyGCCandidateItemData::CopyFrom(const ContainerGreedyGCCandidateItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerGreedyGCCandidateItemData::IsInitialized() const {

  return true;
}

void ContainerGreedyGCCandidateItemData::Swap(ContainerGreedyGCCandidateItemData* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(active_data_size_, other->active_data_size_);
    std::swap(active_item_count_, other->active_item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerGreedyGCCandidateItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerGreedyGCCandidateItemData_descriptor_;
  metadata.reflection = ContainerGreedyGCCandidateItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerGreedyGCCandidateData::kItemFieldNumber;
#endif  // !_MSC_VER

ContainerGreedyGCCandidateData::ContainerGreedyGCCandidateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerGreedyGCCandidateData::InitAsDefaultInstance() {
}

ContainerGreedyGCCandidateData::ContainerGreedyGCCandidateData(const ContainerGreedyGCCandidateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerGreedyGCCandidateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerGreedyGCCandidateData::~ContainerGreedyGCCandidateData() {
  SharedDtor();
}

void ContainerGreedyGCCandidateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerGreedyGCCandidateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerGreedyGCCandidateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerGreedyGCCandidateData_descriptor_;
}

const ContainerGreedyGCCandidateData& ContainerGreedyGCCandidateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerGreedyGCCandidateData* ContainerGreedyGCCandidateData::default_instance_ = NULL;

ContainerGreedyGCCandidateData* ContainerGreedyGCCandidateData::New() const {
  return new ContainerGreedyGCCandidateData;
}

void ContainerGreedyGCCandidateData::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerGreedyGCCandidateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ContainerGreedyGCCandidateItemData item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerGreedyGCCandidateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ContainerGreedyGCCandidateItemData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerGreedyGCCandidateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ContainerGreedyGCCandidateItemData item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerGreedyGCCandidateData::ByteSize() const {
  int total_size = 0;

  // repeated .ContainerGreedyGCCandidateItemData item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerGreedyGCCandidateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerGreedyGCCandidateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerGreedyGCCandidateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerGreedyGCCandidateData::MergeFrom(const ContainerGreedyGCCandidateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerGreedyGCCandidateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerGreedyGCCandidateData::CopyFrom(const ContainerGreedyGCCandidateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerGreedyGCCandidateData::IsInitialized() const {

  return true;
}

void ContainerGreedyGCCandidateData::Swap(ContainerGreedyGCCandidateData* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerGreedyGCCandidateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerGreedyGCCandidateData_descriptor_;
  metadata.reflection = ContainerGreedyGCCandidateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerStorageAddressData::kPrimaryIdFieldNumber;
const int ContainerStorageAddressData::kFileIndexFieldNumber;
const int ContainerStorageAddressData::kFileOffsetFieldNumber;
const int ContainerStorageAddressData::kLogIdFieldNumber;
#endif  // !_MSC_VER

ContainerStorageAddressData::ContainerStorageAddressData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerStorageAddressData::InitAsDefaultInstance() {
}

ContainerStorageAddressData::ContainerStorageAddressData(const ContainerStorageAddressData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerStorageAddressData::SharedCtor() {
  _cached_size_ = 0;
  primary_id_ = GOOGLE_ULONGLONG(0);
  file_index_ = 0u;
  file_offset_ = GOOGLE_ULONGLONG(0);
  log_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStorageAddressData::~ContainerStorageAddressData() {
  SharedDtor();
}

void ContainerStorageAddressData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerStorageAddressData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStorageAddressData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStorageAddressData_descriptor_;
}

const ContainerStorageAddressData& ContainerStorageAddressData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerStorageAddressData* ContainerStorageAddressData::default_instance_ = NULL;

ContainerStorageAddressData* ContainerStorageAddressData::New() const {
  return new ContainerStorageAddressData;
}

void ContainerStorageAddressData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    primary_id_ = GOOGLE_ULONGLONG(0);
    file_index_ = 0u;
    file_offset_ = GOOGLE_ULONGLONG(0);
    log_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStorageAddressData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 file_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_index_)));
          set_has_file_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_file_offset;
        break;
      }

      // optional uint64 file_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_offset_)));
          set_has_file_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_primary_id;
        break;
      }

      // optional uint64 primary_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primary_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_id_)));
          set_has_primary_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_log_id;
        break;
      }

      // optional uint64 log_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerStorageAddressData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 file_index = 1;
  if (has_file_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->file_index(), output);
  }

  // optional uint64 file_offset = 2;
  if (has_file_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_offset(), output);
  }

  // optional uint64 primary_id = 3;
  if (has_primary_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->primary_id(), output);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->log_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerStorageAddressData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 file_index = 1;
  if (has_file_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_index(), target);
  }

  // optional uint64 file_offset = 2;
  if (has_file_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_offset(), target);
  }

  // optional uint64 primary_id = 3;
  if (has_primary_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->primary_id(), target);
  }

  // optional uint64 log_id = 4;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->log_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerStorageAddressData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 primary_id = 3;
    if (has_primary_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary_id());
    }

    // optional uint32 file_index = 1;
    if (has_file_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_index());
    }

    // optional uint64 file_offset = 2;
    if (has_file_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_offset());
    }

    // optional uint64 log_id = 4;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->log_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStorageAddressData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStorageAddressData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStorageAddressData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStorageAddressData::MergeFrom(const ContainerStorageAddressData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primary_id()) {
      set_primary_id(from.primary_id());
    }
    if (from.has_file_index()) {
      set_file_index(from.file_index());
    }
    if (from.has_file_offset()) {
      set_file_offset(from.file_offset());
    }
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStorageAddressData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStorageAddressData::CopyFrom(const ContainerStorageAddressData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStorageAddressData::IsInitialized() const {

  return true;
}

void ContainerStorageAddressData::Swap(ContainerStorageAddressData* other) {
  if (other != this) {
    std::swap(primary_id_, other->primary_id_);
    std::swap(file_index_, other->file_index_);
    std::swap(file_offset_, other->file_offset_);
    std::swap(log_id_, other->log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStorageAddressData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStorageAddressData_descriptor_;
  metadata.reflection = ContainerStorageAddressData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitmapAllocatorItemData::kFreeCountFieldNumber;
const int BitmapAllocatorItemData::kBitmapFieldNumber;
#endif  // !_MSC_VER

BitmapAllocatorItemData::BitmapAllocatorItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitmapAllocatorItemData::InitAsDefaultInstance() {
}

BitmapAllocatorItemData::BitmapAllocatorItemData(const BitmapAllocatorItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitmapAllocatorItemData::SharedCtor() {
  _cached_size_ = 0;
  free_count_ = 0u;
  bitmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitmapAllocatorItemData::~BitmapAllocatorItemData() {
  SharedDtor();
}

void BitmapAllocatorItemData::SharedDtor() {
  if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
    delete bitmap_;
  }
  if (this != default_instance_) {
  }
}

void BitmapAllocatorItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitmapAllocatorItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitmapAllocatorItemData_descriptor_;
}

const BitmapAllocatorItemData& BitmapAllocatorItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BitmapAllocatorItemData* BitmapAllocatorItemData::default_instance_ = NULL;

BitmapAllocatorItemData* BitmapAllocatorItemData::New() const {
  return new BitmapAllocatorItemData;
}

void BitmapAllocatorItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    free_count_ = 0u;
    if (has_bitmap()) {
      if (bitmap_ != &::google::protobuf::internal::kEmptyString) {
        bitmap_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitmapAllocatorItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 free_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_count_)));
          set_has_free_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bitmap;
        break;
      }

      // optional bytes bitmap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitmap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bitmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitmapAllocatorItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 free_count = 1;
  if (has_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->free_count(), output);
  }

  // optional bytes bitmap = 2;
  if (has_bitmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->bitmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitmapAllocatorItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 free_count = 1;
  if (has_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->free_count(), target);
  }

  // optional bytes bitmap = 2;
  if (has_bitmap()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bitmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitmapAllocatorItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 free_count = 1;
    if (has_free_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_count());
    }

    // optional bytes bitmap = 2;
    if (has_bitmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bitmap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitmapAllocatorItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitmapAllocatorItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitmapAllocatorItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitmapAllocatorItemData::MergeFrom(const BitmapAllocatorItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_free_count()) {
      set_free_count(from.free_count());
    }
    if (from.has_bitmap()) {
      set_bitmap(from.bitmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitmapAllocatorItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitmapAllocatorItemData::CopyFrom(const BitmapAllocatorItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitmapAllocatorItemData::IsInitialized() const {

  return true;
}

void BitmapAllocatorItemData::Swap(BitmapAllocatorItemData* other) {
  if (other != this) {
    std::swap(free_count_, other->free_count_);
    std::swap(bitmap_, other->bitmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitmapAllocatorItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitmapAllocatorItemData_descriptor_;
  metadata.reflection = BitmapAllocatorItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerTrackerData::kContainerIdFieldNumber;
const int ContainerTrackerData::kHighestSeenContainerIdFieldNumber;
#endif  // !_MSC_VER

ContainerTrackerData::ContainerTrackerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerTrackerData::InitAsDefaultInstance() {
}

ContainerTrackerData::ContainerTrackerData(const ContainerTrackerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerTrackerData::SharedCtor() {
  _cached_size_ = 0;
  highest_seen_container_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerTrackerData::~ContainerTrackerData() {
  SharedDtor();
}

void ContainerTrackerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerTrackerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerTrackerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerTrackerData_descriptor_;
}

const ContainerTrackerData& ContainerTrackerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

ContainerTrackerData* ContainerTrackerData::default_instance_ = NULL;

ContainerTrackerData* ContainerTrackerData::New() const {
  return new ContainerTrackerData;
}

void ContainerTrackerData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    highest_seen_container_id_ = GOOGLE_ULONGLONG(0);
  }
  container_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerTrackerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 container_id = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_container_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_container_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_highest_seen_container_id;
        break;
      }

      // optional uint64 highest_seen_container_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_seen_container_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &highest_seen_container_id_)));
          set_has_highest_seen_container_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerTrackerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 container_id = 1 [packed = true];
  if (this->container_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_container_id_cached_byte_size_);
  }
  for (int i = 0; i < this->container_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->container_id(i), output);
  }

  // optional uint64 highest_seen_container_id = 2;
  if (has_highest_seen_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->highest_seen_container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerTrackerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 container_id = 1 [packed = true];
  if (this->container_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _container_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->container_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->container_id(i), target);
  }

  // optional uint64 highest_seen_container_id = 2;
  if (has_highest_seen_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->highest_seen_container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerTrackerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 highest_seen_container_id = 2;
    if (has_highest_seen_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->highest_seen_container_id());
    }

  }
  // repeated uint64 container_id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->container_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->container_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _container_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerTrackerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerTrackerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerTrackerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerTrackerData::MergeFrom(const ContainerTrackerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_id_.MergeFrom(from.container_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_highest_seen_container_id()) {
      set_highest_seen_container_id(from.highest_seen_container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerTrackerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerTrackerData::CopyFrom(const ContainerTrackerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerTrackerData::IsInitialized() const {

  return true;
}

void ContainerTrackerData::Swap(ContainerTrackerData* other) {
  if (other != this) {
    container_id_.Swap(&other->container_id_);
    std::swap(highest_seen_container_id_, other->highest_seen_container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerTrackerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerTrackerData_descriptor_;
  metadata.reflection = ContainerTrackerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogReplayIDData::kReplayIdFieldNumber;
#endif  // !_MSC_VER

LogReplayIDData::LogReplayIDData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogReplayIDData::InitAsDefaultInstance() {
}

LogReplayIDData::LogReplayIDData(const LogReplayIDData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogReplayIDData::SharedCtor() {
  _cached_size_ = 0;
  replay_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogReplayIDData::~LogReplayIDData() {
  SharedDtor();
}

void LogReplayIDData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogReplayIDData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogReplayIDData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogReplayIDData_descriptor_;
}

const LogReplayIDData& LogReplayIDData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

LogReplayIDData* LogReplayIDData::default_instance_ = NULL;

LogReplayIDData* LogReplayIDData::New() const {
  return new LogReplayIDData;
}

void LogReplayIDData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    replay_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogReplayIDData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 replay_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogReplayIDData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 replay_id = 1;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->replay_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogReplayIDData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 replay_id = 1;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->replay_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogReplayIDData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 replay_id = 1;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->replay_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogReplayIDData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogReplayIDData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogReplayIDData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogReplayIDData::MergeFrom(const LogReplayIDData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogReplayIDData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogReplayIDData::CopyFrom(const LogReplayIDData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogReplayIDData::IsInitialized() const {

  return true;
}

void LogReplayIDData::Swap(LogReplayIDData* other) {
  if (other != this) {
    std::swap(replay_id_, other->replay_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogReplayIDData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogReplayIDData_descriptor_;
  metadata.reflection = LogReplayIDData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogLogIDData::kLogIdFieldNumber;
#endif  // !_MSC_VER

LogLogIDData::LogLogIDData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogLogIDData::InitAsDefaultInstance() {
}

LogLogIDData::LogLogIDData(const LogLogIDData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogLogIDData::SharedCtor() {
  _cached_size_ = 0;
  log_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogLogIDData::~LogLogIDData() {
  SharedDtor();
}

void LogLogIDData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogLogIDData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogLogIDData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLogIDData_descriptor_;
}

const LogLogIDData& LogLogIDData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

LogLogIDData* LogLogIDData::default_instance_ = NULL;

LogLogIDData* LogLogIDData::New() const {
  return new LogLogIDData;
}

void LogLogIDData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogLogIDData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 log_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_id_)));
          set_has_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogLogIDData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 log_id = 1;
  if (has_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->log_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogLogIDData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 log_id = 1;
  if (has_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->log_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogLogIDData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 log_id = 1;
    if (has_log_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogLogIDData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogLogIDData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogLogIDData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogLogIDData::MergeFrom(const LogLogIDData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_id()) {
      set_log_id(from.log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogLogIDData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogLogIDData::CopyFrom(const LogLogIDData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogLogIDData::IsInitialized() const {

  return true;
}

void LogLogIDData::Swap(LogLogIDData* other) {
  if (other != this) {
    std::swap(log_id_, other->log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogLogIDData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogLogIDData_descriptor_;
  metadata.reflection = LogLogIDData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogStateData::kLimitIdFieldNumber;
const int LogStateData::kLogEntryWidthFieldNumber;
#endif  // !_MSC_VER

LogStateData::LogStateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStateData::InitAsDefaultInstance() {
}

LogStateData::LogStateData(const LogStateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStateData::SharedCtor() {
  _cached_size_ = 0;
  limit_id_ = GOOGLE_LONGLONG(0);
  log_entry_width_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStateData::~LogStateData() {
  SharedDtor();
}

void LogStateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogStateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStateData_descriptor_;
}

const LogStateData& LogStateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

LogStateData* LogStateData::default_instance_ = NULL;

LogStateData* LogStateData::New() const {
  return new LogStateData;
}

void LogStateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    limit_id_ = GOOGLE_LONGLONG(0);
    log_entry_width_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 limit_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_id_)));
          set_has_limit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_log_entry_width;
        break;
      }

      // optional int64 log_entry_width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_entry_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &log_entry_width_)));
          set_has_log_entry_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 limit_id = 1;
  if (has_limit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->limit_id(), output);
  }

  // optional int64 log_entry_width = 2;
  if (has_log_entry_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->log_entry_width(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 limit_id = 1;
  if (has_limit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->limit_id(), target);
  }

  // optional int64 log_entry_width = 2;
  if (has_log_entry_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->log_entry_width(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 limit_id = 1;
    if (has_limit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limit_id());
    }

    // optional int64 log_entry_width = 2;
    if (has_log_entry_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->log_entry_width());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStateData::MergeFrom(const LogStateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit_id()) {
      set_limit_id(from.limit_id());
    }
    if (from.has_log_entry_width()) {
      set_log_entry_width(from.log_entry_width());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStateData::CopyFrom(const LogStateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStateData::IsInitialized() const {

  return true;
}

void LogStateData::Swap(LogStateData* other) {
  if (other != this) {
    std::swap(limit_id_, other->limit_id_);
    std::swap(log_entry_width_, other->log_entry_width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStateData_descriptor_;
  metadata.reflection = LogStateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageData::kMessageFieldNumber;
#endif  // !_MSC_VER

MessageData::MessageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MessageData::InitAsDefaultInstance() {
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MessageData::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  SharedDtor();
}

void MessageData::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New() const {
  return new MessageData;
}

void MessageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {

  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BlockWriteFailedData::BlockWriteFailedData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockWriteFailedData::InitAsDefaultInstance() {
}

BlockWriteFailedData::BlockWriteFailedData(const BlockWriteFailedData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockWriteFailedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockWriteFailedData::~BlockWriteFailedData() {
  SharedDtor();
}

void BlockWriteFailedData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockWriteFailedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockWriteFailedData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockWriteFailedData_descriptor_;
}

const BlockWriteFailedData& BlockWriteFailedData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_2eproto();
  return *default_instance_;
}

BlockWriteFailedData* BlockWriteFailedData::default_instance_ = NULL;

BlockWriteFailedData* BlockWriteFailedData::New() const {
  return new BlockWriteFailedData;
}

void BlockWriteFailedData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockWriteFailedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BlockWriteFailedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockWriteFailedData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockWriteFailedData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockWriteFailedData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockWriteFailedData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockWriteFailedData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockWriteFailedData::MergeFrom(const BlockWriteFailedData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockWriteFailedData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockWriteFailedData::CopyFrom(const BlockWriteFailedData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockWriteFailedData::IsInitialized() const {

  return true;
}

void BlockWriteFailedData::Swap(BlockWriteFailedData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockWriteFailedData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockWriteFailedData_descriptor_;
  metadata.reflection = BlockWriteFailedData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
