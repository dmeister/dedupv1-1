// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dedupv1_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dedupv1_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChunkIndexStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkIndexStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockIndexStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockIndexStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkStoreStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkStoreStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStorageWriteCacheStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStorageWriteCacheStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStorageStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStorageStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStorageReadCacheStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStorageReadCacheStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockIndexFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockIndexFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BloomFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BloomFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ByteCompareFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ByteCompareFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChunkIndexFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChunkIndexFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZeroChunkFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZeroChunkFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseChunkIndexFilterStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseChunkIndexFilterStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GarbageCollectorStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GarbageCollectorStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RabinChunkerStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RabinChunkerStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentStorageStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentStorageStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStatsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogStatsData_LogTypeCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogStatsData_LogTypeCounter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dedupv1_5fstats_2eproto() {
  protobuf_AddDesc_dedupv1_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dedupv1_stats.proto");
  GOOGLE_CHECK(file != NULL);
  ChunkIndexStatsData_descriptor_ = file->message_type(0);
  static const int ChunkIndexStatsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexStatsData, imported_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexStatsData, index_full_failure_count_),
  };
  ChunkIndexStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkIndexStatsData_descriptor_,
      ChunkIndexStatsData::default_instance_,
      ChunkIndexStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkIndexStatsData));
  BlockIndexStatsData_descriptor_ = file->message_type(1);
  static const int BlockIndexStatsData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, index_read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, index_write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, index_real_write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, imported_block_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, failed_block_write_count_),
  };
  BlockIndexStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockIndexStatsData_descriptor_,
      BlockIndexStatsData::default_instance_,
      BlockIndexStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockIndexStatsData));
  ChunkStoreStatsData_descriptor_ = file->message_type(2);
  static const int ChunkStoreStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkStoreStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkStoreStatsData, write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkStoreStatsData, real_write_count_),
  };
  ChunkStoreStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkStoreStatsData_descriptor_,
      ChunkStoreStatsData::default_instance_,
      ChunkStoreStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkStoreStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkStoreStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkStoreStatsData));
  ContainerStorageWriteCacheStatsData_descriptor_ = file->message_type(3);
  static const int ContainerStorageWriteCacheStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageWriteCacheStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageWriteCacheStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageWriteCacheStatsData, check_count_),
  };
  ContainerStorageWriteCacheStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStorageWriteCacheStatsData_descriptor_,
      ContainerStorageWriteCacheStatsData::default_instance_,
      ContainerStorageWriteCacheStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageWriteCacheStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageWriteCacheStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStorageWriteCacheStatsData));
  ContainerStorageStatsData_descriptor_ = file->message_type(4);
  static const int ContainerStorageStatsData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, write_cache_hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, container_timeout_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, readed_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, committed_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, moved_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, merged_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, failed_container_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, deleted_container_count_),
  };
  ContainerStorageStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStorageStatsData_descriptor_,
      ContainerStorageStatsData::default_instance_,
      ContainerStorageStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStorageStatsData));
  ContainerStorageReadCacheStatsData_descriptor_ = file->message_type(5);
  static const int ContainerStorageReadCacheStatsData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, check_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, update_count_),
  };
  ContainerStorageReadCacheStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStorageReadCacheStatsData_descriptor_,
      ContainerStorageReadCacheStatsData::default_instance_,
      ContainerStorageReadCacheStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStorageReadCacheStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStorageReadCacheStatsData));
  BlockIndexFilterStatsData_descriptor_ = file->message_type(6);
  static const int BlockIndexFilterStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexFilterStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexFilterStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexFilterStatsData, read_count_),
  };
  BlockIndexFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockIndexFilterStatsData_descriptor_,
      BlockIndexFilterStatsData::default_instance_,
      BlockIndexFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockIndexFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockIndexFilterStatsData));
  BloomFilterStatsData_descriptor_ = file->message_type(7);
  static const int BloomFilterStatsData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, write_count_),
  };
  BloomFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BloomFilterStatsData_descriptor_,
      BloomFilterStatsData::default_instance_,
      BloomFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BloomFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BloomFilterStatsData));
  ByteCompareFilterStatsData_descriptor_ = file->message_type(8);
  static const int ByteCompareFilterStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteCompareFilterStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteCompareFilterStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteCompareFilterStatsData, read_count_),
  };
  ByteCompareFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ByteCompareFilterStatsData_descriptor_,
      ByteCompareFilterStatsData::default_instance_,
      ByteCompareFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteCompareFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ByteCompareFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ByteCompareFilterStatsData));
  ChunkIndexFilterStatsData_descriptor_ = file->message_type(9);
  static const int ChunkIndexFilterStatsData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, failure_count_),
  };
  ChunkIndexFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChunkIndexFilterStatsData_descriptor_,
      ChunkIndexFilterStatsData::default_instance_,
      ChunkIndexFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChunkIndexFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChunkIndexFilterStatsData));
  ZeroChunkFilterStatsData_descriptor_ = file->message_type(10);
  static const int ZeroChunkFilterStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroChunkFilterStatsData, existing_hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroChunkFilterStatsData, weak_hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroChunkFilterStatsData, read_count_),
  };
  ZeroChunkFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZeroChunkFilterStatsData_descriptor_,
      ZeroChunkFilterStatsData::default_instance_,
      ZeroChunkFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroChunkFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroChunkFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZeroChunkFilterStatsData));
  SparseChunkIndexFilterStatsData_descriptor_ = file->message_type(11);
  static const int SparseChunkIndexFilterStatsData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, strong_hit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, miss_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, failure_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, anchor_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, weak_hit_count_),
  };
  SparseChunkIndexFilterStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseChunkIndexFilterStatsData_descriptor_,
      SparseChunkIndexFilterStatsData::default_instance_,
      SparseChunkIndexFilterStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseChunkIndexFilterStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseChunkIndexFilterStatsData));
  GarbageCollectorStatsData_descriptor_ = file->message_type(12);
  static const int GarbageCollectorStatsData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, processed_block_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, processed_gc_candidate_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, skipped_chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, already_processed_chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, processed_chunk_count_),
  };
  GarbageCollectorStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GarbageCollectorStatsData_descriptor_,
      GarbageCollectorStatsData::default_instance_,
      GarbageCollectorStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GarbageCollectorStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GarbageCollectorStatsData));
  RabinChunkerStatsData_descriptor_ = file->message_type(13);
  static const int RabinChunkerStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabinChunkerStatsData, chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabinChunkerStatsData, size_forced_chunk_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabinChunkerStatsData, close_forced_chunk_count_),
  };
  RabinChunkerStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RabinChunkerStatsData_descriptor_,
      RabinChunkerStatsData::default_instance_,
      RabinChunkerStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabinChunkerStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabinChunkerStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RabinChunkerStatsData));
  ContentStorageStatsData_descriptor_ = file->message_type(14);
  static const int ContentStorageStatsData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, read_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, write_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, read_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, write_size_),
  };
  ContentStorageStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentStorageStatsData_descriptor_,
      ContentStorageStatsData::default_instance_,
      ContentStorageStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentStorageStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentStorageStatsData));
  LogStatsData_descriptor_ = file->message_type(15);
  static const int LogStatsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData, event_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData, replayed_event_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData, logtype_count_),
  };
  LogStatsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStatsData_descriptor_,
      LogStatsData::default_instance_,
      LogStatsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStatsData));
  LogStatsData_LogTypeCounter_descriptor_ = LogStatsData_descriptor_->nested_type(0);
  static const int LogStatsData_LogTypeCounter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData_LogTypeCounter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData_LogTypeCounter, count_),
  };
  LogStatsData_LogTypeCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogStatsData_LogTypeCounter_descriptor_,
      LogStatsData_LogTypeCounter::default_instance_,
      LogStatsData_LogTypeCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData_LogTypeCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogStatsData_LogTypeCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogStatsData_LogTypeCounter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dedupv1_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkIndexStatsData_descriptor_, &ChunkIndexStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockIndexStatsData_descriptor_, &BlockIndexStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkStoreStatsData_descriptor_, &ChunkStoreStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStorageWriteCacheStatsData_descriptor_, &ContainerStorageWriteCacheStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStorageStatsData_descriptor_, &ContainerStorageStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStorageReadCacheStatsData_descriptor_, &ContainerStorageReadCacheStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockIndexFilterStatsData_descriptor_, &BlockIndexFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BloomFilterStatsData_descriptor_, &BloomFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ByteCompareFilterStatsData_descriptor_, &ByteCompareFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChunkIndexFilterStatsData_descriptor_, &ChunkIndexFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZeroChunkFilterStatsData_descriptor_, &ZeroChunkFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseChunkIndexFilterStatsData_descriptor_, &SparseChunkIndexFilterStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GarbageCollectorStatsData_descriptor_, &GarbageCollectorStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RabinChunkerStatsData_descriptor_, &RabinChunkerStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentStorageStatsData_descriptor_, &ContentStorageStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStatsData_descriptor_, &LogStatsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogStatsData_LogTypeCounter_descriptor_, &LogStatsData_LogTypeCounter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dedupv1_5fstats_2eproto() {
  delete ChunkIndexStatsData::default_instance_;
  delete ChunkIndexStatsData_reflection_;
  delete BlockIndexStatsData::default_instance_;
  delete BlockIndexStatsData_reflection_;
  delete ChunkStoreStatsData::default_instance_;
  delete ChunkStoreStatsData_reflection_;
  delete ContainerStorageWriteCacheStatsData::default_instance_;
  delete ContainerStorageWriteCacheStatsData_reflection_;
  delete ContainerStorageStatsData::default_instance_;
  delete ContainerStorageStatsData_reflection_;
  delete ContainerStorageReadCacheStatsData::default_instance_;
  delete ContainerStorageReadCacheStatsData_reflection_;
  delete BlockIndexFilterStatsData::default_instance_;
  delete BlockIndexFilterStatsData_reflection_;
  delete BloomFilterStatsData::default_instance_;
  delete BloomFilterStatsData_reflection_;
  delete ByteCompareFilterStatsData::default_instance_;
  delete ByteCompareFilterStatsData_reflection_;
  delete ChunkIndexFilterStatsData::default_instance_;
  delete ChunkIndexFilterStatsData_reflection_;
  delete ZeroChunkFilterStatsData::default_instance_;
  delete ZeroChunkFilterStatsData_reflection_;
  delete SparseChunkIndexFilterStatsData::default_instance_;
  delete SparseChunkIndexFilterStatsData_reflection_;
  delete GarbageCollectorStatsData::default_instance_;
  delete GarbageCollectorStatsData_reflection_;
  delete RabinChunkerStatsData::default_instance_;
  delete RabinChunkerStatsData_reflection_;
  delete ContentStorageStatsData::default_instance_;
  delete ContentStorageStatsData_reflection_;
  delete LogStatsData::default_instance_;
  delete LogStatsData_reflection_;
  delete LogStatsData_LogTypeCounter::default_instance_;
  delete LogStatsData_LogTypeCounter_reflection_;
}

void protobuf_AddDesc_dedupv1_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023dedupv1_stats.proto\"Y\n\023ChunkIndexStats"
    "Data\022 \n\030imported_container_count\030\001 \001(\004\022 "
    "\n\030index_full_failure_count\030\002 \001(\004\"\252\001\n\023Blo"
    "ckIndexStatsData\022\030\n\020index_read_count\030\001 \001"
    "(\004\022\031\n\021index_write_count\030\002 \001(\004\022\036\n\026index_r"
    "eal_write_count\030\003 \001(\004\022\034\n\024imported_block_"
    "count\030\004 \001(\004\022 \n\030failed_block_write_count\030"
    "\005 \001(\004\"X\n\023ChunkStoreStatsData\022\022\n\nread_cou"
    "nt\030\001 \001(\004\022\023\n\013write_count\030\002 \001(\004\022\030\n\020real_wr"
    "ite_count\030\003 \001(\004\"a\n#ContainerStorageWrite"
    "CacheStatsData\022\021\n\thit_count\030\001 \001(\004\022\022\n\nmis"
    "s_count\030\002 \001(\004\022\023\n\013check_count\030\003 \001(\004\"\262\002\n\031C"
    "ontainerStorageStatsData\022\022\n\nread_count\030\001"
    " \001(\004\022\035\n\025write_cache_hit_count\030\002 \001(\004\022\037\n\027c"
    "ontainer_timeout_count\030\003 \001(\004\022\036\n\026readed_c"
    "ontainer_count\030\004 \001(\004\022!\n\031committed_contai"
    "ner_count\030\005 \001(\004\022\035\n\025moved_container_count"
    "\030\006 \001(\004\022\036\n\026merged_container_count\030\007 \001(\004\022\036"
    "\n\026failed_container_count\030\010 \001(\004\022\037\n\027delete"
    "d_container_count\030\t \001(\004\"v\n\"ContainerStor"
    "ageReadCacheStatsData\022\021\n\thit_count\030\001 \001(\004"
    "\022\022\n\nmiss_count\030\002 \001(\004\022\023\n\013check_count\030\003 \001("
    "\004\022\024\n\014update_count\030\004 \001(\004\"V\n\031BlockIndexFil"
    "terStatsData\022\021\n\thit_count\030\001 \001(\004\022\022\n\nmiss_"
    "count\030\002 \001(\004\022\022\n\nread_count\030\003 \001(\004\"f\n\024Bloom"
    "FilterStatsData\022\021\n\thit_count\030\001 \001(\004\022\022\n\nmi"
    "ss_count\030\002 \001(\004\022\022\n\nread_count\030\003 \001(\004\022\023\n\013wr"
    "ite_count\030\004 \001(\004\"W\n\032ByteCompareFilterStat"
    "sData\022\021\n\thit_count\030\001 \001(\004\022\022\n\nmiss_count\030\002"
    " \001(\004\022\022\n\nread_count\030\003 \001(\004\"\202\001\n\031ChunkIndexF"
    "ilterStatsData\022\021\n\thit_count\030\001 \001(\004\022\022\n\nmis"
    "s_count\030\002 \001(\004\022\022\n\nread_count\030\003 \001(\004\022\023\n\013wri"
    "te_count\030\004 \001(\004\022\025\n\rfailure_count\030\006 \001(\004\"b\n"
    "\030ZeroChunkFilterStatsData\022\032\n\022existing_hi"
    "t_count\030\001 \001(\004\022\026\n\016weak_hit_count\030\002 \001(\004\022\022\n"
    "\nread_count\030\003 \001(\004\"\275\001\n\037SparseChunkIndexFi"
    "lterStatsData\022\030\n\020strong_hit_count\030\001 \001(\004\022"
    "\022\n\nmiss_count\030\002 \001(\004\022\022\n\nread_count\030\003 \001(\004\022"
    "\023\n\013write_count\030\004 \001(\004\022\025\n\rfailure_count\030\006 "
    "\001(\004\022\024\n\014anchor_count\030\007 \001(\004\022\026\n\016weak_hit_co"
    "unt\030\010 \001(\004\"\303\001\n\031GarbageCollectorStatsData\022"
    "\035\n\025processed_block_count\030\001 \001(\004\022$\n\034proces"
    "sed_gc_candidate_count\030\002 \001(\004\022\033\n\023skipped_"
    "chunk_count\030\003 \001(\004\022%\n\035already_processed_c"
    "hunk_count\030\004 \001(\004\022\035\n\025processed_chunk_coun"
    "t\030\005 \001(\004\"o\n\025RabinChunkerStatsData\022\023\n\013chun"
    "k_count\030\001 \001(\004\022\037\n\027size_forced_chunk_count"
    "\030\002 \001(\004\022 \n\030close_forced_chunk_count\030\003 \001(\004"
    "\"i\n\027ContentStorageStatsData\022\022\n\nread_coun"
    "t\030\001 \001(\004\022\023\n\013write_count\030\002 \001(\004\022\021\n\tread_siz"
    "e\030\003 \001(\004\022\022\n\nwrite_size\030\004 \001(\004\"\245\001\n\014LogStats"
    "Data\022\023\n\013event_count\030\001 \001(\004\022\034\n\024replayed_ev"
    "ent_count\030\002 \001(\004\0223\n\rlogtype_count\030\003 \003(\0132\034"
    ".LogStatsData.LogTypeCounter\032-\n\016LogTypeC"
    "ounter\022\014\n\004type\030\001 \001(\005\022\r\n\005count\030\002 \001(\004", 2195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dedupv1_stats.proto", &protobuf_RegisterTypes);
  ChunkIndexStatsData::default_instance_ = new ChunkIndexStatsData();
  BlockIndexStatsData::default_instance_ = new BlockIndexStatsData();
  ChunkStoreStatsData::default_instance_ = new ChunkStoreStatsData();
  ContainerStorageWriteCacheStatsData::default_instance_ = new ContainerStorageWriteCacheStatsData();
  ContainerStorageStatsData::default_instance_ = new ContainerStorageStatsData();
  ContainerStorageReadCacheStatsData::default_instance_ = new ContainerStorageReadCacheStatsData();
  BlockIndexFilterStatsData::default_instance_ = new BlockIndexFilterStatsData();
  BloomFilterStatsData::default_instance_ = new BloomFilterStatsData();
  ByteCompareFilterStatsData::default_instance_ = new ByteCompareFilterStatsData();
  ChunkIndexFilterStatsData::default_instance_ = new ChunkIndexFilterStatsData();
  ZeroChunkFilterStatsData::default_instance_ = new ZeroChunkFilterStatsData();
  SparseChunkIndexFilterStatsData::default_instance_ = new SparseChunkIndexFilterStatsData();
  GarbageCollectorStatsData::default_instance_ = new GarbageCollectorStatsData();
  RabinChunkerStatsData::default_instance_ = new RabinChunkerStatsData();
  ContentStorageStatsData::default_instance_ = new ContentStorageStatsData();
  LogStatsData::default_instance_ = new LogStatsData();
  LogStatsData_LogTypeCounter::default_instance_ = new LogStatsData_LogTypeCounter();
  ChunkIndexStatsData::default_instance_->InitAsDefaultInstance();
  BlockIndexStatsData::default_instance_->InitAsDefaultInstance();
  ChunkStoreStatsData::default_instance_->InitAsDefaultInstance();
  ContainerStorageWriteCacheStatsData::default_instance_->InitAsDefaultInstance();
  ContainerStorageStatsData::default_instance_->InitAsDefaultInstance();
  ContainerStorageReadCacheStatsData::default_instance_->InitAsDefaultInstance();
  BlockIndexFilterStatsData::default_instance_->InitAsDefaultInstance();
  BloomFilterStatsData::default_instance_->InitAsDefaultInstance();
  ByteCompareFilterStatsData::default_instance_->InitAsDefaultInstance();
  ChunkIndexFilterStatsData::default_instance_->InitAsDefaultInstance();
  ZeroChunkFilterStatsData::default_instance_->InitAsDefaultInstance();
  SparseChunkIndexFilterStatsData::default_instance_->InitAsDefaultInstance();
  GarbageCollectorStatsData::default_instance_->InitAsDefaultInstance();
  RabinChunkerStatsData::default_instance_->InitAsDefaultInstance();
  ContentStorageStatsData::default_instance_->InitAsDefaultInstance();
  LogStatsData::default_instance_->InitAsDefaultInstance();
  LogStatsData_LogTypeCounter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dedupv1_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dedupv1_5fstats_2eproto {
  StaticDescriptorInitializer_dedupv1_5fstats_2eproto() {
    protobuf_AddDesc_dedupv1_5fstats_2eproto();
  }
} static_descriptor_initializer_dedupv1_5fstats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChunkIndexStatsData::kImportedContainerCountFieldNumber;
const int ChunkIndexStatsData::kIndexFullFailureCountFieldNumber;
#endif  // !_MSC_VER

ChunkIndexStatsData::ChunkIndexStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkIndexStatsData::InitAsDefaultInstance() {
}

ChunkIndexStatsData::ChunkIndexStatsData(const ChunkIndexStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkIndexStatsData::SharedCtor() {
  _cached_size_ = 0;
  imported_container_count_ = GOOGLE_ULONGLONG(0);
  index_full_failure_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkIndexStatsData::~ChunkIndexStatsData() {
  SharedDtor();
}

void ChunkIndexStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkIndexStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkIndexStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkIndexStatsData_descriptor_;
}

const ChunkIndexStatsData& ChunkIndexStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ChunkIndexStatsData* ChunkIndexStatsData::default_instance_ = NULL;

ChunkIndexStatsData* ChunkIndexStatsData::New() const {
  return new ChunkIndexStatsData;
}

void ChunkIndexStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imported_container_count_ = GOOGLE_ULONGLONG(0);
    index_full_failure_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkIndexStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 imported_container_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imported_container_count_)));
          set_has_imported_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_full_failure_count;
        break;
      }

      // optional uint64 index_full_failure_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_full_failure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_full_failure_count_)));
          set_has_index_full_failure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkIndexStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 imported_container_count = 1;
  if (has_imported_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->imported_container_count(), output);
  }

  // optional uint64 index_full_failure_count = 2;
  if (has_index_full_failure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index_full_failure_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkIndexStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 imported_container_count = 1;
  if (has_imported_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->imported_container_count(), target);
  }

  // optional uint64 index_full_failure_count = 2;
  if (has_index_full_failure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index_full_failure_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkIndexStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 imported_container_count = 1;
    if (has_imported_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imported_container_count());
    }

    // optional uint64 index_full_failure_count = 2;
    if (has_index_full_failure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_full_failure_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkIndexStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkIndexStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkIndexStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkIndexStatsData::MergeFrom(const ChunkIndexStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imported_container_count()) {
      set_imported_container_count(from.imported_container_count());
    }
    if (from.has_index_full_failure_count()) {
      set_index_full_failure_count(from.index_full_failure_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkIndexStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkIndexStatsData::CopyFrom(const ChunkIndexStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkIndexStatsData::IsInitialized() const {

  return true;
}

void ChunkIndexStatsData::Swap(ChunkIndexStatsData* other) {
  if (other != this) {
    std::swap(imported_container_count_, other->imported_container_count_);
    std::swap(index_full_failure_count_, other->index_full_failure_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkIndexStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkIndexStatsData_descriptor_;
  metadata.reflection = ChunkIndexStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockIndexStatsData::kIndexReadCountFieldNumber;
const int BlockIndexStatsData::kIndexWriteCountFieldNumber;
const int BlockIndexStatsData::kIndexRealWriteCountFieldNumber;
const int BlockIndexStatsData::kImportedBlockCountFieldNumber;
const int BlockIndexStatsData::kFailedBlockWriteCountFieldNumber;
#endif  // !_MSC_VER

BlockIndexStatsData::BlockIndexStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockIndexStatsData::InitAsDefaultInstance() {
}

BlockIndexStatsData::BlockIndexStatsData(const BlockIndexStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockIndexStatsData::SharedCtor() {
  _cached_size_ = 0;
  index_read_count_ = GOOGLE_ULONGLONG(0);
  index_write_count_ = GOOGLE_ULONGLONG(0);
  index_real_write_count_ = GOOGLE_ULONGLONG(0);
  imported_block_count_ = GOOGLE_ULONGLONG(0);
  failed_block_write_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockIndexStatsData::~BlockIndexStatsData() {
  SharedDtor();
}

void BlockIndexStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockIndexStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockIndexStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockIndexStatsData_descriptor_;
}

const BlockIndexStatsData& BlockIndexStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

BlockIndexStatsData* BlockIndexStatsData::default_instance_ = NULL;

BlockIndexStatsData* BlockIndexStatsData::New() const {
  return new BlockIndexStatsData;
}

void BlockIndexStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_read_count_ = GOOGLE_ULONGLONG(0);
    index_write_count_ = GOOGLE_ULONGLONG(0);
    index_real_write_count_ = GOOGLE_ULONGLONG(0);
    imported_block_count_ = GOOGLE_ULONGLONG(0);
    failed_block_write_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockIndexStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index_read_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_read_count_)));
          set_has_index_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index_write_count;
        break;
      }

      // optional uint64 index_write_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_write_count_)));
          set_has_index_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index_real_write_count;
        break;
      }

      // optional uint64 index_real_write_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_real_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_real_write_count_)));
          set_has_index_real_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_imported_block_count;
        break;
      }

      // optional uint64 imported_block_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imported_block_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imported_block_count_)));
          set_has_imported_block_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failed_block_write_count;
        break;
      }

      // optional uint64 failed_block_write_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_block_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_block_write_count_)));
          set_has_failed_block_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockIndexStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 index_read_count = 1;
  if (has_index_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index_read_count(), output);
  }

  // optional uint64 index_write_count = 2;
  if (has_index_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index_write_count(), output);
  }

  // optional uint64 index_real_write_count = 3;
  if (has_index_real_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index_real_write_count(), output);
  }

  // optional uint64 imported_block_count = 4;
  if (has_imported_block_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->imported_block_count(), output);
  }

  // optional uint64 failed_block_write_count = 5;
  if (has_failed_block_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->failed_block_write_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockIndexStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 index_read_count = 1;
  if (has_index_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index_read_count(), target);
  }

  // optional uint64 index_write_count = 2;
  if (has_index_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index_write_count(), target);
  }

  // optional uint64 index_real_write_count = 3;
  if (has_index_real_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index_real_write_count(), target);
  }

  // optional uint64 imported_block_count = 4;
  if (has_imported_block_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->imported_block_count(), target);
  }

  // optional uint64 failed_block_write_count = 5;
  if (has_failed_block_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->failed_block_write_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockIndexStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 index_read_count = 1;
    if (has_index_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_read_count());
    }

    // optional uint64 index_write_count = 2;
    if (has_index_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_write_count());
    }

    // optional uint64 index_real_write_count = 3;
    if (has_index_real_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index_real_write_count());
    }

    // optional uint64 imported_block_count = 4;
    if (has_imported_block_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imported_block_count());
    }

    // optional uint64 failed_block_write_count = 5;
    if (has_failed_block_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_block_write_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockIndexStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockIndexStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockIndexStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockIndexStatsData::MergeFrom(const BlockIndexStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index_read_count()) {
      set_index_read_count(from.index_read_count());
    }
    if (from.has_index_write_count()) {
      set_index_write_count(from.index_write_count());
    }
    if (from.has_index_real_write_count()) {
      set_index_real_write_count(from.index_real_write_count());
    }
    if (from.has_imported_block_count()) {
      set_imported_block_count(from.imported_block_count());
    }
    if (from.has_failed_block_write_count()) {
      set_failed_block_write_count(from.failed_block_write_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockIndexStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIndexStatsData::CopyFrom(const BlockIndexStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIndexStatsData::IsInitialized() const {

  return true;
}

void BlockIndexStatsData::Swap(BlockIndexStatsData* other) {
  if (other != this) {
    std::swap(index_read_count_, other->index_read_count_);
    std::swap(index_write_count_, other->index_write_count_);
    std::swap(index_real_write_count_, other->index_real_write_count_);
    std::swap(imported_block_count_, other->imported_block_count_);
    std::swap(failed_block_write_count_, other->failed_block_write_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockIndexStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockIndexStatsData_descriptor_;
  metadata.reflection = BlockIndexStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkStoreStatsData::kReadCountFieldNumber;
const int ChunkStoreStatsData::kWriteCountFieldNumber;
const int ChunkStoreStatsData::kRealWriteCountFieldNumber;
#endif  // !_MSC_VER

ChunkStoreStatsData::ChunkStoreStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkStoreStatsData::InitAsDefaultInstance() {
}

ChunkStoreStatsData::ChunkStoreStatsData(const ChunkStoreStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkStoreStatsData::SharedCtor() {
  _cached_size_ = 0;
  read_count_ = GOOGLE_ULONGLONG(0);
  write_count_ = GOOGLE_ULONGLONG(0);
  real_write_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkStoreStatsData::~ChunkStoreStatsData() {
  SharedDtor();
}

void ChunkStoreStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkStoreStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkStoreStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkStoreStatsData_descriptor_;
}

const ChunkStoreStatsData& ChunkStoreStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ChunkStoreStatsData* ChunkStoreStatsData::default_instance_ = NULL;

ChunkStoreStatsData* ChunkStoreStatsData::New() const {
  return new ChunkStoreStatsData;
}

void ChunkStoreStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    read_count_ = GOOGLE_ULONGLONG(0);
    write_count_ = GOOGLE_ULONGLONG(0);
    real_write_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkStoreStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 read_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_write_count;
        break;
      }

      // optional uint64 write_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_count_)));
          set_has_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_real_write_count;
        break;
      }

      // optional uint64 real_write_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_real_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &real_write_count_)));
          set_has_real_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkStoreStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->read_count(), output);
  }

  // optional uint64 write_count = 2;
  if (has_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->write_count(), output);
  }

  // optional uint64 real_write_count = 3;
  if (has_real_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->real_write_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkStoreStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->read_count(), target);
  }

  // optional uint64 write_count = 2;
  if (has_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->write_count(), target);
  }

  // optional uint64 real_write_count = 3;
  if (has_real_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->real_write_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkStoreStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 read_count = 1;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_count = 2;
    if (has_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_count());
    }

    // optional uint64 real_write_count = 3;
    if (has_real_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->real_write_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkStoreStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkStoreStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkStoreStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkStoreStatsData::MergeFrom(const ChunkStoreStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_count()) {
      set_write_count(from.write_count());
    }
    if (from.has_real_write_count()) {
      set_real_write_count(from.real_write_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkStoreStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkStoreStatsData::CopyFrom(const ChunkStoreStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkStoreStatsData::IsInitialized() const {

  return true;
}

void ChunkStoreStatsData::Swap(ChunkStoreStatsData* other) {
  if (other != this) {
    std::swap(read_count_, other->read_count_);
    std::swap(write_count_, other->write_count_);
    std::swap(real_write_count_, other->real_write_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkStoreStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkStoreStatsData_descriptor_;
  metadata.reflection = ChunkStoreStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerStorageWriteCacheStatsData::kHitCountFieldNumber;
const int ContainerStorageWriteCacheStatsData::kMissCountFieldNumber;
const int ContainerStorageWriteCacheStatsData::kCheckCountFieldNumber;
#endif  // !_MSC_VER

ContainerStorageWriteCacheStatsData::ContainerStorageWriteCacheStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerStorageWriteCacheStatsData::InitAsDefaultInstance() {
}

ContainerStorageWriteCacheStatsData::ContainerStorageWriteCacheStatsData(const ContainerStorageWriteCacheStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerStorageWriteCacheStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  check_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStorageWriteCacheStatsData::~ContainerStorageWriteCacheStatsData() {
  SharedDtor();
}

void ContainerStorageWriteCacheStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerStorageWriteCacheStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStorageWriteCacheStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStorageWriteCacheStatsData_descriptor_;
}

const ContainerStorageWriteCacheStatsData& ContainerStorageWriteCacheStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ContainerStorageWriteCacheStatsData* ContainerStorageWriteCacheStatsData::default_instance_ = NULL;

ContainerStorageWriteCacheStatsData* ContainerStorageWriteCacheStatsData::New() const {
  return new ContainerStorageWriteCacheStatsData;
}

void ContainerStorageWriteCacheStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    check_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStorageWriteCacheStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_count;
        break;
      }

      // optional uint64 check_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &check_count_)));
          set_has_check_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerStorageWriteCacheStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 check_count = 3;
  if (has_check_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->check_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerStorageWriteCacheStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 check_count = 3;
  if (has_check_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->check_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerStorageWriteCacheStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 check_count = 3;
    if (has_check_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->check_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStorageWriteCacheStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStorageWriteCacheStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStorageWriteCacheStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStorageWriteCacheStatsData::MergeFrom(const ContainerStorageWriteCacheStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_check_count()) {
      set_check_count(from.check_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStorageWriteCacheStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStorageWriteCacheStatsData::CopyFrom(const ContainerStorageWriteCacheStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStorageWriteCacheStatsData::IsInitialized() const {

  return true;
}

void ContainerStorageWriteCacheStatsData::Swap(ContainerStorageWriteCacheStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(check_count_, other->check_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStorageWriteCacheStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStorageWriteCacheStatsData_descriptor_;
  metadata.reflection = ContainerStorageWriteCacheStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerStorageStatsData::kReadCountFieldNumber;
const int ContainerStorageStatsData::kWriteCacheHitCountFieldNumber;
const int ContainerStorageStatsData::kContainerTimeoutCountFieldNumber;
const int ContainerStorageStatsData::kReadedContainerCountFieldNumber;
const int ContainerStorageStatsData::kCommittedContainerCountFieldNumber;
const int ContainerStorageStatsData::kMovedContainerCountFieldNumber;
const int ContainerStorageStatsData::kMergedContainerCountFieldNumber;
const int ContainerStorageStatsData::kFailedContainerCountFieldNumber;
const int ContainerStorageStatsData::kDeletedContainerCountFieldNumber;
#endif  // !_MSC_VER

ContainerStorageStatsData::ContainerStorageStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerStorageStatsData::InitAsDefaultInstance() {
}

ContainerStorageStatsData::ContainerStorageStatsData(const ContainerStorageStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerStorageStatsData::SharedCtor() {
  _cached_size_ = 0;
  read_count_ = GOOGLE_ULONGLONG(0);
  write_cache_hit_count_ = GOOGLE_ULONGLONG(0);
  container_timeout_count_ = GOOGLE_ULONGLONG(0);
  readed_container_count_ = GOOGLE_ULONGLONG(0);
  committed_container_count_ = GOOGLE_ULONGLONG(0);
  moved_container_count_ = GOOGLE_ULONGLONG(0);
  merged_container_count_ = GOOGLE_ULONGLONG(0);
  failed_container_count_ = GOOGLE_ULONGLONG(0);
  deleted_container_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStorageStatsData::~ContainerStorageStatsData() {
  SharedDtor();
}

void ContainerStorageStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerStorageStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStorageStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStorageStatsData_descriptor_;
}

const ContainerStorageStatsData& ContainerStorageStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ContainerStorageStatsData* ContainerStorageStatsData::default_instance_ = NULL;

ContainerStorageStatsData* ContainerStorageStatsData::New() const {
  return new ContainerStorageStatsData;
}

void ContainerStorageStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    read_count_ = GOOGLE_ULONGLONG(0);
    write_cache_hit_count_ = GOOGLE_ULONGLONG(0);
    container_timeout_count_ = GOOGLE_ULONGLONG(0);
    readed_container_count_ = GOOGLE_ULONGLONG(0);
    committed_container_count_ = GOOGLE_ULONGLONG(0);
    moved_container_count_ = GOOGLE_ULONGLONG(0);
    merged_container_count_ = GOOGLE_ULONGLONG(0);
    failed_container_count_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    deleted_container_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStorageStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 read_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_write_cache_hit_count;
        break;
      }

      // optional uint64 write_cache_hit_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_cache_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_cache_hit_count_)));
          set_has_write_cache_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_container_timeout_count;
        break;
      }

      // optional uint64 container_timeout_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_timeout_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &container_timeout_count_)));
          set_has_container_timeout_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_readed_container_count;
        break;
      }

      // optional uint64 readed_container_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readed_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &readed_container_count_)));
          set_has_readed_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_committed_container_count;
        break;
      }

      // optional uint64 committed_container_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_committed_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &committed_container_count_)));
          set_has_committed_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_moved_container_count;
        break;
      }

      // optional uint64 moved_container_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moved_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &moved_container_count_)));
          set_has_moved_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_merged_container_count;
        break;
      }

      // optional uint64 merged_container_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merged_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &merged_container_count_)));
          set_has_merged_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_failed_container_count;
        break;
      }

      // optional uint64 failed_container_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failed_container_count_)));
          set_has_failed_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_deleted_container_count;
        break;
      }

      // optional uint64 deleted_container_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deleted_container_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deleted_container_count_)));
          set_has_deleted_container_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerStorageStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->read_count(), output);
  }

  // optional uint64 write_cache_hit_count = 2;
  if (has_write_cache_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->write_cache_hit_count(), output);
  }

  // optional uint64 container_timeout_count = 3;
  if (has_container_timeout_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->container_timeout_count(), output);
  }

  // optional uint64 readed_container_count = 4;
  if (has_readed_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->readed_container_count(), output);
  }

  // optional uint64 committed_container_count = 5;
  if (has_committed_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->committed_container_count(), output);
  }

  // optional uint64 moved_container_count = 6;
  if (has_moved_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->moved_container_count(), output);
  }

  // optional uint64 merged_container_count = 7;
  if (has_merged_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->merged_container_count(), output);
  }

  // optional uint64 failed_container_count = 8;
  if (has_failed_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->failed_container_count(), output);
  }

  // optional uint64 deleted_container_count = 9;
  if (has_deleted_container_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->deleted_container_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerStorageStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->read_count(), target);
  }

  // optional uint64 write_cache_hit_count = 2;
  if (has_write_cache_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->write_cache_hit_count(), target);
  }

  // optional uint64 container_timeout_count = 3;
  if (has_container_timeout_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->container_timeout_count(), target);
  }

  // optional uint64 readed_container_count = 4;
  if (has_readed_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->readed_container_count(), target);
  }

  // optional uint64 committed_container_count = 5;
  if (has_committed_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->committed_container_count(), target);
  }

  // optional uint64 moved_container_count = 6;
  if (has_moved_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->moved_container_count(), target);
  }

  // optional uint64 merged_container_count = 7;
  if (has_merged_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->merged_container_count(), target);
  }

  // optional uint64 failed_container_count = 8;
  if (has_failed_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->failed_container_count(), target);
  }

  // optional uint64 deleted_container_count = 9;
  if (has_deleted_container_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->deleted_container_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerStorageStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 read_count = 1;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_cache_hit_count = 2;
    if (has_write_cache_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_cache_hit_count());
    }

    // optional uint64 container_timeout_count = 3;
    if (has_container_timeout_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->container_timeout_count());
    }

    // optional uint64 readed_container_count = 4;
    if (has_readed_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->readed_container_count());
    }

    // optional uint64 committed_container_count = 5;
    if (has_committed_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->committed_container_count());
    }

    // optional uint64 moved_container_count = 6;
    if (has_moved_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->moved_container_count());
    }

    // optional uint64 merged_container_count = 7;
    if (has_merged_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->merged_container_count());
    }

    // optional uint64 failed_container_count = 8;
    if (has_failed_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failed_container_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 deleted_container_count = 9;
    if (has_deleted_container_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deleted_container_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStorageStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStorageStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStorageStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStorageStatsData::MergeFrom(const ContainerStorageStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_cache_hit_count()) {
      set_write_cache_hit_count(from.write_cache_hit_count());
    }
    if (from.has_container_timeout_count()) {
      set_container_timeout_count(from.container_timeout_count());
    }
    if (from.has_readed_container_count()) {
      set_readed_container_count(from.readed_container_count());
    }
    if (from.has_committed_container_count()) {
      set_committed_container_count(from.committed_container_count());
    }
    if (from.has_moved_container_count()) {
      set_moved_container_count(from.moved_container_count());
    }
    if (from.has_merged_container_count()) {
      set_merged_container_count(from.merged_container_count());
    }
    if (from.has_failed_container_count()) {
      set_failed_container_count(from.failed_container_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deleted_container_count()) {
      set_deleted_container_count(from.deleted_container_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStorageStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStorageStatsData::CopyFrom(const ContainerStorageStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStorageStatsData::IsInitialized() const {

  return true;
}

void ContainerStorageStatsData::Swap(ContainerStorageStatsData* other) {
  if (other != this) {
    std::swap(read_count_, other->read_count_);
    std::swap(write_cache_hit_count_, other->write_cache_hit_count_);
    std::swap(container_timeout_count_, other->container_timeout_count_);
    std::swap(readed_container_count_, other->readed_container_count_);
    std::swap(committed_container_count_, other->committed_container_count_);
    std::swap(moved_container_count_, other->moved_container_count_);
    std::swap(merged_container_count_, other->merged_container_count_);
    std::swap(failed_container_count_, other->failed_container_count_);
    std::swap(deleted_container_count_, other->deleted_container_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStorageStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStorageStatsData_descriptor_;
  metadata.reflection = ContainerStorageStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerStorageReadCacheStatsData::kHitCountFieldNumber;
const int ContainerStorageReadCacheStatsData::kMissCountFieldNumber;
const int ContainerStorageReadCacheStatsData::kCheckCountFieldNumber;
const int ContainerStorageReadCacheStatsData::kUpdateCountFieldNumber;
#endif  // !_MSC_VER

ContainerStorageReadCacheStatsData::ContainerStorageReadCacheStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerStorageReadCacheStatsData::InitAsDefaultInstance() {
}

ContainerStorageReadCacheStatsData::ContainerStorageReadCacheStatsData(const ContainerStorageReadCacheStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerStorageReadCacheStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  check_count_ = GOOGLE_ULONGLONG(0);
  update_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStorageReadCacheStatsData::~ContainerStorageReadCacheStatsData() {
  SharedDtor();
}

void ContainerStorageReadCacheStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerStorageReadCacheStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStorageReadCacheStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStorageReadCacheStatsData_descriptor_;
}

const ContainerStorageReadCacheStatsData& ContainerStorageReadCacheStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ContainerStorageReadCacheStatsData* ContainerStorageReadCacheStatsData::default_instance_ = NULL;

ContainerStorageReadCacheStatsData* ContainerStorageReadCacheStatsData::New() const {
  return new ContainerStorageReadCacheStatsData;
}

void ContainerStorageReadCacheStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    check_count_ = GOOGLE_ULONGLONG(0);
    update_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStorageReadCacheStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_count;
        break;
      }

      // optional uint64 check_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &check_count_)));
          set_has_check_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_count;
        break;
      }

      // optional uint64 update_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_count_)));
          set_has_update_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerStorageReadCacheStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 check_count = 3;
  if (has_check_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->check_count(), output);
  }

  // optional uint64 update_count = 4;
  if (has_update_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->update_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerStorageReadCacheStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 check_count = 3;
  if (has_check_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->check_count(), target);
  }

  // optional uint64 update_count = 4;
  if (has_update_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->update_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerStorageReadCacheStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 check_count = 3;
    if (has_check_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->check_count());
    }

    // optional uint64 update_count = 4;
    if (has_update_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStorageReadCacheStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStorageReadCacheStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStorageReadCacheStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStorageReadCacheStatsData::MergeFrom(const ContainerStorageReadCacheStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_check_count()) {
      set_check_count(from.check_count());
    }
    if (from.has_update_count()) {
      set_update_count(from.update_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStorageReadCacheStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStorageReadCacheStatsData::CopyFrom(const ContainerStorageReadCacheStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStorageReadCacheStatsData::IsInitialized() const {

  return true;
}

void ContainerStorageReadCacheStatsData::Swap(ContainerStorageReadCacheStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(check_count_, other->check_count_);
    std::swap(update_count_, other->update_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStorageReadCacheStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStorageReadCacheStatsData_descriptor_;
  metadata.reflection = ContainerStorageReadCacheStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockIndexFilterStatsData::kHitCountFieldNumber;
const int BlockIndexFilterStatsData::kMissCountFieldNumber;
const int BlockIndexFilterStatsData::kReadCountFieldNumber;
#endif  // !_MSC_VER

BlockIndexFilterStatsData::BlockIndexFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockIndexFilterStatsData::InitAsDefaultInstance() {
}

BlockIndexFilterStatsData::BlockIndexFilterStatsData(const BlockIndexFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockIndexFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockIndexFilterStatsData::~BlockIndexFilterStatsData() {
  SharedDtor();
}

void BlockIndexFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockIndexFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockIndexFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockIndexFilterStatsData_descriptor_;
}

const BlockIndexFilterStatsData& BlockIndexFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

BlockIndexFilterStatsData* BlockIndexFilterStatsData::default_instance_ = NULL;

BlockIndexFilterStatsData* BlockIndexFilterStatsData::New() const {
  return new BlockIndexFilterStatsData;
}

void BlockIndexFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockIndexFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockIndexFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockIndexFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockIndexFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockIndexFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockIndexFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockIndexFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockIndexFilterStatsData::MergeFrom(const BlockIndexFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockIndexFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockIndexFilterStatsData::CopyFrom(const BlockIndexFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockIndexFilterStatsData::IsInitialized() const {

  return true;
}

void BlockIndexFilterStatsData::Swap(BlockIndexFilterStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockIndexFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockIndexFilterStatsData_descriptor_;
  metadata.reflection = BlockIndexFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BloomFilterStatsData::kHitCountFieldNumber;
const int BloomFilterStatsData::kMissCountFieldNumber;
const int BloomFilterStatsData::kReadCountFieldNumber;
const int BloomFilterStatsData::kWriteCountFieldNumber;
#endif  // !_MSC_VER

BloomFilterStatsData::BloomFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BloomFilterStatsData::InitAsDefaultInstance() {
}

BloomFilterStatsData::BloomFilterStatsData(const BloomFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BloomFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  write_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BloomFilterStatsData::~BloomFilterStatsData() {
  SharedDtor();
}

void BloomFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BloomFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BloomFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BloomFilterStatsData_descriptor_;
}

const BloomFilterStatsData& BloomFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

BloomFilterStatsData* BloomFilterStatsData::default_instance_ = NULL;

BloomFilterStatsData* BloomFilterStatsData::New() const {
  return new BloomFilterStatsData;
}

void BloomFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
    write_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BloomFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_write_count;
        break;
      }

      // optional uint64 write_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_count_)));
          set_has_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BloomFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BloomFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BloomFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_count = 4;
    if (has_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BloomFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BloomFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BloomFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BloomFilterStatsData::MergeFrom(const BloomFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_count()) {
      set_write_count(from.write_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BloomFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BloomFilterStatsData::CopyFrom(const BloomFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BloomFilterStatsData::IsInitialized() const {

  return true;
}

void BloomFilterStatsData::Swap(BloomFilterStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(write_count_, other->write_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BloomFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BloomFilterStatsData_descriptor_;
  metadata.reflection = BloomFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ByteCompareFilterStatsData::kHitCountFieldNumber;
const int ByteCompareFilterStatsData::kMissCountFieldNumber;
const int ByteCompareFilterStatsData::kReadCountFieldNumber;
#endif  // !_MSC_VER

ByteCompareFilterStatsData::ByteCompareFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ByteCompareFilterStatsData::InitAsDefaultInstance() {
}

ByteCompareFilterStatsData::ByteCompareFilterStatsData(const ByteCompareFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ByteCompareFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ByteCompareFilterStatsData::~ByteCompareFilterStatsData() {
  SharedDtor();
}

void ByteCompareFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ByteCompareFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ByteCompareFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ByteCompareFilterStatsData_descriptor_;
}

const ByteCompareFilterStatsData& ByteCompareFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ByteCompareFilterStatsData* ByteCompareFilterStatsData::default_instance_ = NULL;

ByteCompareFilterStatsData* ByteCompareFilterStatsData::New() const {
  return new ByteCompareFilterStatsData;
}

void ByteCompareFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ByteCompareFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ByteCompareFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ByteCompareFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ByteCompareFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ByteCompareFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ByteCompareFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ByteCompareFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ByteCompareFilterStatsData::MergeFrom(const ByteCompareFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ByteCompareFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ByteCompareFilterStatsData::CopyFrom(const ByteCompareFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ByteCompareFilterStatsData::IsInitialized() const {

  return true;
}

void ByteCompareFilterStatsData::Swap(ByteCompareFilterStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ByteCompareFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ByteCompareFilterStatsData_descriptor_;
  metadata.reflection = ByteCompareFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChunkIndexFilterStatsData::kHitCountFieldNumber;
const int ChunkIndexFilterStatsData::kMissCountFieldNumber;
const int ChunkIndexFilterStatsData::kReadCountFieldNumber;
const int ChunkIndexFilterStatsData::kWriteCountFieldNumber;
const int ChunkIndexFilterStatsData::kFailureCountFieldNumber;
#endif  // !_MSC_VER

ChunkIndexFilterStatsData::ChunkIndexFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChunkIndexFilterStatsData::InitAsDefaultInstance() {
}

ChunkIndexFilterStatsData::ChunkIndexFilterStatsData(const ChunkIndexFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChunkIndexFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  write_count_ = GOOGLE_ULONGLONG(0);
  failure_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChunkIndexFilterStatsData::~ChunkIndexFilterStatsData() {
  SharedDtor();
}

void ChunkIndexFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChunkIndexFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChunkIndexFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChunkIndexFilterStatsData_descriptor_;
}

const ChunkIndexFilterStatsData& ChunkIndexFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ChunkIndexFilterStatsData* ChunkIndexFilterStatsData::default_instance_ = NULL;

ChunkIndexFilterStatsData* ChunkIndexFilterStatsData::New() const {
  return new ChunkIndexFilterStatsData;
}

void ChunkIndexFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
    write_count_ = GOOGLE_ULONGLONG(0);
    failure_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChunkIndexFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_count_)));
          set_has_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_write_count;
        break;
      }

      // optional uint64 write_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_count_)));
          set_has_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_failure_count;
        break;
      }

      // optional uint64 failure_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failure_count_)));
          set_has_failure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChunkIndexFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_count(), output);
  }

  // optional uint64 failure_count = 6;
  if (has_failure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->failure_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChunkIndexFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 hit_count = 1;
  if (has_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_count(), target);
  }

  // optional uint64 failure_count = 6;
  if (has_failure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->failure_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChunkIndexFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 hit_count = 1;
    if (has_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_count = 4;
    if (has_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_count());
    }

    // optional uint64 failure_count = 6;
    if (has_failure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failure_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChunkIndexFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChunkIndexFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChunkIndexFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChunkIndexFilterStatsData::MergeFrom(const ChunkIndexFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit_count()) {
      set_hit_count(from.hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_count()) {
      set_write_count(from.write_count());
    }
    if (from.has_failure_count()) {
      set_failure_count(from.failure_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChunkIndexFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkIndexFilterStatsData::CopyFrom(const ChunkIndexFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkIndexFilterStatsData::IsInitialized() const {

  return true;
}

void ChunkIndexFilterStatsData::Swap(ChunkIndexFilterStatsData* other) {
  if (other != this) {
    std::swap(hit_count_, other->hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(write_count_, other->write_count_);
    std::swap(failure_count_, other->failure_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChunkIndexFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChunkIndexFilterStatsData_descriptor_;
  metadata.reflection = ChunkIndexFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZeroChunkFilterStatsData::kExistingHitCountFieldNumber;
const int ZeroChunkFilterStatsData::kWeakHitCountFieldNumber;
const int ZeroChunkFilterStatsData::kReadCountFieldNumber;
#endif  // !_MSC_VER

ZeroChunkFilterStatsData::ZeroChunkFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZeroChunkFilterStatsData::InitAsDefaultInstance() {
}

ZeroChunkFilterStatsData::ZeroChunkFilterStatsData(const ZeroChunkFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZeroChunkFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  existing_hit_count_ = GOOGLE_ULONGLONG(0);
  weak_hit_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZeroChunkFilterStatsData::~ZeroChunkFilterStatsData() {
  SharedDtor();
}

void ZeroChunkFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZeroChunkFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZeroChunkFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZeroChunkFilterStatsData_descriptor_;
}

const ZeroChunkFilterStatsData& ZeroChunkFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ZeroChunkFilterStatsData* ZeroChunkFilterStatsData::default_instance_ = NULL;

ZeroChunkFilterStatsData* ZeroChunkFilterStatsData::New() const {
  return new ZeroChunkFilterStatsData;
}

void ZeroChunkFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    existing_hit_count_ = GOOGLE_ULONGLONG(0);
    weak_hit_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZeroChunkFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 existing_hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &existing_hit_count_)));
          set_has_existing_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weak_hit_count;
        break;
      }

      // optional uint64 weak_hit_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weak_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weak_hit_count_)));
          set_has_weak_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZeroChunkFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 existing_hit_count = 1;
  if (has_existing_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->existing_hit_count(), output);
  }

  // optional uint64 weak_hit_count = 2;
  if (has_weak_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->weak_hit_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZeroChunkFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 existing_hit_count = 1;
  if (has_existing_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->existing_hit_count(), target);
  }

  // optional uint64 weak_hit_count = 2;
  if (has_weak_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->weak_hit_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZeroChunkFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 existing_hit_count = 1;
    if (has_existing_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->existing_hit_count());
    }

    // optional uint64 weak_hit_count = 2;
    if (has_weak_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weak_hit_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZeroChunkFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZeroChunkFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZeroChunkFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZeroChunkFilterStatsData::MergeFrom(const ZeroChunkFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_existing_hit_count()) {
      set_existing_hit_count(from.existing_hit_count());
    }
    if (from.has_weak_hit_count()) {
      set_weak_hit_count(from.weak_hit_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZeroChunkFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZeroChunkFilterStatsData::CopyFrom(const ZeroChunkFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroChunkFilterStatsData::IsInitialized() const {

  return true;
}

void ZeroChunkFilterStatsData::Swap(ZeroChunkFilterStatsData* other) {
  if (other != this) {
    std::swap(existing_hit_count_, other->existing_hit_count_);
    std::swap(weak_hit_count_, other->weak_hit_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZeroChunkFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZeroChunkFilterStatsData_descriptor_;
  metadata.reflection = ZeroChunkFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparseChunkIndexFilterStatsData::kStrongHitCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kMissCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kReadCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kWriteCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kFailureCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kAnchorCountFieldNumber;
const int SparseChunkIndexFilterStatsData::kWeakHitCountFieldNumber;
#endif  // !_MSC_VER

SparseChunkIndexFilterStatsData::SparseChunkIndexFilterStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseChunkIndexFilterStatsData::InitAsDefaultInstance() {
}

SparseChunkIndexFilterStatsData::SparseChunkIndexFilterStatsData(const SparseChunkIndexFilterStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseChunkIndexFilterStatsData::SharedCtor() {
  _cached_size_ = 0;
  strong_hit_count_ = GOOGLE_ULONGLONG(0);
  miss_count_ = GOOGLE_ULONGLONG(0);
  read_count_ = GOOGLE_ULONGLONG(0);
  write_count_ = GOOGLE_ULONGLONG(0);
  failure_count_ = GOOGLE_ULONGLONG(0);
  anchor_count_ = GOOGLE_ULONGLONG(0);
  weak_hit_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseChunkIndexFilterStatsData::~SparseChunkIndexFilterStatsData() {
  SharedDtor();
}

void SparseChunkIndexFilterStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SparseChunkIndexFilterStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseChunkIndexFilterStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseChunkIndexFilterStatsData_descriptor_;
}

const SparseChunkIndexFilterStatsData& SparseChunkIndexFilterStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

SparseChunkIndexFilterStatsData* SparseChunkIndexFilterStatsData::default_instance_ = NULL;

SparseChunkIndexFilterStatsData* SparseChunkIndexFilterStatsData::New() const {
  return new SparseChunkIndexFilterStatsData;
}

void SparseChunkIndexFilterStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strong_hit_count_ = GOOGLE_ULONGLONG(0);
    miss_count_ = GOOGLE_ULONGLONG(0);
    read_count_ = GOOGLE_ULONGLONG(0);
    write_count_ = GOOGLE_ULONGLONG(0);
    failure_count_ = GOOGLE_ULONGLONG(0);
    anchor_count_ = GOOGLE_ULONGLONG(0);
    weak_hit_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseChunkIndexFilterStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 strong_hit_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strong_hit_count_)));
          set_has_strong_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_miss_count;
        break;
      }

      // optional uint64 miss_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_miss_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &miss_count_)));
          set_has_miss_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_count;
        break;
      }

      // optional uint64 read_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_write_count;
        break;
      }

      // optional uint64 write_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_count_)));
          set_has_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_failure_count;
        break;
      }

      // optional uint64 failure_count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failure_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &failure_count_)));
          set_has_failure_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_anchor_count;
        break;
      }

      // optional uint64 anchor_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anchor_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anchor_count_)));
          set_has_anchor_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_weak_hit_count;
        break;
      }

      // optional uint64 weak_hit_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weak_hit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weak_hit_count_)));
          set_has_weak_hit_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseChunkIndexFilterStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 strong_hit_count = 1;
  if (has_strong_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->strong_hit_count(), output);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->miss_count(), output);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_count(), output);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_count(), output);
  }

  // optional uint64 failure_count = 6;
  if (has_failure_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->failure_count(), output);
  }

  // optional uint64 anchor_count = 7;
  if (has_anchor_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->anchor_count(), output);
  }

  // optional uint64 weak_hit_count = 8;
  if (has_weak_hit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->weak_hit_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseChunkIndexFilterStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 strong_hit_count = 1;
  if (has_strong_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->strong_hit_count(), target);
  }

  // optional uint64 miss_count = 2;
  if (has_miss_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->miss_count(), target);
  }

  // optional uint64 read_count = 3;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_count(), target);
  }

  // optional uint64 write_count = 4;
  if (has_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_count(), target);
  }

  // optional uint64 failure_count = 6;
  if (has_failure_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->failure_count(), target);
  }

  // optional uint64 anchor_count = 7;
  if (has_anchor_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->anchor_count(), target);
  }

  // optional uint64 weak_hit_count = 8;
  if (has_weak_hit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->weak_hit_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseChunkIndexFilterStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 strong_hit_count = 1;
    if (has_strong_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strong_hit_count());
    }

    // optional uint64 miss_count = 2;
    if (has_miss_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->miss_count());
    }

    // optional uint64 read_count = 3;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_count = 4;
    if (has_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_count());
    }

    // optional uint64 failure_count = 6;
    if (has_failure_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->failure_count());
    }

    // optional uint64 anchor_count = 7;
    if (has_anchor_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->anchor_count());
    }

    // optional uint64 weak_hit_count = 8;
    if (has_weak_hit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weak_hit_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseChunkIndexFilterStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseChunkIndexFilterStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseChunkIndexFilterStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseChunkIndexFilterStatsData::MergeFrom(const SparseChunkIndexFilterStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strong_hit_count()) {
      set_strong_hit_count(from.strong_hit_count());
    }
    if (from.has_miss_count()) {
      set_miss_count(from.miss_count());
    }
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_count()) {
      set_write_count(from.write_count());
    }
    if (from.has_failure_count()) {
      set_failure_count(from.failure_count());
    }
    if (from.has_anchor_count()) {
      set_anchor_count(from.anchor_count());
    }
    if (from.has_weak_hit_count()) {
      set_weak_hit_count(from.weak_hit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseChunkIndexFilterStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseChunkIndexFilterStatsData::CopyFrom(const SparseChunkIndexFilterStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseChunkIndexFilterStatsData::IsInitialized() const {

  return true;
}

void SparseChunkIndexFilterStatsData::Swap(SparseChunkIndexFilterStatsData* other) {
  if (other != this) {
    std::swap(strong_hit_count_, other->strong_hit_count_);
    std::swap(miss_count_, other->miss_count_);
    std::swap(read_count_, other->read_count_);
    std::swap(write_count_, other->write_count_);
    std::swap(failure_count_, other->failure_count_);
    std::swap(anchor_count_, other->anchor_count_);
    std::swap(weak_hit_count_, other->weak_hit_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseChunkIndexFilterStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseChunkIndexFilterStatsData_descriptor_;
  metadata.reflection = SparseChunkIndexFilterStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GarbageCollectorStatsData::kProcessedBlockCountFieldNumber;
const int GarbageCollectorStatsData::kProcessedGcCandidateCountFieldNumber;
const int GarbageCollectorStatsData::kSkippedChunkCountFieldNumber;
const int GarbageCollectorStatsData::kAlreadyProcessedChunkCountFieldNumber;
const int GarbageCollectorStatsData::kProcessedChunkCountFieldNumber;
#endif  // !_MSC_VER

GarbageCollectorStatsData::GarbageCollectorStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GarbageCollectorStatsData::InitAsDefaultInstance() {
}

GarbageCollectorStatsData::GarbageCollectorStatsData(const GarbageCollectorStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GarbageCollectorStatsData::SharedCtor() {
  _cached_size_ = 0;
  processed_block_count_ = GOOGLE_ULONGLONG(0);
  processed_gc_candidate_count_ = GOOGLE_ULONGLONG(0);
  skipped_chunk_count_ = GOOGLE_ULONGLONG(0);
  already_processed_chunk_count_ = GOOGLE_ULONGLONG(0);
  processed_chunk_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GarbageCollectorStatsData::~GarbageCollectorStatsData() {
  SharedDtor();
}

void GarbageCollectorStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GarbageCollectorStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GarbageCollectorStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GarbageCollectorStatsData_descriptor_;
}

const GarbageCollectorStatsData& GarbageCollectorStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

GarbageCollectorStatsData* GarbageCollectorStatsData::default_instance_ = NULL;

GarbageCollectorStatsData* GarbageCollectorStatsData::New() const {
  return new GarbageCollectorStatsData;
}

void GarbageCollectorStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    processed_block_count_ = GOOGLE_ULONGLONG(0);
    processed_gc_candidate_count_ = GOOGLE_ULONGLONG(0);
    skipped_chunk_count_ = GOOGLE_ULONGLONG(0);
    already_processed_chunk_count_ = GOOGLE_ULONGLONG(0);
    processed_chunk_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GarbageCollectorStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 processed_block_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &processed_block_count_)));
          set_has_processed_block_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_processed_gc_candidate_count;
        break;
      }

      // optional uint64 processed_gc_candidate_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processed_gc_candidate_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &processed_gc_candidate_count_)));
          set_has_processed_gc_candidate_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skipped_chunk_count;
        break;
      }

      // optional uint64 skipped_chunk_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skipped_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skipped_chunk_count_)));
          set_has_skipped_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_already_processed_chunk_count;
        break;
      }

      // optional uint64 already_processed_chunk_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_processed_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &already_processed_chunk_count_)));
          set_has_already_processed_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_processed_chunk_count;
        break;
      }

      // optional uint64 processed_chunk_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processed_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &processed_chunk_count_)));
          set_has_processed_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GarbageCollectorStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 processed_block_count = 1;
  if (has_processed_block_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->processed_block_count(), output);
  }

  // optional uint64 processed_gc_candidate_count = 2;
  if (has_processed_gc_candidate_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->processed_gc_candidate_count(), output);
  }

  // optional uint64 skipped_chunk_count = 3;
  if (has_skipped_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->skipped_chunk_count(), output);
  }

  // optional uint64 already_processed_chunk_count = 4;
  if (has_already_processed_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->already_processed_chunk_count(), output);
  }

  // optional uint64 processed_chunk_count = 5;
  if (has_processed_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->processed_chunk_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GarbageCollectorStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 processed_block_count = 1;
  if (has_processed_block_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->processed_block_count(), target);
  }

  // optional uint64 processed_gc_candidate_count = 2;
  if (has_processed_gc_candidate_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->processed_gc_candidate_count(), target);
  }

  // optional uint64 skipped_chunk_count = 3;
  if (has_skipped_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->skipped_chunk_count(), target);
  }

  // optional uint64 already_processed_chunk_count = 4;
  if (has_already_processed_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->already_processed_chunk_count(), target);
  }

  // optional uint64 processed_chunk_count = 5;
  if (has_processed_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->processed_chunk_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GarbageCollectorStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 processed_block_count = 1;
    if (has_processed_block_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->processed_block_count());
    }

    // optional uint64 processed_gc_candidate_count = 2;
    if (has_processed_gc_candidate_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->processed_gc_candidate_count());
    }

    // optional uint64 skipped_chunk_count = 3;
    if (has_skipped_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skipped_chunk_count());
    }

    // optional uint64 already_processed_chunk_count = 4;
    if (has_already_processed_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->already_processed_chunk_count());
    }

    // optional uint64 processed_chunk_count = 5;
    if (has_processed_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->processed_chunk_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GarbageCollectorStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GarbageCollectorStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GarbageCollectorStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GarbageCollectorStatsData::MergeFrom(const GarbageCollectorStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processed_block_count()) {
      set_processed_block_count(from.processed_block_count());
    }
    if (from.has_processed_gc_candidate_count()) {
      set_processed_gc_candidate_count(from.processed_gc_candidate_count());
    }
    if (from.has_skipped_chunk_count()) {
      set_skipped_chunk_count(from.skipped_chunk_count());
    }
    if (from.has_already_processed_chunk_count()) {
      set_already_processed_chunk_count(from.already_processed_chunk_count());
    }
    if (from.has_processed_chunk_count()) {
      set_processed_chunk_count(from.processed_chunk_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GarbageCollectorStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GarbageCollectorStatsData::CopyFrom(const GarbageCollectorStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GarbageCollectorStatsData::IsInitialized() const {

  return true;
}

void GarbageCollectorStatsData::Swap(GarbageCollectorStatsData* other) {
  if (other != this) {
    std::swap(processed_block_count_, other->processed_block_count_);
    std::swap(processed_gc_candidate_count_, other->processed_gc_candidate_count_);
    std::swap(skipped_chunk_count_, other->skipped_chunk_count_);
    std::swap(already_processed_chunk_count_, other->already_processed_chunk_count_);
    std::swap(processed_chunk_count_, other->processed_chunk_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GarbageCollectorStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GarbageCollectorStatsData_descriptor_;
  metadata.reflection = GarbageCollectorStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RabinChunkerStatsData::kChunkCountFieldNumber;
const int RabinChunkerStatsData::kSizeForcedChunkCountFieldNumber;
const int RabinChunkerStatsData::kCloseForcedChunkCountFieldNumber;
#endif  // !_MSC_VER

RabinChunkerStatsData::RabinChunkerStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RabinChunkerStatsData::InitAsDefaultInstance() {
}

RabinChunkerStatsData::RabinChunkerStatsData(const RabinChunkerStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RabinChunkerStatsData::SharedCtor() {
  _cached_size_ = 0;
  chunk_count_ = GOOGLE_ULONGLONG(0);
  size_forced_chunk_count_ = GOOGLE_ULONGLONG(0);
  close_forced_chunk_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RabinChunkerStatsData::~RabinChunkerStatsData() {
  SharedDtor();
}

void RabinChunkerStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RabinChunkerStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RabinChunkerStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RabinChunkerStatsData_descriptor_;
}

const RabinChunkerStatsData& RabinChunkerStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

RabinChunkerStatsData* RabinChunkerStatsData::default_instance_ = NULL;

RabinChunkerStatsData* RabinChunkerStatsData::New() const {
  return new RabinChunkerStatsData;
}

void RabinChunkerStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chunk_count_ = GOOGLE_ULONGLONG(0);
    size_forced_chunk_count_ = GOOGLE_ULONGLONG(0);
    close_forced_chunk_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RabinChunkerStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 chunk_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chunk_count_)));
          set_has_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_forced_chunk_count;
        break;
      }

      // optional uint64 size_forced_chunk_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_forced_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_forced_chunk_count_)));
          set_has_size_forced_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_close_forced_chunk_count;
        break;
      }

      // optional uint64 close_forced_chunk_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_forced_chunk_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &close_forced_chunk_count_)));
          set_has_close_forced_chunk_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RabinChunkerStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 chunk_count = 1;
  if (has_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chunk_count(), output);
  }

  // optional uint64 size_forced_chunk_count = 2;
  if (has_size_forced_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size_forced_chunk_count(), output);
  }

  // optional uint64 close_forced_chunk_count = 3;
  if (has_close_forced_chunk_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->close_forced_chunk_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RabinChunkerStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 chunk_count = 1;
  if (has_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->chunk_count(), target);
  }

  // optional uint64 size_forced_chunk_count = 2;
  if (has_size_forced_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size_forced_chunk_count(), target);
  }

  // optional uint64 close_forced_chunk_count = 3;
  if (has_close_forced_chunk_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->close_forced_chunk_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RabinChunkerStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 chunk_count = 1;
    if (has_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chunk_count());
    }

    // optional uint64 size_forced_chunk_count = 2;
    if (has_size_forced_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size_forced_chunk_count());
    }

    // optional uint64 close_forced_chunk_count = 3;
    if (has_close_forced_chunk_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->close_forced_chunk_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RabinChunkerStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RabinChunkerStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RabinChunkerStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RabinChunkerStatsData::MergeFrom(const RabinChunkerStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunk_count()) {
      set_chunk_count(from.chunk_count());
    }
    if (from.has_size_forced_chunk_count()) {
      set_size_forced_chunk_count(from.size_forced_chunk_count());
    }
    if (from.has_close_forced_chunk_count()) {
      set_close_forced_chunk_count(from.close_forced_chunk_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RabinChunkerStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RabinChunkerStatsData::CopyFrom(const RabinChunkerStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RabinChunkerStatsData::IsInitialized() const {

  return true;
}

void RabinChunkerStatsData::Swap(RabinChunkerStatsData* other) {
  if (other != this) {
    std::swap(chunk_count_, other->chunk_count_);
    std::swap(size_forced_chunk_count_, other->size_forced_chunk_count_);
    std::swap(close_forced_chunk_count_, other->close_forced_chunk_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RabinChunkerStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RabinChunkerStatsData_descriptor_;
  metadata.reflection = RabinChunkerStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentStorageStatsData::kReadCountFieldNumber;
const int ContentStorageStatsData::kWriteCountFieldNumber;
const int ContentStorageStatsData::kReadSizeFieldNumber;
const int ContentStorageStatsData::kWriteSizeFieldNumber;
#endif  // !_MSC_VER

ContentStorageStatsData::ContentStorageStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContentStorageStatsData::InitAsDefaultInstance() {
}

ContentStorageStatsData::ContentStorageStatsData(const ContentStorageStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContentStorageStatsData::SharedCtor() {
  _cached_size_ = 0;
  read_count_ = GOOGLE_ULONGLONG(0);
  write_count_ = GOOGLE_ULONGLONG(0);
  read_size_ = GOOGLE_ULONGLONG(0);
  write_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentStorageStatsData::~ContentStorageStatsData() {
  SharedDtor();
}

void ContentStorageStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContentStorageStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentStorageStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentStorageStatsData_descriptor_;
}

const ContentStorageStatsData& ContentStorageStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

ContentStorageStatsData* ContentStorageStatsData::default_instance_ = NULL;

ContentStorageStatsData* ContentStorageStatsData::New() const {
  return new ContentStorageStatsData;
}

void ContentStorageStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    read_count_ = GOOGLE_ULONGLONG(0);
    write_count_ = GOOGLE_ULONGLONG(0);
    read_size_ = GOOGLE_ULONGLONG(0);
    write_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentStorageStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 read_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_count_)));
          set_has_read_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_write_count;
        break;
      }

      // optional uint64 write_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_count_)));
          set_has_write_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_read_size;
        break;
      }

      // optional uint64 read_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &read_size_)));
          set_has_read_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_write_size;
        break;
      }

      // optional uint64 write_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &write_size_)));
          set_has_write_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentStorageStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->read_count(), output);
  }

  // optional uint64 write_count = 2;
  if (has_write_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->write_count(), output);
  }

  // optional uint64 read_size = 3;
  if (has_read_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->read_size(), output);
  }

  // optional uint64 write_size = 4;
  if (has_write_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->write_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContentStorageStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 read_count = 1;
  if (has_read_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->read_count(), target);
  }

  // optional uint64 write_count = 2;
  if (has_write_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->write_count(), target);
  }

  // optional uint64 read_size = 3;
  if (has_read_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->read_size(), target);
  }

  // optional uint64 write_size = 4;
  if (has_write_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->write_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContentStorageStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 read_count = 1;
    if (has_read_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_count());
    }

    // optional uint64 write_count = 2;
    if (has_write_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_count());
    }

    // optional uint64 read_size = 3;
    if (has_read_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->read_size());
    }

    // optional uint64 write_size = 4;
    if (has_write_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->write_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentStorageStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentStorageStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentStorageStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentStorageStatsData::MergeFrom(const ContentStorageStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_count()) {
      set_read_count(from.read_count());
    }
    if (from.has_write_count()) {
      set_write_count(from.write_count());
    }
    if (from.has_read_size()) {
      set_read_size(from.read_size());
    }
    if (from.has_write_size()) {
      set_write_size(from.write_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentStorageStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentStorageStatsData::CopyFrom(const ContentStorageStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentStorageStatsData::IsInitialized() const {

  return true;
}

void ContentStorageStatsData::Swap(ContentStorageStatsData* other) {
  if (other != this) {
    std::swap(read_count_, other->read_count_);
    std::swap(write_count_, other->write_count_);
    std::swap(read_size_, other->read_size_);
    std::swap(write_size_, other->write_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentStorageStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentStorageStatsData_descriptor_;
  metadata.reflection = ContentStorageStatsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogStatsData_LogTypeCounter::kTypeFieldNumber;
const int LogStatsData_LogTypeCounter::kCountFieldNumber;
#endif  // !_MSC_VER

LogStatsData_LogTypeCounter::LogStatsData_LogTypeCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStatsData_LogTypeCounter::InitAsDefaultInstance() {
}

LogStatsData_LogTypeCounter::LogStatsData_LogTypeCounter(const LogStatsData_LogTypeCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStatsData_LogTypeCounter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatsData_LogTypeCounter::~LogStatsData_LogTypeCounter() {
  SharedDtor();
}

void LogStatsData_LogTypeCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogStatsData_LogTypeCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatsData_LogTypeCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatsData_LogTypeCounter_descriptor_;
}

const LogStatsData_LogTypeCounter& LogStatsData_LogTypeCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

LogStatsData_LogTypeCounter* LogStatsData_LogTypeCounter::default_instance_ = NULL;

LogStatsData_LogTypeCounter* LogStatsData_LogTypeCounter::New() const {
  return new LogStatsData_LogTypeCounter;
}

void LogStatsData_LogTypeCounter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStatsData_LogTypeCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStatsData_LogTypeCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStatsData_LogTypeCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStatsData_LogTypeCounter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatsData_LogTypeCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStatsData_LogTypeCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatsData_LogTypeCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatsData_LogTypeCounter::MergeFrom(const LogStatsData_LogTypeCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStatsData_LogTypeCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatsData_LogTypeCounter::CopyFrom(const LogStatsData_LogTypeCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatsData_LogTypeCounter::IsInitialized() const {

  return true;
}

void LogStatsData_LogTypeCounter::Swap(LogStatsData_LogTypeCounter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStatsData_LogTypeCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatsData_LogTypeCounter_descriptor_;
  metadata.reflection = LogStatsData_LogTypeCounter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LogStatsData::kEventCountFieldNumber;
const int LogStatsData::kReplayedEventCountFieldNumber;
const int LogStatsData::kLogtypeCountFieldNumber;
#endif  // !_MSC_VER

LogStatsData::LogStatsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogStatsData::InitAsDefaultInstance() {
}

LogStatsData::LogStatsData(const LogStatsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogStatsData::SharedCtor() {
  _cached_size_ = 0;
  event_count_ = GOOGLE_ULONGLONG(0);
  replayed_event_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogStatsData::~LogStatsData() {
  SharedDtor();
}

void LogStatsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogStatsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogStatsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogStatsData_descriptor_;
}

const LogStatsData& LogStatsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dedupv1_5fstats_2eproto();
  return *default_instance_;
}

LogStatsData* LogStatsData::default_instance_ = NULL;

LogStatsData* LogStatsData::New() const {
  return new LogStatsData;
}

void LogStatsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_count_ = GOOGLE_ULONGLONG(0);
    replayed_event_count_ = GOOGLE_ULONGLONG(0);
  }
  logtype_count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogStatsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 event_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_count_)));
          set_has_event_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replayed_event_count;
        break;
      }

      // optional uint64 replayed_event_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replayed_event_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replayed_event_count_)));
          set_has_replayed_event_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logtype_count;
        break;
      }

      // repeated .LogStatsData.LogTypeCounter logtype_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logtype_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logtype_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logtype_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogStatsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 event_count = 1;
  if (has_event_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->event_count(), output);
  }

  // optional uint64 replayed_event_count = 2;
  if (has_replayed_event_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->replayed_event_count(), output);
  }

  // repeated .LogStatsData.LogTypeCounter logtype_count = 3;
  for (int i = 0; i < this->logtype_count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logtype_count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogStatsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 event_count = 1;
  if (has_event_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->event_count(), target);
  }

  // optional uint64 replayed_event_count = 2;
  if (has_replayed_event_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->replayed_event_count(), target);
  }

  // repeated .LogStatsData.LogTypeCounter logtype_count = 3;
  for (int i = 0; i < this->logtype_count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logtype_count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogStatsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 event_count = 1;
    if (has_event_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_count());
    }

    // optional uint64 replayed_event_count = 2;
    if (has_replayed_event_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replayed_event_count());
    }

  }
  // repeated .LogStatsData.LogTypeCounter logtype_count = 3;
  total_size += 1 * this->logtype_count_size();
  for (int i = 0; i < this->logtype_count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logtype_count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogStatsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogStatsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogStatsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogStatsData::MergeFrom(const LogStatsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  logtype_count_.MergeFrom(from.logtype_count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_count()) {
      set_event_count(from.event_count());
    }
    if (from.has_replayed_event_count()) {
      set_replayed_event_count(from.replayed_event_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogStatsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogStatsData::CopyFrom(const LogStatsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogStatsData::IsInitialized() const {

  return true;
}

void LogStatsData::Swap(LogStatsData* other) {
  if (other != this) {
    std::swap(event_count_, other->event_count_);
    std::swap(replayed_event_count_, other->replayed_event_count_);
    logtype_count_.Swap(&other->logtype_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogStatsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogStatsData_descriptor_;
  metadata.reflection = LogStatsData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
